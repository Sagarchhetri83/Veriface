"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tensorflow";
exports.ids = ["vendor-chunks/@tensorflow"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdadeltaOptimizer: () => (/* binding */ bd),\n/* harmony export */   AdagradOptimizer: () => (/* binding */ wd),\n/* harmony export */   AdamOptimizer: () => (/* binding */ Cd),\n/* harmony export */   AdamaxOptimizer: () => (/* binding */ Ed),\n/* harmony export */   DataStorage: () => (/* binding */ xo),\n/* harmony export */   ENV: () => (/* binding */ s),\n/* harmony export */   Environment: () => (/* binding */ o),\n/* harmony export */   KernelBackend: () => (/* binding */ bo),\n/* harmony export */   MomentumOptimizer: () => (/* binding */ Id),\n/* harmony export */   Optimizer: () => (/* binding */ xd),\n/* harmony export */   RMSPropOptimizer: () => (/* binding */ kd),\n/* harmony export */   Rank: () => (/* binding */ Ct),\n/* harmony export */   Reduction: () => (/* binding */ ch),\n/* harmony export */   SGDOptimizer: () => (/* binding */ Rd),\n/* harmony export */   Tensor: () => (/* binding */ wt),\n/* harmony export */   TensorBuffer: () => (/* binding */ gt),\n/* harmony export */   Variable: () => (/* binding */ St),\n/* harmony export */   abs: () => (/* binding */ ru),\n/* harmony export */   acos: () => (/* binding */ ou),\n/* harmony export */   acosh: () => (/* binding */ au),\n/* harmony export */   add: () => (/* binding */ rc),\n/* harmony export */   addN: () => (/* binding */ oc),\n/* harmony export */   addStrict: () => (/* binding */ ac),\n/* harmony export */   all: () => (/* binding */ Cl),\n/* harmony export */   any: () => (/* binding */ El),\n/* harmony export */   argMax: () => (/* binding */ Rl),\n/* harmony export */   argMin: () => (/* binding */ Il),\n/* harmony export */   asin: () => (/* binding */ iu),\n/* harmony export */   asinh: () => (/* binding */ su),\n/* harmony export */   atan: () => (/* binding */ uu),\n/* harmony export */   atan2: () => (/* binding */ ic),\n/* harmony export */   atanh: () => (/* binding */ cu),\n/* harmony export */   avgPool: () => (/* binding */ fl),\n/* harmony export */   avgPool3d: () => (/* binding */ vl),\n/* harmony export */   backend: () => (/* binding */ hn),\n/* harmony export */   backend_util: () => (/* binding */ Uo),\n/* harmony export */   basicLSTMCell: () => (/* binding */ zl),\n/* harmony export */   batchNorm: () => (/* binding */ ju),\n/* harmony export */   batchNorm2d: () => (/* binding */ Xu),\n/* harmony export */   batchNorm3d: () => (/* binding */ Yu),\n/* harmony export */   batchNorm4d: () => (/* binding */ $u),\n/* harmony export */   batchNormalization: () => (/* binding */ Ku),\n/* harmony export */   batchNormalization2d: () => (/* binding */ Gu),\n/* harmony export */   batchNormalization3d: () => (/* binding */ Hu),\n/* harmony export */   batchNormalization4d: () => (/* binding */ qu),\n/* harmony export */   batchToSpaceND: () => (/* binding */ vr),\n/* harmony export */   booleanMaskAsync: () => (/* binding */ Uc),\n/* harmony export */   broadcastTo: () => (/* binding */ mr),\n/* harmony export */   browser: () => (/* binding */ id),\n/* harmony export */   buffer: () => (/* binding */ dr),\n/* harmony export */   cast: () => (/* binding */ gr),\n/* harmony export */   ceil: () => (/* binding */ lu),\n/* harmony export */   clipByValue: () => (/* binding */ hu),\n/* harmony export */   clone: () => (/* binding */ yr),\n/* harmony export */   complex: () => (/* binding */ Dn),\n/* harmony export */   concat: () => (/* binding */ Yn),\n/* harmony export */   concat1d: () => (/* binding */ $n),\n/* harmony export */   concat2d: () => (/* binding */ Qn),\n/* harmony export */   concat3d: () => (/* binding */ Jn),\n/* harmony export */   concat4d: () => (/* binding */ Zn),\n/* harmony export */   conv1d: () => (/* binding */ Hc),\n/* harmony export */   conv2d: () => (/* binding */ qc),\n/* harmony export */   conv2dTranspose: () => (/* binding */ Zc),\n/* harmony export */   conv3d: () => (/* binding */ Kc),\n/* harmony export */   conv3dTranspose: () => (/* binding */ tl),\n/* harmony export */   cos: () => (/* binding */ fu),\n/* harmony export */   cosh: () => (/* binding */ du),\n/* harmony export */   cumsum: () => (/* binding */ xr),\n/* harmony export */   customGrad: () => (/* binding */ vo),\n/* harmony export */   deprecationWarn: () => (/* binding */ Xe),\n/* harmony export */   depthToSpace: () => (/* binding */ br),\n/* harmony export */   depthwiseConv2d: () => (/* binding */ Yc),\n/* harmony export */   diag: () => (/* binding */ eh),\n/* harmony export */   disableDeprecationWarnings: () => (/* binding */ je),\n/* harmony export */   dispose: () => (/* binding */ tn),\n/* harmony export */   disposeVariables: () => (/* binding */ Ye),\n/* harmony export */   div: () => (/* binding */ sc),\n/* harmony export */   divNoNan: () => (/* binding */ uc),\n/* harmony export */   divStrict: () => (/* binding */ cc),\n/* harmony export */   dot: () => (/* binding */ nl),\n/* harmony export */   dropout: () => (/* binding */ nh),\n/* harmony export */   elu: () => (/* binding */ _l),\n/* harmony export */   enableDebugMode: () => (/* binding */ Ke),\n/* harmony export */   enableProdMode: () => (/* binding */ qe),\n/* harmony export */   engine: () => (/* binding */ $e),\n/* harmony export */   env: () => (/* binding */ i),\n/* harmony export */   equal: () => (/* binding */ Rc),\n/* harmony export */   equalStrict: () => (/* binding */ Ic),\n/* harmony export */   erf: () => (/* binding */ pu),\n/* harmony export */   exp: () => (/* binding */ vu),\n/* harmony export */   expandDims: () => (/* binding */ wr),\n/* harmony export */   expm1: () => (/* binding */ mu),\n/* harmony export */   eye: () => (/* binding */ Cr),\n/* harmony export */   fft: () => (/* binding */ Xl),\n/* harmony export */   fill: () => (/* binding */ Hn),\n/* harmony export */   findBackend: () => (/* binding */ un),\n/* harmony export */   findBackendFactory: () => (/* binding */ cn),\n/* harmony export */   floor: () => (/* binding */ gu),\n/* harmony export */   floorDiv: () => (/* binding */ lc),\n/* harmony export */   frame: () => (/* binding */ ih),\n/* harmony export */   fused: () => (/* binding */ zh),\n/* harmony export */   gather: () => (/* binding */ Lc),\n/* harmony export */   gatherND: () => (/* binding */ th),\n/* harmony export */   gather_util: () => (/* binding */ Xr),\n/* harmony export */   getBackend: () => (/* binding */ an),\n/* harmony export */   getGradient: () => (/* binding */ h),\n/* harmony export */   getKernel: () => (/* binding */ l),\n/* harmony export */   getKernelsForBackend: () => (/* binding */ f),\n/* harmony export */   grad: () => (/* binding */ co),\n/* harmony export */   grads: () => (/* binding */ lo),\n/* harmony export */   greater: () => (/* binding */ kc),\n/* harmony export */   greaterEqual: () => (/* binding */ Sc),\n/* harmony export */   greaterEqualStrict: () => (/* binding */ Ac),\n/* harmony export */   greaterStrict: () => (/* binding */ Dc),\n/* harmony export */   hammingWindow: () => (/* binding */ ah),\n/* harmony export */   hannWindow: () => (/* binding */ oh),\n/* harmony export */   ifft: () => (/* binding */ Yl),\n/* harmony export */   imag: () => (/* binding */ Nn),\n/* harmony export */   image: () => (/* binding */ Oh),\n/* harmony export */   inTopKAsync: () => (/* binding */ lh),\n/* harmony export */   io: () => (/* binding */ ed),\n/* harmony export */   irfft: () => (/* binding */ Ql),\n/* harmony export */   isFinite: () => (/* binding */ Du),\n/* harmony export */   isInf: () => (/* binding */ Au),\n/* harmony export */   isNaN: () => (/* binding */ Su),\n/* harmony export */   keep: () => (/* binding */ en),\n/* harmony export */   leakyRelu: () => (/* binding */ Ol),\n/* harmony export */   less: () => (/* binding */ Tc),\n/* harmony export */   lessEqual: () => (/* binding */ Nc),\n/* harmony export */   lessEqualStrict: () => (/* binding */ Fc),\n/* harmony export */   lessStrict: () => (/* binding */ _c),\n/* harmony export */   linalg: () => (/* binding */ Ih),\n/* harmony export */   linspace: () => (/* binding */ qn),\n/* harmony export */   localResponseNormalization: () => (/* binding */ Ul),\n/* harmony export */   log: () => (/* binding */ yu),\n/* harmony export */   log1p: () => (/* binding */ xu),\n/* harmony export */   logSigmoid: () => (/* binding */ bu),\n/* harmony export */   logSoftmax: () => (/* binding */ yo),\n/* harmony export */   logSumExp: () => (/* binding */ kl),\n/* harmony export */   logicalAnd: () => (/* binding */ Qu),\n/* harmony export */   logicalNot: () => (/* binding */ Ju),\n/* harmony export */   logicalOr: () => (/* binding */ Zu),\n/* harmony export */   logicalXor: () => (/* binding */ tc),\n/* harmony export */   losses: () => (/* binding */ bh),\n/* harmony export */   matMul: () => (/* binding */ el),\n/* harmony export */   math: () => (/* binding */ od),\n/* harmony export */   max: () => (/* binding */ Sl),\n/* harmony export */   maxPool: () => (/* binding */ hl),\n/* harmony export */   maxPool3d: () => (/* binding */ pl),\n/* harmony export */   maximum: () => (/* binding */ hc),\n/* harmony export */   maximumStrict: () => (/* binding */ fc),\n/* harmony export */   mean: () => (/* binding */ Al),\n/* harmony export */   memory: () => (/* binding */ Qe),\n/* harmony export */   min: () => (/* binding */ Dl),\n/* harmony export */   minimum: () => (/* binding */ dc),\n/* harmony export */   minimumStrict: () => (/* binding */ pc),\n/* harmony export */   mod: () => (/* binding */ vc),\n/* harmony export */   modStrict: () => (/* binding */ mc),\n/* harmony export */   moments: () => (/* binding */ Tl),\n/* harmony export */   movingAverage: () => (/* binding */ Hl),\n/* harmony export */   mul: () => (/* binding */ gc),\n/* harmony export */   mulStrict: () => (/* binding */ yc),\n/* harmony export */   multiRNNCell: () => (/* binding */ Gl),\n/* harmony export */   multinomial: () => (/* binding */ Er),\n/* harmony export */   neg: () => (/* binding */ wu),\n/* harmony export */   nextFrame: () => (/* binding */ Td),\n/* harmony export */   norm: () => (/* binding */ Vl),\n/* harmony export */   notEqual: () => (/* binding */ Oc),\n/* harmony export */   notEqualStrict: () => (/* binding */ Mc),\n/* harmony export */   oneHot: () => (/* binding */ Rr),\n/* harmony export */   ones: () => (/* binding */ zn),\n/* harmony export */   onesLike: () => (/* binding */ jn),\n/* harmony export */   op: () => (/* binding */ An),\n/* harmony export */   outerProduct: () => (/* binding */ rl),\n/* harmony export */   pad: () => (/* binding */ Ir),\n/* harmony export */   pad1d: () => (/* binding */ kr),\n/* harmony export */   pad2d: () => (/* binding */ Sr),\n/* harmony export */   pad3d: () => (/* binding */ Ar),\n/* harmony export */   pad4d: () => (/* binding */ Dr),\n/* harmony export */   pool: () => (/* binding */ dl),\n/* harmony export */   pow: () => (/* binding */ xc),\n/* harmony export */   powStrict: () => (/* binding */ bc),\n/* harmony export */   prelu: () => (/* binding */ Ml),\n/* harmony export */   print: () => (/* binding */ pr),\n/* harmony export */   prod: () => (/* binding */ Fl),\n/* harmony export */   profile: () => (/* binding */ Je),\n/* harmony export */   rand: () => (/* binding */ Tr),\n/* harmony export */   randomGamma: () => (/* binding */ Fr),\n/* harmony export */   randomNormal: () => (/* binding */ Nr),\n/* harmony export */   randomUniform: () => (/* binding */ _r),\n/* harmony export */   range: () => (/* binding */ Kn),\n/* harmony export */   ready: () => (/* binding */ on),\n/* harmony export */   real: () => (/* binding */ Tn),\n/* harmony export */   reciprocal: () => (/* binding */ Cu),\n/* harmony export */   registerBackend: () => (/* binding */ ln),\n/* harmony export */   registerGradient: () => (/* binding */ p),\n/* harmony export */   registerKernel: () => (/* binding */ d),\n/* harmony export */   relu: () => (/* binding */ Bl),\n/* harmony export */   relu6: () => (/* binding */ Pl),\n/* harmony export */   removeBackend: () => (/* binding */ sn),\n/* harmony export */   reshape: () => (/* binding */ Or),\n/* harmony export */   reverse: () => (/* binding */ ol),\n/* harmony export */   reverse1d: () => (/* binding */ al),\n/* harmony export */   reverse2d: () => (/* binding */ il),\n/* harmony export */   reverse3d: () => (/* binding */ sl),\n/* harmony export */   reverse4d: () => (/* binding */ ul),\n/* harmony export */   rfft: () => (/* binding */ $l),\n/* harmony export */   round: () => (/* binding */ Eu),\n/* harmony export */   rsqrt: () => (/* binding */ Ru),\n/* harmony export */   scalar: () => (/* binding */ On),\n/* harmony export */   scatterND: () => (/* binding */ jl),\n/* harmony export */   scatter_util: () => (/* binding */ to),\n/* harmony export */   selu: () => (/* binding */ Ll),\n/* harmony export */   separableConv2d: () => (/* binding */ Jc),\n/* harmony export */   serialization: () => (/* binding */ ld),\n/* harmony export */   setBackend: () => (/* binding */ rn),\n/* harmony export */   setPlatform: () => (/* binding */ fn),\n/* harmony export */   setdiff1dAsync: () => (/* binding */ Vr),\n/* harmony export */   sigmoid: () => (/* binding */ Iu),\n/* harmony export */   sign: () => (/* binding */ ku),\n/* harmony export */   signal: () => (/* binding */ uh),\n/* harmony export */   sin: () => (/* binding */ Tu),\n/* harmony export */   sinh: () => (/* binding */ Nu),\n/* harmony export */   slice: () => (/* binding */ ml),\n/* harmony export */   slice1d: () => (/* binding */ gl),\n/* harmony export */   slice2d: () => (/* binding */ yl),\n/* harmony export */   slice3d: () => (/* binding */ xl),\n/* harmony export */   slice4d: () => (/* binding */ bl),\n/* harmony export */   slice_util: () => (/* binding */ uo),\n/* harmony export */   softmax: () => (/* binding */ go),\n/* harmony export */   softplus: () => (/* binding */ Fu),\n/* harmony export */   spaceToBatchND: () => (/* binding */ Mr),\n/* harmony export */   sparseToDense: () => (/* binding */ Zl),\n/* harmony export */   spectral: () => (/* binding */ Jl),\n/* harmony export */   split: () => (/* binding */ tr),\n/* harmony export */   sqrt: () => (/* binding */ _u),\n/* harmony export */   square: () => (/* binding */ tu),\n/* harmony export */   squaredDifference: () => (/* binding */ nu),\n/* harmony export */   squaredDifferenceStrict: () => (/* binding */ wc),\n/* harmony export */   squeeze: () => (/* binding */ Br),\n/* harmony export */   stack: () => (/* binding */ Pr),\n/* harmony export */   step: () => (/* binding */ Ou),\n/* harmony export */   stft: () => (/* binding */ sh),\n/* harmony export */   stridedSlice: () => (/* binding */ ql),\n/* harmony export */   sub: () => (/* binding */ Cc),\n/* harmony export */   subStrict: () => (/* binding */ Ec),\n/* harmony export */   sum: () => (/* binding */ Nl),\n/* harmony export */   sumOutType: () => (/* binding */ Tt),\n/* harmony export */   tan: () => (/* binding */ Mu),\n/* harmony export */   tanh: () => (/* binding */ Bu),\n/* harmony export */   tensor: () => (/* binding */ Fn),\n/* harmony export */   tensor1d: () => (/* binding */ Mn),\n/* harmony export */   tensor2d: () => (/* binding */ Bn),\n/* harmony export */   tensor3d: () => (/* binding */ Pn),\n/* harmony export */   tensor4d: () => (/* binding */ Ln),\n/* harmony export */   tensor5d: () => (/* binding */ Wn),\n/* harmony export */   tensor6d: () => (/* binding */ Un),\n/* harmony export */   tensor_util: () => (/* binding */ Mt),\n/* harmony export */   test_util: () => (/* binding */ md),\n/* harmony export */   tidy: () => (/* binding */ Ze),\n/* harmony export */   tile: () => (/* binding */ Lr),\n/* harmony export */   time: () => (/* binding */ nn),\n/* harmony export */   topk: () => (/* binding */ Kl),\n/* harmony export */   train: () => (/* binding */ Ad),\n/* harmony export */   transpose: () => (/* binding */ Wl),\n/* harmony export */   truncatedNormal: () => (/* binding */ Wr),\n/* harmony export */   unregisterGradient: () => (/* binding */ m),\n/* harmony export */   unregisterKernel: () => (/* binding */ v),\n/* harmony export */   unsortedSegmentSum: () => (/* binding */ Wc),\n/* harmony export */   unstack: () => (/* binding */ Ur),\n/* harmony export */   util: () => (/* binding */ st),\n/* harmony export */   valueAndGrad: () => (/* binding */ ho),\n/* harmony export */   valueAndGrads: () => (/* binding */ fo),\n/* harmony export */   variable: () => (/* binding */ Vn),\n/* harmony export */   variableGrads: () => (/* binding */ po),\n/* harmony export */   version_core: () => (/* binding */ gd),\n/* harmony export */   webgl: () => (/* binding */ yd),\n/* harmony export */   where: () => (/* binding */ ec),\n/* harmony export */   whereAsync: () => (/* binding */ nc),\n/* harmony export */   zeros: () => (/* binding */ Gn),\n/* harmony export */   zerosLike: () => (/* binding */ Xn)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */ var t = function(e, n) {\n    return (t = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t, e) {\n        t.__proto__ = e;\n    } || function(t, e) {\n        for(var n in e)e.hasOwnProperty(n) && (t[n] = e[n]);\n    })(e, n);\n};\nfunction e(e, n) {\n    function r() {\n        this.constructor = e;\n    }\n    t(e, n), e.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r);\n}\nfunction n(t, e, n, r) {\n    return new (n || (n = Promise))(function(o, a) {\n        function i(t) {\n            try {\n                u(r.next(t));\n            } catch (t) {\n                a(t);\n            }\n        }\n        function s(t) {\n            try {\n                u(r.throw(t));\n            } catch (t) {\n                a(t);\n            }\n        }\n        function u(t) {\n            t.done ? o(t.value) : new n(function(e) {\n                e(t.value);\n            }).then(i, s);\n        }\n        u((r = r.apply(t, e || [])).next());\n    });\n}\nfunction r(t, e) {\n    var n, r, o, a, i = {\n        label: 0,\n        sent: function() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return a = {\n        next: s(0),\n        throw: s(1),\n        return: s(2)\n    }, \"function\" == typeof Symbol && (a[Symbol.iterator] = function() {\n        return this;\n    }), a;\n    function s(a) {\n        return function(s) {\n            return function(a) {\n                if (n) throw new TypeError(\"Generator is already executing.\");\n                for(; i;)try {\n                    if (n = 1, r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, a[1])).done) return o;\n                    switch(r = 0, o && (a = [\n                        2 & a[0],\n                        o.value\n                    ]), a[0]){\n                        case 0:\n                        case 1:\n                            o = a;\n                            break;\n                        case 4:\n                            return i.label++, {\n                                value: a[1],\n                                done: !1\n                            };\n                        case 5:\n                            i.label++, r = a[1], a = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            a = i.ops.pop(), i.trys.pop();\n                            continue;\n                        default:\n                            if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {\n                                i = 0;\n                                continue;\n                            }\n                            if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {\n                                i.label = a[1];\n                                break;\n                            }\n                            if (6 === a[0] && i.label < o[1]) {\n                                i.label = o[1], o = a;\n                                break;\n                            }\n                            if (o && i.label < o[2]) {\n                                i.label = o[2], i.ops.push(a);\n                                break;\n                            }\n                            o[2] && i.ops.pop(), i.trys.pop();\n                            continue;\n                    }\n                    a = e.call(t, i);\n                } catch (t) {\n                    a = [\n                        6,\n                        t\n                    ], r = 0;\n                } finally{\n                    n = o = 0;\n                }\n                if (5 & a[0]) throw a[1];\n                return {\n                    value: a[0] ? a[1] : void 0,\n                    done: !0\n                };\n            }([\n                a,\n                s\n            ]);\n        };\n    }\n}\nvar o = function() {\n    function t(t) {\n        this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.populateURLFlags();\n    }\n    return t.prototype.setPlatform = function(t, e) {\n        null != this.platform && console.warn(\"Platform \" + this.platformName + \" has already been set. Overwriting the platform with \" + e + \".\"), this.platformName = t, this.platform = e;\n    }, t.prototype.registerFlag = function(t, e, n) {\n        if (this.flagRegistry[t] = {\n            evaluationFn: e,\n            setHook: n\n        }, null != this.urlFlags[t]) {\n            var r = this.urlFlags[t];\n            console.warn(\"Setting feature override from URL \" + t + \": \" + r + \".\"), this.set(t, r);\n        }\n    }, t.prototype.get = function(t) {\n        return t in this.flags ? this.flags[t] : (this.flags[t] = this.evaluateFlag(t), this.flags[t]);\n    }, t.prototype.getNumber = function(t) {\n        return this.get(t);\n    }, t.prototype.getBool = function(t) {\n        return this.get(t);\n    }, t.prototype.getFlags = function() {\n        return this.flags;\n    }, Object.defineProperty(t.prototype, \"features\", {\n        get: function() {\n            return this.flags;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.set = function(t, e) {\n        if (null == this.flagRegistry[t]) throw new Error(\"Cannot set flag \" + t + \" as it has not been registered.\");\n        this.flags[t] = e, null != this.flagRegistry[t].setHook && this.flagRegistry[t].setHook(e);\n    }, t.prototype.evaluateFlag = function(t) {\n        if (null == this.flagRegistry[t]) throw new Error(\"Cannot evaluate flag '\" + t + \"': no evaluation function found.\");\n        return this.flagRegistry[t].evaluationFn();\n    }, t.prototype.setFlags = function(t) {\n        this.flags = Object.assign({}, t);\n    }, t.prototype.reset = function() {\n        this.flags = {}, this.urlFlags = {}, this.populateURLFlags();\n    }, t.prototype.populateURLFlags = function() {\n        var t = this;\n        if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {\n            var e, n, r = (e = this.global.location.search, n = {}, e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t) {\n                for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];\n                return a(n, e[0], e[1]), e.join(\"=\");\n            }), n);\n            if (\"tfjsflags\" in r) r.tfjsflags.split(\",\").forEach(function(e) {\n                var n = e.split(\":\"), r = n[0], o = n[1];\n                t.urlFlags[r] = function(t, e) {\n                    if (\"true\" === (e = e.toLowerCase()) || \"false\" === e) return \"true\" === e;\n                    if (\"\" + +e === e) return +e;\n                    throw new Error(\"Could not parse value flag value \" + e + \" for flag \" + t + \".\");\n                }(r, o);\n            });\n        }\n    }, t;\n}();\nfunction a(t, e, n) {\n    t[decodeURIComponent(e)] = decodeURIComponent(n || \"\");\n}\nfunction i() {\n    return s;\n}\nvar s = null;\nvar u = new Map, c = new Map;\nfunction l(t, e) {\n    var n = g(t, e);\n    return u.get(n);\n}\nfunction h(t) {\n    return c.get(t);\n}\nfunction f(t) {\n    for(var e = u.entries(), n = [];;){\n        var r = e.next(), o = r.done, a = r.value;\n        if (o) break;\n        var i = a[0], s = a[1];\n        i.split(\"_\")[0] === t && n.push(s);\n    }\n    return n;\n}\nfunction d(t) {\n    var e = t.kernelName, n = t.backendName, r = g(e, n);\n    if (u.has(r)) throw new Error(\"The kernel '\" + e + \"' for backend '\" + n + \"' is already registered\");\n    u.set(r, t);\n}\nfunction p(t) {\n    var e = t.kernelName;\n    c.has(e) && console.warn(\"Overriding the gradient for '\" + e + \"'\"), c.set(e, t);\n}\nfunction v(t, e) {\n    var n = g(t, e);\n    if (!u.has(n)) throw new Error(\"The kernel '\" + t + \"' for backend '\" + e + \"' is not registered\");\n    u.delete(n);\n}\nfunction m(t) {\n    if (!c.has(t)) throw new Error(\"The gradient '\" + t + \"' for backend is not registered\");\n    c.delete(t);\n}\nfunction g(t, e) {\n    return e + \"_\" + t;\n}\nfunction y(t) {\n    for(var e = t.length, n = 0, r = 0; e > 0;)r = Math.random() * e | 0, n = t[--e], t[e] = t[r], t[r] = n;\n}\nfunction x(t, e, n) {\n    return Math.max(t, Math.min(e, n));\n}\nfunction b(t) {\n    return t % 2 == 0 ? t : t + 1;\n}\nfunction w(t) {\n    for(var e = 0, n = 0; n < t.length; n++)e += t[n];\n    return e;\n}\nfunction C(t, e) {\n    if (!t) throw new Error(\"string\" == typeof e ? e : e());\n}\nfunction E(t, e, n) {\n    void 0 === n && (n = \"\"), C(S(t, e), function() {\n        return n + \" Shapes \" + t + \" and \" + e + \" must match\";\n    });\n}\nfunction R(t) {\n    C(null != t, function() {\n        return \"The input to the tensor constructor must be a non-null value.\";\n    });\n}\nfunction I(t, e, n) {\n    if (void 0 === e && (e = []), void 0 === n && (n = !1), null == e && (e = []), Array.isArray(t) || V(t) && !n) for(var r = 0; r < t.length; ++r)I(t[r], e, n);\n    else e.push(t);\n    return e;\n}\nfunction k(t) {\n    if (0 === t.length) return 1;\n    for(var e = t[0], n = 1; n < t.length; n++)e *= t[n];\n    return e;\n}\nfunction S(t, e) {\n    if (t === e) return !0;\n    if (null == t || null == e) return !1;\n    if (t.length !== e.length) return !1;\n    for(var n = 0; n < t.length; n++)if (t[n] !== e[n]) return !1;\n    return !0;\n}\nfunction A(t) {\n    return t % 1 == 0;\n}\nfunction D(t) {\n    if (null != Math.tanh) return Math.tanh(t);\n    if (t === 1 / 0) return 1;\n    if (t === -1 / 0) return -1;\n    var e = Math.exp(2 * t);\n    return (e - 1) / (e + 1);\n}\nfunction T(t) {\n    var e = Math.ceil(Math.sqrt(t));\n    return [\n        e,\n        Math.ceil(t / e)\n    ];\n}\nfunction N(t, e) {\n    return e <= t.length ? t : t + \" \".repeat(e - t.length);\n}\nfunction F(t, e, n) {\n    return void 0 === e && (e = function(t) {\n        return 0;\n    }), new Promise(function(r, o) {\n        var a = 0, i = function() {\n            if (t()) r();\n            else {\n                a++;\n                var s = e(a);\n                null != n && a >= n ? o() : setTimeout(i, s);\n            }\n        };\n        i();\n    });\n}\nfunction _(t, e) {\n    for(var n = 1, r = -1, o = 0; o < t.length; ++o)if (t[o] >= 0) n *= t[o];\n    else if (-1 === t[o]) {\n        if (-1 !== r) throw Error(\"Shapes can only have 1 implicit size. Found -1 at dim \" + r + \" and dim \" + o);\n        r = o;\n    } else if (t[o] < 0) throw Error(\"Shapes can not be < 0. Found \" + t[o] + \" at dim \" + o);\n    if (-1 === r) {\n        if (e > 0 && e !== n) throw Error(\"Size(\" + e + \") must match the product of shape \" + t);\n        return t;\n    }\n    if (0 === n) throw Error(\"Cannot infer the missing size in [\" + t + \"] when there are 0 elements\");\n    if (e % n != 0) throw Error(\"The implicit shape can't be a fractional number. Got \" + e + \" / \" + n);\n    var a = t.slice();\n    return a[r] = e / n, a;\n}\nfunction O(t, e) {\n    var n = e.length;\n    return C((t = null == t ? e.map(function(t, e) {\n        return e;\n    }) : [].concat(t)).every(function(t) {\n        return t >= -n && t < n;\n    }), function() {\n        return \"All values in axis param must be in range [-\" + n + \", \" + n + \") but got axis \" + t;\n    }), C(t.every(function(t) {\n        return A(t);\n    }), function() {\n        return \"All values in axis param must be integers but got axis \" + t;\n    }), t.map(function(t) {\n        return t < 0 ? n + t : t;\n    });\n}\nfunction M(t, e) {\n    for(var n = [], r = [], o = null != e && Array.isArray(e) && 0 === e.length, a = null == e || o ? null : O(e, t).sort(), i = 0, s = 0; s < t.length; ++s){\n        if (null != a) {\n            if (a[i] === s && 1 !== t[s]) throw new Error(\"Can't squeeze axis \" + s + \" since its dim '\" + t[s] + \"' is not 1\");\n            (null == a[i] || a[i] > s) && 1 === t[s] && (n.push(t[s]), r.push(s)), a[i] <= s && i++;\n        }\n        1 !== t[s] && (n.push(t[s]), r.push(s));\n    }\n    return {\n        newShape: n,\n        keptDims: r\n    };\n}\nfunction B(t, e) {\n    var n = null;\n    if (null == t || \"float32\" === t) n = new Float32Array(e);\n    else if (\"int32\" === t) n = new Int32Array(e);\n    else {\n        if (\"bool\" !== t) throw new Error(\"Unknown data type \" + t);\n        n = new Uint8Array(e);\n    }\n    return n;\n}\nfunction P(t, e) {\n    var n = null;\n    if (null == t || \"float32\" === t) n = new Float32Array(e);\n    else if (\"int32\" === t) n = new Int32Array(e);\n    else if (\"bool\" === t) n = new Uint8Array(e);\n    else {\n        if (\"string\" !== t) throw new Error(\"Unknown data type \" + t);\n        n = new Array(e);\n    }\n    return n;\n}\nfunction L(t, e) {\n    for(var n = 0; n < t.length; n++){\n        var r = t[n];\n        if (isNaN(r) || !isFinite(r)) throw Error(\"A tensor of type \" + e + \" being uploaded contains \" + r + \".\");\n    }\n}\nfunction W(t) {\n    return \"bool\" === t || \"complex64\" === t || \"float32\" === t || \"int32\" === t || \"string\" === t;\n}\nfunction U(t, e) {\n    return \"complex64\" !== e && (\"float32\" !== e || \"complex64\" === t) && (\"int32\" !== e || \"float32\" === t || \"complex64\" === t) && (\"bool\" !== e || \"bool\" !== t);\n}\nfunction V(t) {\n    return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array;\n}\nfunction z(t) {\n    if (\"float32\" === t || \"int32\" === t) return 4;\n    if (\"complex64\" === t) return 8;\n    if (\"bool\" === t) return 1;\n    throw new Error(\"Unknown dtype \" + t);\n}\nfunction G(t) {\n    if (null == t) return 0;\n    var e = 0;\n    return t.forEach(function(t) {\n        return e += t.length;\n    }), e;\n}\nfunction H(t) {\n    return \"string\" == typeof t || t instanceof String;\n}\nfunction q(t) {\n    return \"boolean\" == typeof t;\n}\nfunction K(t) {\n    return \"number\" == typeof t;\n}\nfunction j(t) {\n    return Array.isArray(t) ? j(t[0]) : t instanceof Float32Array ? \"float32\" : t instanceof Int32Array || t instanceof Uint8Array ? \"int32\" : K(t) ? \"float32\" : H(t) ? \"string\" : q(t) ? \"bool\" : \"float32\";\n}\nfunction X(t) {\n    return !!(t && t.constructor && t.call && t.apply);\n}\nfunction Y(t, e) {\n    for(var n = e; n < t; ++n)if (t % n == 0) return n;\n    return t;\n}\nfunction $(t) {\n    var e = t.length;\n    if (e < 2) return [];\n    var n = new Array(e - 1);\n    n[e - 2] = t[e - 1];\n    for(var r = e - 3; r >= 0; --r)n[r] = n[r + 1] * t[r + 1];\n    return n;\n}\nfunction Q(t, e, n) {\n    if (\"string\" === e) throw new Error(\"Cannot convert a string[] to a TypedArray\");\n    if (Array.isArray(t) && (t = I(t)), n && L(t, e), function(t, e) {\n        return t instanceof Float32Array && \"float32\" === e || t instanceof Int32Array && \"int32\" === e || t instanceof Uint8Array && \"bool\" === e;\n    }(t, e)) return t;\n    if (null == e || \"float32\" === e || \"complex64\" === e) return new Float32Array(t);\n    if (\"int32\" === e) return new Int32Array(t);\n    if (\"bool\" === e) {\n        for(var r = new Uint8Array(t.length), o = 0; o < r.length; ++o)0 !== Math.round(t[o]) && (r[o] = 1);\n        return r;\n    }\n    throw new Error(\"Unknown data type \" + e);\n}\nfunction J(t, e) {\n    if (0 === t.length) return e[0];\n    var n = t.reduce(function(t, e) {\n        return t * e;\n    });\n    if (0 === n) return [];\n    if (n !== e.length) throw new Error(\"[\" + t + \"] does not match the input size.\");\n    return function t(e, n, r) {\n        var o = new Array;\n        if (1 === n.length) for(var a = n[0], i = 0; i < a; i++)o[i] = r[e + i];\n        else {\n            a = n[0];\n            var s = n.slice(1), u = s.reduce(function(t, e) {\n                return t * e;\n            });\n            for(i = 0; i < a; i++)o[i] = t(e + i * u, s, r);\n        }\n        return o;\n    }(0, t, e);\n}\nfunction Z(t, e) {\n    for(var n = tt(t, e), r = 0; r < n.length; r++)n[r] = 1;\n    return n;\n}\nfunction tt(t, e) {\n    if (null == e || \"float32\" === e || \"complex64\" === e) return new Float32Array(t);\n    if (\"int32\" === e) return new Int32Array(t);\n    if (\"bool\" === e) return new Uint8Array(t);\n    throw new Error(\"Unknown data type \" + e);\n}\nfunction et() {\n    return i().platform.now();\n}\nfunction nt(t) {\n    t.forEach(function(e) {\n        C(Number.isInteger(e) && e >= 0, function() {\n            return \"Tensor must have a shape comprised of positive integers but got shape [\" + t + \"].\";\n        });\n    });\n}\nfunction rt(t, e) {\n    return void 0 === e && (e = \"utf-8\"), e = e || \"utf-8\", i().platform.encode(t, e);\n}\nfunction ot(t, e) {\n    return void 0 === e && (e = \"utf-8\"), e = e || \"utf-8\", i().platform.decode(t, e);\n}\nfunction at(t, e, n) {\n    if (0 === e) return 0;\n    if (1 === e) return t[0];\n    for(var r = t[t.length - 1], o = 0; o < t.length - 1; ++o)r += n[o] * t[o];\n    return r;\n}\nfunction it(t, e, n) {\n    if (0 === e) return [];\n    if (1 === e) return [\n        t\n    ];\n    for(var r = new Array(e), o = 0; o < r.length - 1; ++o)r[o] = Math.floor(t / n[o]), t -= r[o] * n[o];\n    return r[r.length - 1] = t, r;\n}\nvar st = Object.freeze({\n    shuffle: y,\n    clamp: x,\n    nearestLargerEven: b,\n    sum: w,\n    randUniform: function(t, e) {\n        var n = Math.random();\n        return e * n + (1 - n) * t;\n    },\n    distSquared: function(t, e) {\n        for(var n = 0, r = 0; r < t.length; r++){\n            var o = Number(t[r]) - Number(e[r]);\n            n += o * o;\n        }\n        return n;\n    },\n    assert: C,\n    assertShapesMatch: E,\n    assertNonNull: R,\n    flatten: I,\n    sizeFromShape: k,\n    isScalarShape: function(t) {\n        return 0 === t.length;\n    },\n    arraysEqual: S,\n    isInt: A,\n    tanh: D,\n    sizeToSquarishShape: T,\n    createShuffledIndices: function(t) {\n        for(var e = new Uint32Array(t), n = 0; n < t; ++n)e[n] = n;\n        return y(e), e;\n    },\n    rightPad: N,\n    repeatedTry: F,\n    inferFromImplicitShape: _,\n    parseAxisParam: O,\n    squeezeShape: M,\n    getTypedArrayFromDType: B,\n    getArrayFromDType: P,\n    checkConversionForErrors: L,\n    isValidDtype: W,\n    hasEncodingLoss: U,\n    isTypedArray: V,\n    bytesPerElement: z,\n    bytesFromStringArray: G,\n    isString: H,\n    isBoolean: q,\n    isNumber: K,\n    inferDtype: j,\n    isFunction: X,\n    nearestDivisor: Y,\n    computeStrides: $,\n    toTypedArray: Q,\n    toNestedArray: J,\n    makeOnesTypedArray: Z,\n    makeZerosTypedArray: tt,\n    now: et,\n    assertNonNegativeIntegerDimensions: nt,\n    fetch: function(t, e) {\n        return i().platform.fetch(t, e);\n    },\n    encodeString: rt,\n    decodeString: ot,\n    locToIndex: at,\n    indexToLoc: it\n}), ut = function() {\n    function t(t, e) {\n        this.backendTimer = t, this.logger = e, null == e && (this.logger = new ct);\n    }\n    return t.prototype.profileKernel = function(t, e, n) {\n        var r, o = this, a = this.backendTimer.time(function() {\n            r = n();\n        });\n        return r.forEach(function(n) {\n            n.data().then(function(r) {\n                !function(t, e, n) {\n                    if (\"float32\" !== e) return !1;\n                    for(var r = 0; r < t.length; r++){\n                        var o = t[r];\n                        if (isNaN(o) || !isFinite(o)) return console.warn(\"Found \" + o + \" in the result of '\" + n + \"'\"), !0;\n                    }\n                }(r, n.dtype, t), a.then(function(a) {\n                    var i = \"\";\n                    null != a.getExtraProfileInfo && (i = a.getExtraProfileInfo()), o.logger.logKernelProfile(t, n, r, a.kernelMs, e, i);\n                });\n            });\n        }), r;\n    }, t;\n}();\nvar ct = function() {\n    function t() {}\n    return t.prototype.logKernelProfile = function(t, e, n, r, o, a) {\n        var i = \"number\" == typeof r ? N(r + \"ms\", 9) : r.error, s = N(t, 25), u = e.rank, c = e.size, l = N(e.shape.toString(), 14), h = \"\";\n        for(var f in o){\n            var d = o[f].shape || e.shape, p = d.length;\n            h += f + \": \" + p + \"D \" + (p > 0 ? d : \"\") + \" \";\n        }\n        console.log(\"%c\" + s + \"\t%c\" + i + \"\t%c\" + u + \"D \" + l + \"\t%c\" + c + \"\t%c\" + h + \"\t%c\" + a, \"font-weight:bold\", \"color:red\", \"color:blue\", \"color: orange\", \"color: green\", \"color: steelblue\");\n    }, t;\n}();\nvar lt = 20, ht = 3, ft = 7;\nfunction dt(t, e, n, r) {\n    var o = $(e), a = function(t, e, n, r) {\n        var o = k(e), a = r[r.length - 1], i = new Array(a).fill(0), s = e.length, u = \"complex64\" === n ? mt(t) : t;\n        if (s > 1) for(var c = 0; c < o / a; c++)for(var l = c * a, h = 0; h < a; h++)i[h] = Math.max(i[h], pt(u[l + h], 0, n).length);\n        return i;\n    }(t, e, n, o), i = e.length, s = function t(e, n, r, o, a, i) {\n        void 0 === i && (i = !0);\n        var s = \"complex64\" === r ? 2 : 1, u = n[0], c = n.length;\n        if (0 === c) {\n            return \"complex64\" === r ? [\n                pt(mt(e)[0], 0, r)\n            ] : \"bool\" === r ? [\n                vt(e[0])\n            ] : [\n                e[0].toString()\n            ];\n        }\n        if (1 === c) {\n            if (u > lt) {\n                var l = ht * s, h = Array.from(e.slice(0, l)), f = Array.from(e.slice((u - ht) * s, u * s));\n                return \"complex64\" === r && (h = mt(h), f = mt(f)), [\n                    \"[\" + h.map(function(t, e) {\n                        return pt(t, a[e], r);\n                    }).join(\", \") + \", ..., \" + f.map(function(t, e) {\n                        return pt(t, a[u - ht + e], r);\n                    }).join(\", \") + \"]\"\n                ];\n            }\n            return [\n                \"[\" + (\"complex64\" === r ? mt(e) : Array.from(e)).map(function(t, e) {\n                    return pt(t, a[e], r);\n                }).join(\", \") + \"]\"\n            ];\n        }\n        var d = n.slice(1), p = o.slice(1), v = o[0] * s, m = [];\n        if (u > lt) {\n            for(var g = 0; g < ht; g++){\n                var y = (x = g * v) + v;\n                m.push.apply(m, t(e.slice(x, y), d, r, p, a, !1));\n            }\n            m.push(\"...\");\n            for(g = u - ht; g < u; g++){\n                y = (x = g * v) + v;\n                m.push.apply(m, t(e.slice(x, y), d, r, p, a, g === u - 1));\n            }\n        } else for(g = 0; g < u; g++){\n            var x;\n            y = (x = g * v) + v;\n            m.push.apply(m, t(e.slice(x, y), d, r, p, a, g === u - 1));\n        }\n        var b = 2 === c ? \",\" : \"\";\n        m[0] = \"[\" + m[0] + b;\n        for(g = 1; g < m.length - 1; g++)m[g] = \" \" + m[g] + b;\n        var w = \",\\n\";\n        for(g = 2; g < c; g++)w += \"\\n\";\n        return m[m.length - 1] = \" \" + m[m.length - 1] + \"]\" + (i ? \"\" : w), m;\n    }(t, e, n, o, a), u = [\n        \"Tensor\"\n    ];\n    return r && (u.push(\"  dtype: \" + n), u.push(\"  rank: \" + i), u.push(\"  shape: [\" + e + \"]\"), u.push(\"  values:\")), u.push(s.map(function(t) {\n        return \"    \" + t;\n    }).join(\"\\n\")), u.join(\"\\n\");\n}\nfunction pt(t, e, n) {\n    return N(Array.isArray(t) ? parseFloat(t[0].toFixed(ft)) + \" + \" + parseFloat(t[1].toFixed(ft)) + \"j\" : H(t) ? \"'\" + t + \"'\" : \"bool\" === n ? vt(t) : parseFloat(t.toFixed(ft)).toString(), e);\n}\nfunction vt(t) {\n    return 0 === t ? \"false\" : \"true\";\n}\nfunction mt(t) {\n    for(var e = [], n = 0; n < t.length; n += 2)e.push([\n        t[n],\n        t[n + 1]\n    ]);\n    return e;\n}\nvar gt = function() {\n    function t(t, e, n) {\n        var r = this;\n        if (this.dtype = e, this.shape = t.slice(), this.size = k(t), null != n) {\n            var o = n.length;\n            C(o === this.size, function() {\n                return \"Length of values '\" + o + \"' does not match the size inferred by the shape '\" + r.size + \"'.\";\n            });\n        }\n        if (\"complex64\" === e) throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");\n        this.values = n || P(e, this.size), this.strides = $(t);\n    }\n    return t.prototype.set = function(t) {\n        for(var e = this, n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];\n        0 === n.length && (n = [\n            0\n        ]), C(n.length === this.rank, function() {\n            return \"The number of provided coordinates (\" + n.length + \") must match the rank (\" + e.rank + \")\";\n        });\n        var o = this.locToIndex(n);\n        this.values[o] = t;\n    }, t.prototype.get = function() {\n        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n        0 === t.length && (t = [\n            0\n        ]);\n        for(var n = 0, r = 0, o = t; r < o.length; r++){\n            var a = o[r];\n            if (a < 0 || a >= this.shape[n]) {\n                var i = \"Requested out of range element at \" + t + \".   Buffer shape=\" + this.shape;\n                throw new Error(i);\n            }\n            n++;\n        }\n        for(var s = t[t.length - 1], u = 0; u < t.length - 1; ++u)s += this.strides[u] * t[u];\n        return this.values[s];\n    }, t.prototype.locToIndex = function(t) {\n        if (0 === this.rank) return 0;\n        if (1 === this.rank) return t[0];\n        for(var e = t[t.length - 1], n = 0; n < t.length - 1; ++n)e += this.strides[n] * t[n];\n        return e;\n    }, t.prototype.indexToLoc = function(t) {\n        if (0 === this.rank) return [];\n        if (1 === this.rank) return [\n            t\n        ];\n        for(var e = new Array(this.shape.length), n = 0; n < e.length - 1; ++n)e[n] = Math.floor(t / this.strides[n]), t -= e[n] * this.strides[n];\n        return e[e.length - 1] = t, e;\n    }, Object.defineProperty(t.prototype, \"rank\", {\n        get: function() {\n            return this.shape.length;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.toTensor = function() {\n        return yt().makeTensor(this.values, this.shape, this.dtype);\n    }, t;\n}(), yt = null, xt = null, bt = null;\nvar wt = function() {\n    function t(t, e, n, r) {\n        this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || \"float32\", this.size = k(t), this.strides = $(t), this.dataId = n, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : \"higher\";\n    }\n    return t.prototype.flatten = function() {\n        return this.throwIfDisposed(), this.as1D();\n    }, t.prototype.asScalar = function() {\n        return this.throwIfDisposed(), C(1 === this.size, function() {\n            return \"The array must have only 1 element.\";\n        }), this.reshape([]);\n    }, t.prototype.as1D = function() {\n        return this.throwIfDisposed(), this.reshape([\n            this.size\n        ]);\n    }, t.prototype.as2D = function(t, e) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e\n        ]);\n    }, t.prototype.as3D = function(t, e, n) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n\n        ]);\n    }, t.prototype.as4D = function(t, e, n, r) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n,\n            r\n        ]);\n    }, t.prototype.as5D = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n,\n            r,\n            o\n        ]);\n    }, t.prototype.asType = function(t) {\n        return this.throwIfDisposed(), xt.cast(this, t);\n    }, Object.defineProperty(t.prototype, \"rank\", {\n        get: function() {\n            return this.shape.length;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.buffer = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.data()\n                        ];\n                    case 1:\n                        return t = e.sent(), [\n                            2,\n                            xt.buffer(this.shape, this.dtype, t)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.bufferSync = function() {\n        return xt.buffer(this.shape, this.dtype, this.dataSync());\n    }, t.prototype.array = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.data()\n                        ];\n                    case 1:\n                        return t = e.sent(), [\n                            2,\n                            J(this.shape, t)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.arraySync = function() {\n        return J(this.shape, this.dataSync());\n    }, t.prototype.data = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return this.throwIfDisposed(), t = yt().read(this.dataId), \"string\" !== this.dtype ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            t\n                        ];\n                    case 1:\n                        e = n.sent();\n                        try {\n                            return [\n                                2,\n                                e.map(function(t) {\n                                    return ot(t);\n                                })\n                            ];\n                        } catch (t) {\n                            throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n                        }\n                        n.label = 2;\n                    case 2:\n                        return [\n                            2,\n                            t\n                        ];\n                }\n            });\n        });\n    }, t.prototype.dataSync = function() {\n        this.throwIfDisposed();\n        var t = yt().readSync(this.dataId);\n        if (\"string\" === this.dtype) try {\n            return t.map(function(t) {\n                return ot(t);\n            });\n        } catch (t) {\n            throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n        }\n        return t;\n    }, t.prototype.bytes = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return this.throwIfDisposed(), [\n                            4,\n                            yt().read(this.dataId)\n                        ];\n                    case 1:\n                        return t = e.sent(), \"string\" === this.dtype ? [\n                            2,\n                            t\n                        ] : [\n                            2,\n                            new Uint8Array(t.buffer)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.dispose = function() {\n        this.isDisposed || (yt().disposeTensor(this), this.isDisposedInternal = !0);\n    }, Object.defineProperty(t.prototype, \"isDisposed\", {\n        get: function() {\n            return this.isDisposedInternal;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.throwIfDisposed = function() {\n        if (this.isDisposed) throw new Error(\"Tensor is disposed.\");\n    }, t.prototype.toFloat = function() {\n        return this.asType(\"float32\");\n    }, t.prototype.toInt = function() {\n        return this.asType(\"int32\");\n    }, t.prototype.toBool = function() {\n        return this.asType(\"bool\");\n    }, t.prototype.print = function(t) {\n        return void 0 === t && (t = !1), xt.print(this, t);\n    }, t.prototype.reshape = function(t) {\n        return this.throwIfDisposed(), xt.reshape(this, t);\n    }, t.prototype.reshapeAs = function(t) {\n        return this.throwIfDisposed(), this.reshape(t.shape);\n    }, t.prototype.expandDims = function(t) {\n        return void 0 === t && (t = 0), xt.expandDims(this, t);\n    }, t.prototype.cumsum = function(t, e, n) {\n        return void 0 === t && (t = 0), void 0 === e && (e = !1), void 0 === n && (n = !1), xt.cumsum(this, t, e, n);\n    }, t.prototype.squeeze = function(t) {\n        return this.throwIfDisposed(), xt.squeeze(this, t);\n    }, t.prototype.clone = function() {\n        return this.throwIfDisposed(), xt.clone(this);\n    }, t.prototype.oneHot = function(t, e, n) {\n        return this.throwIfDisposed(), xt.oneHot(this, t, e, n);\n    }, t.prototype.toString = function(t) {\n        return void 0 === t && (t = !1), dt(this.dataSync(), this.shape, this.dtype, t);\n    }, t.prototype.tile = function(t) {\n        return this.throwIfDisposed(), xt.tile(this, t);\n    }, t.prototype.gather = function(t, e) {\n        return void 0 === e && (e = 0), this.throwIfDisposed(), xt.gather(this, t, e);\n    }, t.prototype.matMul = function(t, e, n) {\n        return void 0 === e && (e = !1), void 0 === n && (n = !1), this.throwIfDisposed(), xt.matMul(this, t, e, n);\n    }, t.prototype.dot = function(t) {\n        return this.throwIfDisposed(), xt.dot(this, t);\n    }, t.prototype.norm = function(t, e, n) {\n        return void 0 === t && (t = \"euclidean\"), void 0 === e && (e = null), void 0 === n && (n = !1), this.throwIfDisposed(), xt.norm(this, t, e, n);\n    }, t.prototype.slice = function(t, e) {\n        return this.throwIfDisposed(), xt.slice(this, t, e);\n    }, t.prototype.reverse = function(t) {\n        return this.throwIfDisposed(), xt.reverse(this, t);\n    }, t.prototype.concat = function(e, n) {\n        return void 0 === n && (n = 0), this.throwIfDisposed(), e instanceof t && (e = [\n            e\n        ]), xt.concat([\n            this\n        ].concat(e), n);\n    }, t.prototype.split = function(t, e) {\n        return void 0 === e && (e = 0), this.throwIfDisposed(), xt.split(this, t, e);\n    }, t.prototype.stack = function(t, e) {\n        return void 0 === e && (e = 0), xt.stack([\n            this,\n            t\n        ], e);\n    }, t.prototype.unstack = function(t) {\n        return void 0 === t && (t = 0), xt.unstack(this, t);\n    }, t.prototype.pad = function(t, e) {\n        return void 0 === e && (e = 0), xt.pad(this, t, e);\n    }, t.prototype.batchNormalization = function(t, e, n, r, o) {\n        return void 0 === n && (n = .001), bt(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\"), this.batchNorm(t, e, o, r, n);\n    }, t.prototype.batchNorm = function(t, e, n, r, o) {\n        return void 0 === o && (o = .001), this.throwIfDisposed(), xt.batchNorm(this, t, e, n, r, o);\n    }, t.prototype.all = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.all(this, t, e);\n    }, t.prototype.any = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.any(this, t, e);\n    }, t.prototype.logSumExp = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.logSumExp(this, t, e);\n    }, t.prototype.sum = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.sum(this, t, e);\n    }, t.prototype.prod = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.prod(this, t, e);\n    }, t.prototype.mean = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.mean(this, t, e);\n    }, t.prototype.min = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.min(this, t, e);\n    }, t.prototype.max = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.max(this, t, e);\n    }, t.prototype.argMin = function(t) {\n        return void 0 === t && (t = null), this.throwIfDisposed(), xt.argMin(this, t);\n    }, t.prototype.argMax = function(t) {\n        return void 0 === t && (t = null), this.throwIfDisposed(), xt.argMax(this, t);\n    }, t.prototype.cast = function(t) {\n        return this.throwIfDisposed(), xt.cast(this, t);\n    }, t.prototype.add = function(t) {\n        return this.throwIfDisposed(), xt.add(this, t);\n    }, t.prototype.addStrict = function(t) {\n        return this.throwIfDisposed(), xt.addStrict(this, t);\n    }, t.prototype.atan2 = function(t) {\n        return this.throwIfDisposed(), xt.atan2(this, t);\n    }, t.prototype.sub = function(t) {\n        return this.throwIfDisposed(), xt.sub(this, t);\n    }, t.prototype.subStrict = function(t) {\n        return this.throwIfDisposed(), xt.subStrict(this, t);\n    }, t.prototype.pow = function(t) {\n        return this.throwIfDisposed(), xt.pow(this, t);\n    }, t.prototype.powStrict = function(t) {\n        return this.throwIfDisposed(), xt.powStrict(this, t);\n    }, t.prototype.mul = function(t) {\n        return this.throwIfDisposed(), xt.mul(this, t);\n    }, t.prototype.mulStrict = function(t) {\n        return this.throwIfDisposed(), xt.mulStrict(this, t);\n    }, t.prototype.div = function(t) {\n        return this.throwIfDisposed(), xt.div(this, t);\n    }, t.prototype.divNoNan = function(t) {\n        return this.throwIfDisposed(), xt.divNoNan(this, t);\n    }, t.prototype.floorDiv = function(t) {\n        return this.throwIfDisposed(), xt.floorDiv(this, t);\n    }, t.prototype.divStrict = function(t) {\n        return this.throwIfDisposed(), xt.divStrict(this, t);\n    }, t.prototype.minimum = function(t) {\n        return this.throwIfDisposed(), xt.minimum(this, t);\n    }, t.prototype.minimumStrict = function(t) {\n        return this.throwIfDisposed(), xt.minimumStrict(this, t);\n    }, t.prototype.maximum = function(t) {\n        return this.throwIfDisposed(), xt.maximum(this, t);\n    }, t.prototype.maximumStrict = function(t) {\n        return this.throwIfDisposed(), xt.maximumStrict(this, t);\n    }, t.prototype.mod = function(t) {\n        return this.throwIfDisposed(), xt.mod(this, t);\n    }, t.prototype.modStrict = function(t) {\n        return this.throwIfDisposed(), xt.modStrict(this, t);\n    }, t.prototype.squaredDifferenceStrict = function(t) {\n        return this.throwIfDisposed(), xt.squaredDifferenceStrict(this, t);\n    }, t.prototype.transpose = function(t) {\n        return this.throwIfDisposed(), xt.transpose(this, t);\n    }, t.prototype.notEqual = function(t) {\n        return this.throwIfDisposed(), xt.notEqual(this, t);\n    }, t.prototype.notEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.notEqualStrict(this, t);\n    }, t.prototype.less = function(t) {\n        return this.throwIfDisposed(), xt.less(this, t);\n    }, t.prototype.lessStrict = function(t) {\n        return this.throwIfDisposed(), xt.lessStrict(this, t);\n    }, t.prototype.equal = function(t) {\n        return this.throwIfDisposed(), xt.equal(this, t);\n    }, t.prototype.equalStrict = function(t) {\n        return this.throwIfDisposed(), xt.equalStrict(this, t);\n    }, t.prototype.lessEqual = function(t) {\n        return this.throwIfDisposed(), xt.lessEqual(this, t);\n    }, t.prototype.lessEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.lessEqualStrict(this, t);\n    }, t.prototype.greater = function(t) {\n        return this.throwIfDisposed(), xt.greater(this, t);\n    }, t.prototype.greaterStrict = function(t) {\n        return this.throwIfDisposed(), xt.greaterStrict(this, t);\n    }, t.prototype.greaterEqual = function(t) {\n        return this.throwIfDisposed(), xt.greaterEqual(this, t);\n    }, t.prototype.greaterEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.greaterEqualStrict(this, t);\n    }, t.prototype.logicalAnd = function(t) {\n        return this.throwIfDisposed(), xt.logicalAnd(this, t);\n    }, t.prototype.logicalOr = function(t) {\n        return this.throwIfDisposed(), xt.logicalOr(this, t);\n    }, t.prototype.logicalNot = function() {\n        return this.throwIfDisposed(), xt.logicalNot(this);\n    }, t.prototype.logicalXor = function(t) {\n        return this.throwIfDisposed(), xt.logicalXor(this, t);\n    }, t.prototype.where = function(t, e) {\n        return this.throwIfDisposed(), xt.where(t, this, e);\n    }, t.prototype.neg = function() {\n        return this.throwIfDisposed(), xt.neg(this);\n    }, t.prototype.ceil = function() {\n        return this.throwIfDisposed(), xt.ceil(this);\n    }, t.prototype.floor = function() {\n        return this.throwIfDisposed(), xt.floor(this);\n    }, t.prototype.sign = function() {\n        return this.throwIfDisposed(), xt.sign(this);\n    }, t.prototype.isNaN = function() {\n        return this.throwIfDisposed(), xt.isNaN(this);\n    }, t.prototype.isInf = function() {\n        return this.throwIfDisposed(), xt.isInf(this);\n    }, t.prototype.isFinite = function() {\n        return this.throwIfDisposed(), xt.isFinite(this);\n    }, t.prototype.exp = function() {\n        return this.throwIfDisposed(), xt.exp(this);\n    }, t.prototype.expm1 = function() {\n        return this.throwIfDisposed(), xt.expm1(this);\n    }, t.prototype.log = function() {\n        return this.throwIfDisposed(), xt.log(this);\n    }, t.prototype.log1p = function() {\n        return this.throwIfDisposed(), xt.log1p(this);\n    }, t.prototype.sqrt = function() {\n        return this.throwIfDisposed(), xt.sqrt(this);\n    }, t.prototype.rsqrt = function() {\n        return this.throwIfDisposed(), xt.rsqrt(this);\n    }, t.prototype.square = function() {\n        return this.throwIfDisposed(), xt.square(this);\n    }, t.prototype.reciprocal = function() {\n        return this.throwIfDisposed(), xt.reciprocal(this);\n    }, t.prototype.abs = function() {\n        return this.throwIfDisposed(), xt.abs(this);\n    }, t.prototype.clipByValue = function(t, e) {\n        return this.throwIfDisposed(), xt.clipByValue(this, t, e);\n    }, t.prototype.relu = function() {\n        return this.throwIfDisposed(), xt.relu(this);\n    }, t.prototype.relu6 = function() {\n        return this.throwIfDisposed(), xt.relu6(this);\n    }, t.prototype.elu = function() {\n        return this.throwIfDisposed(), xt.elu(this);\n    }, t.prototype.selu = function() {\n        return this.throwIfDisposed(), xt.selu(this);\n    }, t.prototype.leakyRelu = function(t) {\n        return void 0 === t && (t = .2), this.throwIfDisposed(), xt.leakyRelu(this, t);\n    }, t.prototype.prelu = function(t) {\n        return this.throwIfDisposed(), xt.prelu(this, t);\n    }, t.prototype.sigmoid = function() {\n        return this.throwIfDisposed(), xt.sigmoid(this);\n    }, t.prototype.logSigmoid = function() {\n        return this.throwIfDisposed(), xt.logSigmoid(this);\n    }, t.prototype.softplus = function() {\n        return this.throwIfDisposed(), xt.softplus(this);\n    }, t.prototype.zerosLike = function() {\n        return this.throwIfDisposed(), xt.zerosLike(this);\n    }, t.prototype.onesLike = function() {\n        return this.throwIfDisposed(), xt.onesLike(this);\n    }, t.prototype.sin = function() {\n        return this.throwIfDisposed(), xt.sin(this);\n    }, t.prototype.cos = function() {\n        return this.throwIfDisposed(), xt.cos(this);\n    }, t.prototype.tan = function() {\n        return this.throwIfDisposed(), xt.tan(this);\n    }, t.prototype.asin = function() {\n        return this.throwIfDisposed(), xt.asin(this);\n    }, t.prototype.acos = function() {\n        return this.throwIfDisposed(), xt.acos(this);\n    }, t.prototype.atan = function() {\n        return this.throwIfDisposed(), xt.atan(this);\n    }, t.prototype.sinh = function() {\n        return this.throwIfDisposed(), xt.sinh(this);\n    }, t.prototype.cosh = function() {\n        return this.throwIfDisposed(), xt.cosh(this);\n    }, t.prototype.tanh = function() {\n        return this.throwIfDisposed(), xt.tanh(this);\n    }, t.prototype.asinh = function() {\n        return this.throwIfDisposed(), xt.asinh(this);\n    }, t.prototype.acosh = function() {\n        return this.throwIfDisposed(), xt.acosh(this);\n    }, t.prototype.atanh = function() {\n        return this.throwIfDisposed(), xt.atanh(this);\n    }, t.prototype.erf = function() {\n        return this.throwIfDisposed(), xt.erf(this);\n    }, t.prototype.round = function() {\n        return this.throwIfDisposed(), xt.round(this);\n    }, t.prototype.step = function(t) {\n        return void 0 === t && (t = 0), this.throwIfDisposed(), xt.step(this, t);\n    }, t.prototype.softmax = function(t) {\n        return void 0 === t && (t = -1), this.throwIfDisposed(), xt.softmax(this, t);\n    }, t.prototype.logSoftmax = function(t) {\n        return void 0 === t && (t = -1), this.throwIfDisposed(), xt.logSoftmax(this, t);\n    }, t.prototype.resizeBilinear = function(t, e) {\n        return void 0 === e && (e = !1), this.throwIfDisposed(), xt.image.resizeBilinear(this, t, e);\n    }, t.prototype.resizeNearestNeighbor = function(t, e) {\n        return void 0 === e && (e = !1), this.throwIfDisposed(), xt.image.resizeNearestNeighbor(this, t, e);\n    }, t.prototype.conv1d = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NWC\"), void 0 === o && (o = 1), this.throwIfDisposed(), xt.conv1d(this, t, e, n, r, o, a);\n    }, t.prototype.conv2d = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NHWC\"), void 0 === o && (o = [\n            1,\n            1\n        ]), this.throwIfDisposed(), xt.conv2d(this, t, e, n, r, o, a);\n    }, t.prototype.conv2dTranspose = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), xt.conv2dTranspose(this, t, e, n, r, o);\n    }, t.prototype.depthwiseConv2D = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NHWC\"), void 0 === o && (o = [\n            1,\n            1\n        ]), this.throwIfDisposed(), xt.depthwiseConv2d(this, t, e, n, r, o, a);\n    }, t.prototype.separableConv2d = function(t, e, n, r, o, a) {\n        return void 0 === o && (o = [\n            1,\n            1\n        ]), void 0 === a && (a = \"NHWC\"), this.throwIfDisposed(), xt.separableConv2d(this, t, e, n, r, o, a);\n    }, t.prototype.avgPool = function(t, e, n, r) {\n        return this.throwIfDisposed(), xt.avgPool(this, t, e, n, r);\n    }, t.prototype.maxPool = function(t, e, n, r) {\n        return this.throwIfDisposed(), xt.maxPool(this, t, e, n, r);\n    }, t.prototype.localResponseNormalization = function(t, e, n, r) {\n        return void 0 === t && (t = 5), void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === r && (r = .5), xt.localResponseNormalization(this, t, e, n, r);\n    }, t.prototype.pool = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), xt.pool(this, t, e, n, r, o);\n    }, t.prototype.variable = function(t, e, n) {\n        return void 0 === t && (t = !0), this.throwIfDisposed(), yt().makeVariable(this, t, e, n);\n    }, t.prototype.unsortedSegmentSum = function(t, e) {\n        return this.throwIfDisposed(), xt.unsortedSegmentSum(this, t, e);\n    }, t.prototype.batchToSpaceND = function(t, e) {\n        return this.throwIfDisposed(), xt.batchToSpaceND(this, t, e);\n    }, t.prototype.spaceToBatchND = function(t, e) {\n        return this.throwIfDisposed(), xt.spaceToBatchND(this, t, e);\n    }, t.prototype.topk = function(t, e) {\n        return void 0 === t && (t = 1), void 0 === e && (e = !0), this.throwIfDisposed(), xt.topk(this, t, e);\n    }, t.prototype.stridedSlice = function(t, e, n, r, o, a, i, s) {\n        return void 0 === r && (r = 0), void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), xt.stridedSlice(this, t, e, n, r, o, a, i, s);\n    }, t.prototype.depthToSpace = function(t, e) {\n        return this.throwIfDisposed(), xt.depthToSpace(this, t, e);\n    }, t.prototype.fft = function() {\n        return this.throwIfDisposed(), xt.spectral.fft(this);\n    }, t.prototype.ifft = function() {\n        return this.throwIfDisposed(), xt.spectral.ifft(this);\n    }, t.prototype.rfft = function() {\n        return this.throwIfDisposed(), xt.spectral.rfft(this);\n    }, t.prototype.irfft = function() {\n        return this.throwIfDisposed(), xt.spectral.irfft(this);\n    }, t;\n}();\nObject.defineProperty(wt, Symbol.hasInstance, {\n    value: function(t) {\n        return !!t && null != t.dataId && null != t.shape && null != t.dtype;\n    }\n});\nvar Ct, Et, Rt, It, kt, St = function(t) {\n    function n(e, n, r, o) {\n        var a = t.call(this, e.shape, e.dtype, e.dataId, o) || this;\n        return a.trainable = n, a.name = r, a;\n    }\n    return e(n, t), n.prototype.assign = function(t) {\n        if (t.dtype !== this.dtype) throw new Error(\"dtype of the new value (\" + t.dtype + \") and previous value (\" + this.dtype + \") must match\");\n        if (!S(t.shape, this.shape)) throw new Error(\"shape of the new value (\" + t.shape + \") and previous value (\" + this.shape + \") must match\");\n        yt().disposeTensor(this), this.dataId = t.dataId, yt().incRef(this, null);\n    }, n.prototype.dispose = function() {\n        yt().disposeVariable(this), this.isDisposedInternal = !0;\n    }, n;\n}(wt);\nObject.defineProperty(St, Symbol.hasInstance, {\n    value: function(t) {\n        return t instanceof wt && null != t.assign && t.assign instanceof Function;\n    }\n}), function(t) {\n    t.R0 = \"R0\", t.R1 = \"R1\", t.R2 = \"R2\", t.R3 = \"R3\", t.R4 = \"R4\", t.R5 = \"R5\", t.R6 = \"R6\";\n}(Ct || (Ct = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"int32\", t.bool = \"int32\", t.complex64 = \"complex64\";\n}(Et || (Et = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"int32\", t.bool = \"bool\", t.complex64 = \"complex64\";\n}(Rt || (Rt = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"float32\", t.bool = \"float32\", t.complex64 = \"complex64\";\n}(It || (It = {})), function(t) {\n    t.float32 = \"complex64\", t.int32 = \"complex64\", t.bool = \"complex64\", t.complex64 = \"complex64\";\n}(kt || (kt = {}));\nvar At = {\n    float32: It,\n    int32: Et,\n    bool: Rt,\n    complex64: kt\n};\nfunction Dt(t, e) {\n    if (\"string\" === t || \"string\" === e) {\n        if (\"string\" === t && \"string\" === e) return \"string\";\n        throw new Error(\"Can not upcast \" + t + \" with \" + e);\n    }\n    return At[t][e];\n}\nfunction Tt(t) {\n    return Dt(t, \"int32\");\n}\nfunction Nt(t, e) {\n    if (t.dtype === e.dtype) return [\n        t,\n        e\n    ];\n    var n = Dt(t.dtype, e.dtype);\n    return [\n        t.cast(n),\n        e.cast(n)\n    ];\n}\nfunction Ft(t, e) {\n    C(t.dtype === e.dtype, function() {\n        return \"The dtypes of the first(\" + t.dtype + \") and second(\" + e.dtype + \") input must match\";\n    });\n}\nfunction _t(t) {\n    var e = [];\n    return function t(e, n, r) {\n        if (null == e) return;\n        if (e instanceof wt) return void n.push(e);\n        if (o = e, !Array.isArray(o) && \"object\" != typeof o) return;\n        var o;\n        var a = e;\n        for(var i in a){\n            var s = a[i];\n            r.has(s) || (r.add(s), t(s, n, r));\n        }\n    }(t, e, new Set), e;\n}\nvar Ot, Mt = Object.freeze({\n    makeTypesMatch: Nt,\n    assertTypesMatch: Ft,\n    isTensorInList: function(t, e) {\n        return e.some(function(e) {\n            return e.id === t.id;\n        });\n    },\n    getTensorsInContainer: _t\n}), Bt = function() {\n    function t() {\n        this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = new WeakMap, this.profiling = !1, this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null\n        };\n    }\n    return t.prototype.dispose = function() {\n        for(var t in this.registeredVariables)this.registeredVariables[t].dispose();\n    }, t;\n}(), Pt = function() {\n    function t(t) {\n        this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Bt;\n    }\n    return t.prototype.ready = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (null != this.pendingBackendInit) return [\n                            2,\n                            this.pendingBackendInit.then(function() {})\n                        ];\n                        if (null != this.backendInstance) return [\n                            2\n                        ];\n                        t = this.getSortedBackends(), e = 0, r.label = 1;\n                    case 1:\n                        return e < t.length ? (n = t[e], [\n                            4,\n                            this.initializeBackend(n).success\n                        ]) : [\n                            3,\n                            5\n                        ];\n                    case 2:\n                        return r.sent() ? [\n                            4,\n                            this.setBackend(n)\n                        ] : [\n                            3,\n                            4\n                        ];\n                    case 3:\n                        return r.sent(), [\n                            2\n                        ];\n                    case 4:\n                        return e++, [\n                            3,\n                            1\n                        ];\n                    case 5:\n                        throw new Error(\"Could not initialize any backends, all backend initializations failed.\");\n                }\n            });\n        });\n    }, Object.defineProperty(t.prototype, \"backend\", {\n        get: function() {\n            if (null != this.pendingBackendInit) throw new Error(\"Backend '\" + this.backendName + \"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");\n            if (null == this.backendInstance) {\n                var t = this.initializeBackendsAndReturnBest(), e = t.name;\n                if (t.asyncInit) throw new Error(\"The highest priority backend '\" + e + \"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");\n                this.setBackend(e);\n            }\n            return this.backendInstance;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.backendNames = function() {\n        return Object.keys(this.registryFactory);\n    }, t.prototype.findBackend = function(t) {\n        if (!(t in this.registry)) {\n            if (!(t in this.registryFactory)) return null;\n            if (this.initializeBackend(t).asyncInit) return null;\n        }\n        return this.registry[t];\n    }, t.prototype.findBackendFactory = function(t) {\n        return t in this.registryFactory ? this.registryFactory[t].factory : null;\n    }, t.prototype.registerBackend = function(t, e, n) {\n        return void 0 === n && (n = 1), t in this.registryFactory ? (console.warn(t + \" backend was already registered. Reusing existing backend factory.\"), !1) : (this.registryFactory[t] = {\n            factory: e,\n            priority: n\n        }, !0);\n    }, t.prototype.setBackend = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (null == this.registryFactory[t]) throw new Error(\"Backend name '\" + t + \"' not found in registry\");\n                        return this.backendName = t, null != this.registry[t] ? [\n                            3,\n                            4\n                        ] : (this.backendInstance = null, e = this.initializeBackend(t), n = e.success, e.asyncInit ? [\n                            4,\n                            n\n                        ] : [\n                            3,\n                            2\n                        ]);\n                    case 1:\n                        return o = r.sent(), [\n                            3,\n                            3\n                        ];\n                    case 2:\n                        o = n, r.label = 3;\n                    case 3:\n                        if (!o) return [\n                            2,\n                            !1\n                        ];\n                        r.label = 4;\n                    case 4:\n                        return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new ut(this.backendInstance), [\n                            2,\n                            !0\n                        ];\n                }\n            });\n        });\n    }, t.prototype.setupRegisteredKernels = function() {\n        var t = this;\n        f(this.backendName).forEach(function(e) {\n            null != e.setupFunc && e.setupFunc(t.backendInstance);\n        });\n    }, t.prototype.disposeRegisteredKernels = function(t) {\n        var e = this;\n        f(t).forEach(function(n) {\n            null != n.disposeFunc && n.disposeFunc(e.registry[t]);\n        });\n    }, t.prototype.initializeBackend = function(t) {\n        var e = this, n = this.registryFactory[t];\n        if (null == n) throw new Error(\"Cannot initialize backend \" + t + \", no registration found.\");\n        try {\n            var r = n.factory();\n            if (Promise.resolve(r) === r) {\n                var o = ++this.pendingBackendInitId, a = r.then(function(n) {\n                    return !(o < e.pendingBackendInitId) && (e.registry[t] = n, e.pendingBackendInit = null, !0);\n                }).catch(function(n) {\n                    return !(o < e.pendingBackendInitId) && (e.pendingBackendInit = null, console.warn(\"Initialization of backend \" + t + \" failed\"), console.warn(n.stack || n.message), !1);\n                });\n                return this.pendingBackendInit = a, {\n                    success: a,\n                    asyncInit: !0\n                };\n            }\n            return this.registry[t] = r, {\n                success: !0,\n                asyncInit: !1\n            };\n        } catch (e) {\n            return console.warn(\"Initialization of backend \" + t + \" failed\"), console.warn(e.stack || e.message), {\n                success: !1,\n                asyncInit: !1\n            };\n        }\n    }, t.prototype.removeBackend = function(t) {\n        if (!(t in this.registryFactory)) throw new Error(t + \" backend not found in registry\");\n        this.backendName === t && null != this.pendingBackendInit && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);\n    }, t.prototype.getSortedBackends = function() {\n        var t = this;\n        if (0 === Object.keys(this.registryFactory).length) throw new Error(\"No backend found in registry.\");\n        return Object.keys(this.registryFactory).sort(function(e, n) {\n            return t.registryFactory[n].priority - t.registryFactory[e].priority;\n        });\n    }, t.prototype.initializeBackendsAndReturnBest = function() {\n        for(var t = this.getSortedBackends(), e = 0; e < t.length; e++){\n            var n = t[e], r = this.initializeBackend(n), o = r.success, a = r.asyncInit;\n            if (a || o) return {\n                name: n,\n                asyncInit: a\n            };\n        }\n        throw new Error(\"Could not initialize any backends, all backend initializations failed.\");\n    }, t.prototype.moveData = function(t, e) {\n        var n = this.state.tensorInfo.get(e), r = n.backend, o = this.readSync(e);\n        r.disposeData(e), n.backend = t, t.move(e, o, n.shape, n.dtype), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }, t.prototype.tidy = function(t, e) {\n        var n, r = this, o = null;\n        if (null == e) {\n            if (\"function\" != typeof t) throw new Error(\"Please provide a function to tidy()\");\n            e = t;\n        } else {\n            if (\"string\" != typeof t && !(t instanceof String)) throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");\n            if (\"function\" != typeof e) throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");\n            o = t;\n        }\n        return this.scopedRun(function() {\n            return r.startScope(o);\n        }, function() {\n            return r.endScope(n);\n        }, function() {\n            return (n = e()) instanceof Promise && console.error(\"Cannot return a Promise inside of tidy.\"), n;\n        });\n    }, t.prototype.scopedRun = function(t, e, n) {\n        t();\n        try {\n            var r = n();\n            return e(), r;\n        } catch (t) {\n            throw e(), t;\n        }\n    }, t.prototype.nextTensorId = function() {\n        return t.nextTensorId++;\n    }, t.prototype.nextVariableId = function() {\n        return t.nextVariableId++;\n    }, t.prototype.clone = function(t) {\n        var e = this.makeTensorFromDataId(t.dataId, t.shape, t.dtype), n = {\n            x: t\n        };\n        return this.addTapeNode(this.state.activeScope.name, n, [\n            e\n        ], function(t) {\n            return {\n                x: function() {\n                    return t.toFloat();\n                }\n            };\n        }, []), e;\n    }, t.prototype.runKernel = function(t, e, n, r, o) {\n        return this.runKernelFunc(null, e, null, t, n, r, o);\n    }, t.prototype.shouldCheckForMemLeaks = function() {\n        return this.ENV.getBool(\"IS_TEST\");\n    }, t.prototype.checkKernelForMemLeak = function(t, e, n) {\n        var r = this.backend.numDataIds(), o = 0;\n        n.forEach(function(t) {\n            o += \"complex64\" === t.dtype ? 3 : 1;\n        });\n        var a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = r - e - o - a;\n        if (i > 0) throw new Error(\"Backend '\" + this.backendName + \"' has an internal memory leak (\" + i + \" data ids) after running '\" + t + \"'\");\n    }, t.prototype.runKernelFunc = function(t, e, n, r, o, a, i) {\n        var s, u = this;\n        void 0 === a && (a = []), void 0 === i && (i = []);\n        var c = [], h = this.isTapeOn();\n        null == r && (r = null != this.state.activeScope ? this.state.activeScope.name : \"\");\n        var f, d = function(t) {\n            h && (c = t.map(function(t) {\n                return u.keep(u.clone(t));\n            }));\n        }, p = this.state.numBytes, v = this.state.numTensors;\n        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);\n        var m, g = l(r, this.backendName);\n        return f = null != g ? function() {\n            var t = u.backend.numDataIds();\n            m = g.kernelFunc({\n                inputs: e,\n                attrs: o,\n                backend: u.backend\n            });\n            var n = Array.isArray(m) ? m : [\n                m\n            ];\n            u.shouldCheckForMemLeaks() && u.checkKernelForMemLeak(r, t, n);\n            var s = n.map(function(t) {\n                var e = t.dataId, n = t.shape, r = t.dtype;\n                return u.makeTensorFromDataId(e, n, r);\n            }), c = s.filter(function(t, e) {\n                return i[e];\n            });\n            return d((a || []).slice().concat(c)), s;\n        } : function() {\n            var e = u.backend.numDataIds();\n            m = u.tidy(function() {\n                return t(u.backend, d);\n            });\n            var n = Array.isArray(m) ? m : [\n                m\n            ];\n            return u.shouldCheckForMemLeaks() && u.checkKernelForMemLeak(r, e, n), n;\n        }, this.scopedRun(function() {\n            return u.state.kernelDepth++;\n        }, function() {\n            return u.state.kernelDepth--;\n        }, function() {\n            s = u.ENV.getBool(\"DEBUG\") ? u.profiler.profileKernel(r, e, function() {\n                return f();\n            }) : f();\n        }), h && this.addTapeNode(r, e, s, n, c), this.state.profiling && this.state.activeProfile.kernels.push({\n            name: r,\n            bytesAdded: this.state.numBytes - p,\n            totalBytesSnapshot: this.state.numBytes,\n            tensorsAdded: this.state.numTensors - v,\n            totalTensorsSnapshot: this.state.numTensors,\n            inputShapes: Object.keys(e).map(function(t) {\n                return e[t].shape;\n            }),\n            outputShapes: s.map(function(t) {\n                return t.shape;\n            })\n        }), Array.isArray(m) ? s : s[0];\n    }, t.prototype.makeTensor = function(t, e, n, r) {\n        if (null == t) throw new Error(\"Values passed to engine.makeTensor() are null\");\n        n = n || \"float32\", r = r || this.backend;\n        var o = t;\n        \"string\" === n && H(t[0]) && (o = t.map(function(t) {\n            return rt(t);\n        }));\n        var a = r.write(o, e, n), i = new wt(e, n, a, this.nextTensorId());\n        if (this.incRef(i, r), \"string\" === n) {\n            var s = this.state.tensorInfo.get(a), u = G(o);\n            this.state.numBytes += u - s.bytes, s.bytes = u;\n        }\n        return i;\n    }, t.prototype.makeTensorFromDataId = function(t, e, n, r) {\n        var o = new wt(e, n = n || \"float32\", t, this.nextTensorId());\n        return this.incRef(o, r), o;\n    }, t.prototype.makeVariable = function(t, e, n, r) {\n        void 0 === e && (e = !0), n = n || this.nextVariableId().toString(), null != r && r !== t.dtype && (t = t.asType(r));\n        var o = new St(t, e, n, this.nextTensorId());\n        if (null != this.state.registeredVariables[o.name]) throw new Error(\"Variable with name \" + o.name + \" was already registered\");\n        return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;\n    }, t.prototype.incRef = function(t, e) {\n        var n = this.state.tensorInfo.has(t.dataId) ? this.state.tensorInfo.get(t.dataId).refCount : 0;\n        if (this.state.numTensors++, \"string\" === t.dtype && this.state.numStringTensors++, 0 === n) {\n            this.state.numDataBuffers++;\n            var r = 0;\n            \"complex64\" !== t.dtype && \"string\" !== t.dtype && (r = t.size * z(t.dtype)), this.state.tensorInfo.set(t.dataId, {\n                backend: e || this.backend,\n                dtype: t.dtype,\n                shape: t.shape,\n                bytes: r,\n                refCount: 0\n            }), this.state.numBytes += r;\n        }\n        this.state.tensorInfo.get(t.dataId).refCount++, t instanceof St || this.track(t);\n    }, t.prototype.disposeTensor = function(t) {\n        if (this.state.tensorInfo.has(t.dataId)) {\n            this.state.numTensors--, \"string\" === t.dtype && this.state.numStringTensors--;\n            var e = this.state.tensorInfo.get(t.dataId);\n            e.refCount <= 1 ? (\"complex64\" !== t.dtype && (this.state.numBytes -= e.bytes), this.state.numDataBuffers--, e.backend.disposeData(t.dataId), this.state.tensorInfo.delete(t.dataId)) : this.state.tensorInfo.get(t.dataId).refCount--;\n        }\n    }, t.prototype.disposeVariables = function() {\n        for(var t in this.state.registeredVariables){\n            var e = this.state.registeredVariables[t];\n            this.disposeVariable(e);\n        }\n    }, t.prototype.disposeVariable = function(t) {\n        this.disposeTensor(t), null != this.state.registeredVariables[t.name] && delete this.state.registeredVariables[t.name];\n    }, t.prototype.memory = function() {\n        var t = this.backend.memory();\n        return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, null == t.reasons && (t.reasons = []), t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")), t;\n    }, t.prototype.profile = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                return this.state.profiling = !0, e = this.state.numBytes, n = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t) {\n                    return t.totalBytesSnapshot;\n                })), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - n, [\n                    2,\n                    this.state.activeProfile\n                ];\n            });\n        });\n    }, t.prototype.isTapeOn = function() {\n        return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;\n    }, t.prototype.addTapeNode = function(t, e, n, r, o) {\n        var a = this, i = {\n            id: this.state.nextTapeNodeId++,\n            kernelName: t,\n            inputs: e,\n            outputs: n,\n            saved: o\n        }, s = h(t);\n        null != s && (r = s.gradFunc), null != r && (i.gradient = function(t) {\n            return t = t.map(function(t, e) {\n                if (null == t) {\n                    var r = n[e], o = tt(r.size, r.dtype);\n                    return a.makeTensor(o, r.shape, r.dtype);\n                }\n                return t;\n            }), r(t.length > 1 ? t : t[0], o);\n        }), this.state.activeTape.push(i);\n    }, t.prototype.keep = function(t) {\n        return t.kept = !0, t;\n    }, t.prototype.startTape = function() {\n        0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;\n    }, t.prototype.endTape = function() {\n        this.state.gradientDepth--;\n    }, t.prototype.startScope = function(t) {\n        var e = {\n            track: [],\n            name: \"unnamed scope\",\n            id: this.state.nextScopeId++\n        };\n        t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;\n    }, t.prototype.endScope = function(t) {\n        for(var e = this, n = _t(t), r = new Set(n.map(function(t) {\n            return t.id;\n        })), o = 0; o < this.state.activeScope.track.length; o++){\n            var a = this.state.activeScope.track[o];\n            a.kept || r.has(a.id) || a.dispose();\n        }\n        var i = this.state.scopeStack.pop();\n        this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n.forEach(function(t) {\n            t.kept || t.scopeId !== i.id || e.track(t);\n        });\n    }, t.prototype.gradients = function(t, e, n, r) {\n        var o = this;\n        if (void 0 === r && (r = !1), C(e.length > 0, function() {\n            return \"gradients() received an empty list of xs.\";\n        }), null != n && \"float32\" !== n.dtype) throw new Error(\"dy must have 'float32' dtype, but has '\" + n.dtype + \"'\");\n        var a = this.scopedRun(function() {\n            return o.startTape();\n        }, function() {\n            return o.endTape();\n        }, function() {\n            return o.tidy(\"forward\", t);\n        });\n        C(a instanceof wt, function() {\n            return \"The result y returned by f() must be a tensor.\";\n        });\n        var i = function(t, e, n) {\n            for(var r = {}, o = {}, a = 0; a < e.length; a++)r[e[a].id] = !0;\n            for(a = 0; a < t.length; a++){\n                var i = (p = t[a]).inputs;\n                for(var s in i){\n                    for(var u = i[s], c = !1, l = 0; l < e.length; l++)if (r[u.id]) {\n                        p.outputs.forEach(function(t) {\n                            return r[t.id] = !0;\n                        }), c = !0, o[p.id] = !0;\n                        break;\n                    }\n                    if (c) break;\n                }\n            }\n            var h = {};\n            h[n.id] = !0;\n            var f = {};\n            for(a = t.length - 1; a >= 0; a--)for(i = (p = t[a]).inputs, l = 0; l < p.outputs.length; l++)if (h[p.outputs[l].id]) {\n                for(var s in i)h[i[s].id] = !0, f[p.id] = !0;\n                break;\n            }\n            var d = [];\n            for(a = 0; a < t.length; a++){\n                var p;\n                if (o[(p = t[a]).id] && f[p.id]) {\n                    var v = {};\n                    for(var s in p.inputs){\n                        var m = p.inputs[s];\n                        r[m.id] && (v[s] = m);\n                    }\n                    var g = Object.assign({}, p);\n                    g.inputs = v, g.outputs = p.outputs, d.push(g);\n                }\n            }\n            return d;\n        }(this.state.activeTape, e, a);\n        if (!r && 0 === i.length && e.length > 0) throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");\n        return this.tidy(\"backward\", function() {\n            var t, r, s = {};\n            s[a.id] = null == n ? (t = a.shape, r = Z(k(t), \"float32\"), Lt.makeTensor(r, t, \"float32\")) : n, function(t, e, n) {\n                for(var r = function(r) {\n                    var o = e[r], a = [];\n                    if (o.outputs.forEach(function(e) {\n                        var n = t[e.id];\n                        null != n ? a.push(n) : a.push(null);\n                    }), null == o.gradient) throw new Error(\"Cannot compute gradient: gradient function not found for \" + o.kernelName + \".\");\n                    var i = o.gradient(a), s = function(e) {\n                        if (!(e in i)) throw new Error(\"Cannot backprop through input \" + e + \". Available gradients found: \" + Object.keys(i) + \".\");\n                        var r = n(function() {\n                            return i[e]();\n                        });\n                        if (\"float32\" !== r.dtype) throw new Error(\"Error in gradient for op \" + o.kernelName + \". The gradient of input \" + e + \" must have 'float32' dtype, but has '\" + r.dtype + \"'\");\n                        var a = o.inputs[e];\n                        if (!S(r.shape, a.shape)) throw new Error(\"Error in gradient for op \" + o.kernelName + \". The gradient of input '\" + e + \"' has shape '\" + r.shape + \"', which does not match the shape of the input '\" + a.shape + \"'\");\n                        if (null == t[a.id]) t[a.id] = r;\n                        else {\n                            var s = t[a.id];\n                            t[a.id] = s.add(r), s.dispose();\n                        }\n                    };\n                    for(var u in o.inputs)s(u);\n                }, o = e.length - 1; o >= 0; o--)r(o);\n            }(s, i, function(t) {\n                return o.tidy(t);\n            });\n            var u = e.map(function(t) {\n                return s[t.id];\n            });\n            return 0 === o.state.gradientDepth && (o.state.activeTape.forEach(function(t) {\n                for(var e = 0, n = t.saved; e < n.length; e++){\n                    n[e].dispose();\n                }\n            }), o.state.activeTape = null), {\n                value: a,\n                grads: u\n            };\n        });\n    }, t.prototype.customGrad = function(t) {\n        var e = this;\n        return C(X(t), function() {\n            return \"The f passed in customGrad(f) must be a function.\";\n        }), function() {\n            for(var n, r = [], o = 0; o < arguments.length; o++)r[o] = arguments[o];\n            C(r.every(function(t) {\n                return t instanceof wt;\n            }), function() {\n                return \"The args passed in customGrad(f)(x1, x2,...) must all be tensors\";\n            });\n            var a = {};\n            return r.forEach(function(t, e) {\n                a[e] = t;\n            }), e.runKernelFunc(function(e, o) {\n                return C((n = t.apply(void 0, r.concat([\n                    o\n                ]))).value instanceof wt, function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\";\n                }), C(X(n.gradFunc), function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\";\n                }), n.value;\n            }, a, function(t, e) {\n                var o = n.gradFunc(t, e), a = Array.isArray(o) ? o : [\n                    o\n                ];\n                C(a.length === r.length, function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\";\n                }), C(a.every(function(t) {\n                    return t instanceof wt;\n                }), function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\";\n                });\n                var i = {};\n                return a.forEach(function(t, e) {\n                    i[e] = function() {\n                        return t;\n                    };\n                }), i;\n            });\n        };\n    }, t.prototype.readSync = function(t) {\n        return this.state.tensorInfo.get(t).backend.readSync(t);\n    }, t.prototype.read = function(t) {\n        return this.state.tensorInfo.get(t).backend.read(t);\n    }, t.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return e = et(), [\n                            4,\n                            this.backend.time(t)\n                        ];\n                    case 1:\n                        return (n = r.sent()).wallMs = et() - e, [\n                            2,\n                            n\n                        ];\n                }\n            });\n        });\n    }, t.prototype.track = function(t) {\n        return null != this.state.activeScope && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;\n    }, Object.defineProperty(t.prototype, \"registeredVariables\", {\n        get: function() {\n            return this.state.registeredVariables;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.reset = function() {\n        for(var t in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Bt, this.registry)this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];\n        this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;\n    }, t.nextTensorId = 0, t.nextVariableId = 0, t;\n}();\nvar Lt = function() {\n    var t = function() {\n        if (null == Ot) {\n            var t = void 0;\n            if (false) {}\n            else if (\"undefined\" != typeof global) t = global;\n            else if (\"undefined\" != typeof process) t = process;\n            else {\n                if (\"undefined\" == typeof self) throw new Error(\"Could not find a global object\");\n                t = self;\n            }\n            Ot = t;\n        }\n        return Ot;\n    }();\n    if (null == t._tfengine) {\n        var e = new o(t);\n        t._tfengine = new Pt(e);\n    }\n    return function(t) {\n        s = t;\n    }(t._tfengine.ENV), yt = function() {\n        return t._tfengine;\n    }, t._tfengine;\n}();\nfunction Wt() {\n    return  false || \"undefined\" != typeof WorkerGlobalScope;\n}\nvar Ut = i();\nUt.registerFlag(\"DEBUG\", function() {\n    return !1;\n}, function(t) {\n    t && console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\");\n}), Ut.registerFlag(\"IS_BROWSER\", function() {\n    return Wt();\n}), Ut.registerFlag(\"IS_NODE\", function() {\n    return \"undefined\" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;\n}), Ut.registerFlag(\"IS_CHROME\", function() {\n    return \"undefined\" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n}), Ut.registerFlag(\"PROD\", function() {\n    return !1;\n}), Ut.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\", function() {\n    return Ut.getBool(\"DEBUG\");\n}), Ut.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\", function() {\n    return !0;\n}), Ut.registerFlag(\"IS_TEST\", function() {\n    return !1;\n});\nvar Vt, zt, Gt, Ht = {}, qt = {\n    alpha: !1,\n    antialias: !1,\n    premultipliedAlpha: !1,\n    preserveDrawingBuffer: !1,\n    depth: !1,\n    stencil: !1,\n    failIfMajorPerformanceCaveat: !0\n};\nfunction Kt(t, e) {\n    Ht[t] = e;\n}\nfunction jt(t) {\n    t in Ht || (Ht[t] = function(t) {\n        if (1 !== t && 2 !== t) throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");\n        var e = function(t) {\n            if (\"undefined\" != typeof OffscreenCanvas && 2 === t) return new OffscreenCanvas(300, 150);\n            if (\"undefined\" != typeof document) return document.createElement(\"canvas\");\n            throw new Error(\"Cannot create a canvas in this context\");\n        }(t);\n        if (e.addEventListener(\"webglcontextlost\", function(e) {\n            e.preventDefault(), delete Ht[t];\n        }, !1), 1 === t) return e.getContext(\"webgl\", qt) || e.getContext(\"experimental-webgl\", qt);\n        return e.getContext(\"webgl2\", qt);\n    }(t));\n    var e = Ht[t];\n    return e.isContextLost() ? (delete Ht[t], jt(t)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Ht[t]);\n}\nfunction Xt(t, e) {\n    return [\n        e,\n        t\n    ];\n}\nfunction Yt(t) {\n    var e = k(t);\n    return T(Math.ceil(e / 4));\n}\nfunction $t(t, e) {\n    return [\n        Math.max(1, Math.ceil(e / 2)),\n        Math.max(1, Math.ceil(t / 2))\n    ];\n}\nfunction Qt(t, e) {\n    var n, r, o, a, s, u, c, l, h, f = t;\n    return 2 === i().getNumber(\"WEBGL_VERSION\") ? (n = f.R32F, r = f.R16F, o = f.RGBA16F, a = f.RGBA32F, s = f.RED, u = 4, c = 1, l = f.HALF_FLOAT, h = f.FLOAT) : (n = t.RGBA, r = t.RGBA, o = t.RGBA, a = f.RGBA, s = t.RGBA, u = 4, c = 4, l = null != e ? e.HALF_FLOAT_OES : null, h = t.FLOAT), {\n        internalFormatFloat: n,\n        internalFormatHalfFloat: r,\n        internalFormatPackedHalfFloat: o,\n        internalFormatPackedFloat: a,\n        textureFormatFloat: s,\n        downloadTextureFormat: t.RGBA,\n        downloadUnpackNumChannels: u,\n        defaultNumChannels: c,\n        textureTypeHalfFloat: l,\n        textureTypeFloat: h\n    };\n}\nfunction Jt(t, e, n) {\n    var r = n();\n    return e && function(t) {\n        var e = t.getError();\n        if (e !== t.NO_ERROR) throw new Error(\"WebGL Error: \" + ne(t, e));\n    }(t), r;\n}\n!function(t) {\n    t[t.DENSE = 0] = \"DENSE\", t[t.SHARED_BATCH = 1] = \"SHARED_BATCH\";\n}(Vt || (Vt = {})), function(t) {\n    t[t.RENDER = 0] = \"RENDER\", t[t.UPLOAD = 1] = \"UPLOAD\", t[t.PIXELS = 2] = \"PIXELS\", t[t.DOWNLOAD = 3] = \"DOWNLOAD\";\n}(zt || (zt = {})), function(t) {\n    t[t.UNPACKED_FLOAT16 = 0] = \"UNPACKED_FLOAT16\", t[t.UNPACKED_FLOAT32 = 1] = \"UNPACKED_FLOAT32\", t[t.PACKED_4X1_UNSIGNED_BYTE = 2] = \"PACKED_4X1_UNSIGNED_BYTE\", t[t.PACKED_2X2_FLOAT32 = 3] = \"PACKED_2X2_FLOAT32\", t[t.PACKED_2X2_FLOAT16 = 4] = \"PACKED_2X2_FLOAT16\";\n}(Gt || (Gt = {}));\nvar Zt = 5.96e-8, te = 65504;\nfunction ee(t) {\n    return !!(i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") || 0 === t || Zt < Math.abs(t) && Math.abs(t) < te);\n}\nfunction ne(t, e) {\n    switch(e){\n        case t.NO_ERROR:\n            return \"NO_ERROR\";\n        case t.INVALID_ENUM:\n            return \"INVALID_ENUM\";\n        case t.INVALID_VALUE:\n            return \"INVALID_VALUE\";\n        case t.INVALID_OPERATION:\n            return \"INVALID_OPERATION\";\n        case t.INVALID_FRAMEBUFFER_OPERATION:\n            return \"INVALID_FRAMEBUFFER_OPERATION\";\n        case t.OUT_OF_MEMORY:\n            return \"OUT_OF_MEMORY\";\n        case t.CONTEXT_LOST_WEBGL:\n            return \"CONTEXT_LOST_WEBGL\";\n        default:\n            return \"Unknown error code \" + e;\n    }\n}\nfunction re(t, e, n) {\n    return ke(t, e, function() {\n        return t.getExtension(n);\n    }, 'Extension \"' + n + '\" not supported on this browser.');\n}\nfunction oe(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createShader(t.VERTEX_SHADER);\n    }, \"Unable to create vertex WebGLShader.\");\n    if (Jt(t, e, function() {\n        return t.shaderSource(r, n);\n    }), Jt(t, e, function() {\n        return t.compileShader(r);\n    }), !1 === t.getShaderParameter(r, t.COMPILE_STATUS)) throw console.log(t.getShaderInfoLog(r)), new Error(\"Failed to compile vertex shader.\");\n    return r;\n}\nfunction ae(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createShader(t.FRAGMENT_SHADER);\n    }, \"Unable to create fragment WebGLShader.\");\n    if (Jt(t, e, function() {\n        return t.shaderSource(r, n);\n    }), Jt(t, e, function() {\n        return t.compileShader(r);\n    }), !1 === t.getShaderParameter(r, t.COMPILE_STATUS)) throw function(t, e) {\n        var n = ue.exec(e);\n        if (null == n) return console.log(\"Couldn't parse line number in error: \" + e), void console.log(t);\n        for(var r = +n[1], o = t.split(\"\\n\"), a = o.length.toString().length + 2, i = o.map(function(t, e) {\n            return N((e + 1).toString(), a) + t;\n        }), s = 0, u = 0; u < i.length; u++)s = Math.max(i[u].length, s);\n        var c = i.slice(0, r - 1), l = i.slice(r - 1, r), h = i.slice(r);\n        console.log(c.join(\"\\n\")), console.log(e.split(\"\\n\")[0]), console.log(\"%c \" + N(l[0], s), \"border:1px solid red; background-color:#e3d2d2; color:#a61717\"), console.log(h.join(\"\\n\"));\n    }(n, t.getShaderInfoLog(r)), new Error(\"Failed to compile fragment shader.\");\n    return r;\n}\nvar ie, se, ue = /ERROR: [0-9]+:([0-9]+):/g;\nfunction ce(t, e) {\n    return ke(t, e, function() {\n        return t.createProgram();\n    }, \"Unable to create WebGLProgram.\");\n}\nfunction le(t, e, n) {\n    if (Jt(t, e, function() {\n        return t.linkProgram(n);\n    }), !1 === t.getProgramParameter(n, t.LINK_STATUS)) throw console.log(t.getProgramInfoLog(n)), new Error(\"Failed to link vertex and fragment shaders.\");\n}\nfunction he(t, e, n) {\n    if (Jt(t, e, function() {\n        return t.validateProgram(n);\n    }), !1 === t.getProgramParameter(n, t.VALIDATE_STATUS)) throw console.log(t.getProgramInfoLog(n)), new Error(\"Shader program validation failed.\");\n}\nfunction fe(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createBuffer();\n    }, \"Unable to create WebGLBuffer\");\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, r);\n    }), Jt(t, e, function() {\n        return t.bufferData(t.ARRAY_BUFFER, n, t.STATIC_DRAW);\n    }), r;\n}\nfunction de(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createBuffer();\n    }, \"Unable to create WebGLBuffer\");\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r);\n    }), Jt(t, e, function() {\n        return t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW);\n    }), r;\n}\nfunction pe(t, e) {\n    return ke(t, e, function() {\n        return t.createTexture();\n    }, \"Unable to create WebGLTexture.\");\n}\nfunction ve(t, e) {\n    var n = i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n    if (t <= 0 || e <= 0) {\n        var r = \"[\" + t + \"x\" + e + \"]\";\n        throw new Error(\"Requested texture size \" + r + \" is invalid.\");\n    }\n    if (t > n || e > n) {\n        r = \"[\" + t + \"x\" + e + \"]\";\n        throw new Error(\"Requested texture size \" + r + \" greater than WebGL maximum on this browser / GPU \" + (\"[\" + n + \"x\" + n + \"]\") + \".\");\n    }\n}\nfunction me(t, e) {\n    return ke(t, e, function() {\n        return t.createFramebuffer();\n    }, \"Unable to create WebGLFramebuffer.\");\n}\nfunction ge(t, e, n, r, o, a, i, s) {\n    var u = t.getAttribLocation(n, r);\n    return -1 !== u && (Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, o);\n    }), Jt(t, e, function() {\n        return t.vertexAttribPointer(u, a, t.FLOAT, !1, i, s);\n    }), Jt(t, e, function() {\n        return t.enableVertexAttribArray(u);\n    }), !0);\n}\nfunction ye(t, e, n, r) {\n    Se(t, r), Jt(t, e, function() {\n        return t.activeTexture(t.TEXTURE0 + r);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    });\n}\nfunction xe(t, e, n, r) {\n    return ke(t, e, function() {\n        return t.getUniformLocation(n, r);\n    }, 'uniform \"' + r + '\" not present in program.');\n}\nfunction be(t, e, n) {\n    return t.getUniformLocation(e, n);\n}\nfunction we(t, e, n, r, o, a) {\n    Jt(t, e, function() {\n        return ye(t, e, r, a);\n    }), Jt(t, e, function() {\n        return t.uniform1i(o, a);\n    });\n}\nfunction Ce(t, e, n, r) {\n    Jt(t, e, function() {\n        return t.bindFramebuffer(t.FRAMEBUFFER, r);\n    }), Jt(t, e, function() {\n        return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);\n    });\n}\nfunction Ee(t, e, n) {\n    Jt(t, e, function() {\n        return t.bindFramebuffer(t.FRAMEBUFFER, n);\n    }), Jt(t, e, function() {\n        return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, null, 0);\n    });\n}\nfunction Re(t) {\n    var e = t.checkFramebufferStatus(t.FRAMEBUFFER);\n    if (e !== t.FRAMEBUFFER_COMPLETE) throw new Error(\"Error binding framebuffer: \" + Ie(t, e));\n}\nfunction Ie(t, e) {\n    switch(e){\n        case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n        case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n        case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n        case t.FRAMEBUFFER_UNSUPPORTED:\n            return \"FRAMEBUFFER_UNSUPPORTED\";\n        default:\n            return \"unknown error \" + e;\n    }\n}\nfunction ke(t, e, n, r) {\n    var o = Jt(t, e, function() {\n        return n();\n    });\n    if (null == o) throw new Error(r);\n    return o;\n}\nfunction Se(t, e) {\n    var n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r = e + t.TEXTURE0;\n    if (r < t.TEXTURE0 || r > n) throw new Error(\"textureUnit must be in \" + (\"[gl.TEXTURE0, gl.TEXTURE\" + n + \"]\") + \".\");\n}\nfunction Ae(t, e) {\n    return void 0 === e && (e = 2), k(t.slice(0, t.length - e));\n}\nfunction De(t) {\n    if (0 === t.length) throw Error(\"Cannot get rows and columns of an empty shape array.\");\n    return [\n        t.length > 1 ? t[t.length - 2] : 1,\n        t[t.length - 1]\n    ];\n}\nfunction Te(t) {\n    var e = [\n        1,\n        1,\n        1\n    ];\n    return 0 === t.length || 1 === t.length && 1 === t[0] || (e = [\n        Ae(t)\n    ].concat(De(t))), e;\n}\nfunction Ne(t, e) {\n    var n;\n    void 0 === e && (e = !1);\n    var r = i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n    if (e && (r *= 2, 1 === (t = t.map(function(e, n) {\n        return n >= t.length - 2 ? b(t[n]) : t[n];\n    })).length && (t = [\n        2,\n        t[0]\n    ])), 2 !== t.length) {\n        var o = M(t);\n        t = o.newShape;\n    }\n    var a = k(t);\n    if (t.length <= 1 && a <= r) return [\n        1,\n        a\n    ];\n    if (2 === t.length && t[0] <= r && t[1] <= r) return t;\n    if (3 === t.length && t[0] * t[1] <= r && t[2] <= r) return [\n        t[0] * t[1],\n        t[2]\n    ];\n    if (3 === t.length && t[0] <= r && t[1] * t[2] <= r) return [\n        t[0],\n        t[1] * t[2]\n    ];\n    if (4 === t.length && t[0] * t[1] * t[2] <= r && t[3] <= r) return [\n        t[0] * t[1] * t[2],\n        t[3]\n    ];\n    if (4 === t.length && t[0] <= r && t[1] * t[2] * t[3] <= r) return [\n        t[0],\n        t[1] * t[2] * t[3]\n    ];\n    if (e) {\n        var s = Ae(t), u = 2, c = 2;\n        return t.length && (u = (n = De(t))[0], c = n[1]), T(a = s * (u / 2) * (c / 2)).map(function(t) {\n            return 2 * t;\n        });\n    }\n    return T(a);\n}\nfunction Fe(t) {\n    return t % 2 == 0;\n}\nfunction _e(t, e) {\n    if (S(t = t.slice(-2), e = e.slice(-2))) return !0;\n    if (!t.length || !e.length) return !0;\n    if (0 === t[0] || 0 === t[1] || 0 === e[0] || 0 === e[1]) return !0;\n    if (t.length !== e.length) {\n        var n = t.slice(-1)[0], r = e.slice(-1)[0];\n        if (n === r) return !0;\n        if (Fe(n) && Fe(r) && (1 === t[0] || 1 === e[0])) return !0;\n    }\n    return t[1] === e[1] && Fe(t[0]) && Fe(e[0]);\n}\nfunction Oe(t) {\n    if (null == ie) {\n        var e = jt(t);\n        ie = e.getParameter(e.MAX_TEXTURE_SIZE);\n    }\n    return ie;\n}\nfunction Me(t) {\n    if (null == se) {\n        var e = jt(t);\n        se = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    return Math.min(16, se);\n}\nfunction Be(t) {\n    if (0 === t) return 0;\n    var e = jt(t);\n    return Pe(e, \"EXT_disjoint_timer_query_webgl2\") && 2 === t ? 2 : Pe(e, \"EXT_disjoint_timer_query\") ? 1 : 0;\n}\nfunction Pe(t, e) {\n    return null != t.getExtension(e);\n}\nfunction Le(t) {\n    try {\n        if (null != jt(t)) return !0;\n    } catch (t) {\n        return !1;\n    }\n    return !1;\n}\nfunction We(t) {\n    if (0 === t) return !1;\n    var e = jt(t);\n    if (1 === t) {\n        if (!Pe(e, \"OES_texture_float\")) return !1;\n    } else if (!Pe(e, \"EXT_color_buffer_float\")) return !1;\n    return Ve(e);\n}\nfunction Ue(t) {\n    if (0 === t) return !1;\n    var e = jt(t);\n    if (1 !== t) {\n        if (Pe(e, \"EXT_color_buffer_float\")) return Ve(e);\n        if (Pe(e, \"EXT_color_buffer_half_float\")) {\n            var n = e.getExtension(\"EXT_color_buffer_half_float\");\n            return function(t, e) {\n                var n = Qt(t, e), r = t.createTexture();\n                t.bindTexture(t.TEXTURE_2D, r);\n                t.texImage2D(t.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);\n                var o = t.createFramebuffer();\n                t.bindFramebuffer(t.FRAMEBUFFER, o), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, r, 0);\n                var a = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;\n                return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(r), t.deleteFramebuffer(o), a;\n            }(e, n);\n        }\n        return !1;\n    }\n    return !!Pe(e, \"OES_texture_float\") && !!Pe(e, \"WEBGL_color_buffer_float\") && Ve(e);\n}\nfunction Ve(t) {\n    var e = Qt(t), n = t.createTexture();\n    t.bindTexture(t.TEXTURE_2D, n);\n    t.texImage2D(t.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);\n    var r = t.createFramebuffer();\n    t.bindFramebuffer(t.FRAMEBUFFER, r), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);\n    var o = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;\n    return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(n), t.deleteFramebuffer(r), o;\n}\nfunction ze(t) {\n    return 2 === t && null != jt(t).fenceSync;\n}\nvar Ge = Object.freeze({\n    callAndCheck: Jt,\n    canBeRepresented: ee,\n    getWebGLErrorMessage: ne,\n    getExtensionOrThrow: re,\n    createVertexShader: oe,\n    createFragmentShader: ae,\n    createProgram: ce,\n    linkProgram: le,\n    validateProgram: he,\n    createStaticVertexBuffer: fe,\n    createStaticIndexBuffer: de,\n    getNumChannels: function() {\n        return 2 === i().getNumber(\"WEBGL_VERSION\") ? 1 : 4;\n    },\n    createTexture: pe,\n    validateTextureSize: ve,\n    createFramebuffer: me,\n    bindVertexBufferToProgramAttribute: ge,\n    bindTextureUnit: ye,\n    unbindTextureUnit: function(t, e, n) {\n        Se(t, n), Jt(t, e, function() {\n            return t.activeTexture(t.TEXTURE0 + n);\n        }), Jt(t, e, function() {\n            return t.bindTexture(t.TEXTURE_2D, null);\n        });\n    },\n    getProgramUniformLocationOrThrow: xe,\n    getProgramUniformLocation: be,\n    bindTextureToProgramUniformSampler: we,\n    bindCanvasToFramebuffer: function(t, e) {\n        Jt(t, e, function() {\n            return t.bindFramebuffer(t.FRAMEBUFFER, null);\n        }), Jt(t, e, function() {\n            return t.viewport(0, 0, t.canvas.width, t.canvas.height);\n        }), Jt(t, e, function() {\n            return t.scissor(0, 0, t.canvas.width, t.canvas.height);\n        });\n    },\n    bindColorTextureToFramebuffer: Ce,\n    unbindColorTextureFromFramebuffer: Ee,\n    validateFramebuffer: Re,\n    getFramebufferErrorMessage: Ie,\n    getBatchDim: Ae,\n    getRowsCols: De,\n    getShapeAs3D: Te,\n    getTextureShapeFromLogicalShape: Ne,\n    isReshapeFree: _e,\n    getWebGLMaxTextureSize: Oe,\n    resetMaxTextureSize: function() {\n        ie = null;\n    },\n    resetMaxTexturesInShader: function() {\n        se = null;\n    },\n    getMaxTexturesInShader: Me,\n    getWebGLDisjointQueryTimerVersion: Be,\n    hasExtension: Pe,\n    isWebGLVersionEnabled: Le,\n    isCapableOfRenderingToFloatTexture: We,\n    isDownloadFloatTextureEnabled: Ue,\n    isWebGLFenceEnabled: ze\n}), He = i();\nfunction qe() {\n    i().set(\"PROD\", !0);\n}\nfunction Ke() {\n    i().set(\"DEBUG\", !0);\n}\nfunction je() {\n    i().set(\"DEPRECATION_WARNINGS_ENABLED\", !1), console.warn(\"TensorFlow.js deprecation warnings have been disabled.\");\n}\nfunction Xe(t) {\n    i().getBool(\"DEPRECATION_WARNINGS_ENABLED\") && console.warn(t + \" You can disable deprecation warnings with tf.disableDeprecationWarnings().\");\n}\nfunction Ye() {\n    Lt.disposeVariables();\n}\nfunction $e() {\n    return Lt;\n}\nfunction Qe() {\n    return Lt.memory();\n}\nfunction Je(t) {\n    return Lt.profile(t);\n}\nfunction Ze(t, e) {\n    return Lt.tidy(t, e);\n}\nfunction tn(t) {\n    _t(t).forEach(function(t) {\n        return t.dispose();\n    });\n}\nfunction en(t) {\n    return Lt.keep(t);\n}\nfunction nn(t) {\n    return Lt.time(t);\n}\nfunction rn(t) {\n    return Lt.setBackend(t);\n}\nfunction on() {\n    return Lt.ready();\n}\nfunction an() {\n    return Lt.backendName;\n}\nfunction sn(t) {\n    Lt.removeBackend(t);\n}\nfunction un(t) {\n    return Lt.findBackend(t);\n}\nfunction cn(t) {\n    return Lt.findBackendFactory(t);\n}\nfunction ln(t, e, n) {\n    return void 0 === n && (n = 1), Lt.registerBackend(t, e, n);\n}\nfunction hn() {\n    return Lt.backend;\n}\nfunction fn(t, e) {\n    i().setPlatform(t, e);\n}\nfunction dn() {\n    for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n    i().getBool(\"IS_TEST\") || console.warn.apply(console, t);\n}\nfunction pn(t, e) {\n    var n = t;\n    if (V(t)) return \"string\" === e ? [] : [\n        t.length\n    ];\n    if (!Array.isArray(t)) return [];\n    for(var r = []; Array.isArray(n) || V(n) && \"string\" !== e;)r.push(n.length), n = n[0];\n    return Array.isArray(t) && i().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\") && function t(e, n, r) {\n        if (r = r || [], !Array.isArray(e) && !V(e)) return void C(0 === n.length, function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] is a primitive, but should be an array/TypedArray of \" + n[0] + \" elements\";\n        });\n        C(n.length > 0, function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] should be a primitive, but is an array of \" + e.length + \" elements\";\n        }), C(e.length === n[0], function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] should have \" + n[0] + \" elements, but has \" + e.length + \" elements\";\n        });\n        for(var o = n.slice(1), a = 0; a < e.length; ++a)t(e[a], o, r.concat(a));\n    }(t, r, []), r;\n}\nfunction vn(t, e, n, r) {\n    if (null != t && (\"numeric\" !== t && t !== e || \"numeric\" === t && \"string\" === e)) throw new Error(\"Argument '\" + n + \"' passed to '\" + r + \"' must be \" + t + \" tensor, but got \" + e + \" tensor\");\n}\nfunction mn(t, e, n, r) {\n    if (void 0 === r && (r = \"numeric\"), t instanceof wt) return vn(r, t.dtype, e, n), t;\n    var o = j(t);\n    if (\"string\" !== o && [\n        \"bool\",\n        \"int32\",\n        \"float32\"\n    ].indexOf(r) >= 0 && (o = r), vn(r, o, e, n), null == t || !V(t) && !Array.isArray(t) && \"number\" != typeof t && \"boolean\" != typeof t && \"string\" != typeof t) {\n        var a = null == t ? \"null\" : t.constructor.name;\n        throw new Error(\"Argument '\" + e + \"' passed to '\" + n + \"' must be a Tensor or TensorLike, but got '\" + a + \"'\");\n    }\n    var s = pn(t, o);\n    V(t) || Array.isArray(t) || (t = [\n        t\n    ]);\n    var u = \"string\" !== o ? Q(t, o, i().getBool(\"DEBUG\")) : I(t, [], !0);\n    return Lt.makeTensor(u, s, o);\n}\nfunction gn(t, e, n, r) {\n    if (void 0 === r && (r = \"numeric\"), !Array.isArray(t)) throw new Error(\"Argument \" + e + \" passed to \" + n + \" must be a `Tensor[]` or `TensorLike[]`\");\n    return t.map(function(t, r) {\n        return mn(t, e + \"[\" + r + \"]\", n);\n    }, r);\n}\nfunction yn(t, e) {\n    for(var n = 0; n < t.length; ++n)if (t[t.length - n - 1] !== e - 1 - n) return !1;\n    return !0;\n}\nfunction xn(t, e, n) {\n    for(var r = t.length + e.length, o = [], a = 0, i = 0, s = 0; s < r; s++)-1 === n.indexOf(s) ? o.push(t[a++]) : o.push(e[i++]);\n    return o;\n}\nfunction bn(t, e) {\n    for(var n = [], r = t.length, o = 0; o < r; o++)-1 === e.indexOf(o) && n.push(t[o]);\n    return [\n        n,\n        e.map(function(e) {\n            return t[e];\n        })\n    ];\n}\nfunction wn(t, e) {\n    return xn(t, e.map(function(t) {\n        return 1;\n    }), e);\n}\nfunction Cn(t, e, n) {\n    C(yn(e, n), function() {\n        return t + \" supports only inner-most axes for now. Got axes \" + e + \" and rank-\" + n + \" input.\";\n    });\n}\nfunction En(t, e) {\n    if (yn(t, e)) return null;\n    for(var n = [], r = 0; r < e; ++r)-1 === t.indexOf(r) && n.push(r);\n    return t.forEach(function(t) {\n        return n.push(t);\n    }), n;\n}\nfunction Rn(t) {\n    return t.map(function(t, e) {\n        return [\n            e,\n            t\n        ];\n    }).sort(function(t, e) {\n        return t[1] - e[1];\n    }).map(function(t) {\n        return t[0];\n    });\n}\nfunction In(t, e) {\n    for(var n = [], r = e - t; r < e; ++r)n.push(r);\n    return n;\n}\nfunction kn(t, e) {\n    var n = t[0].length;\n    t.forEach(function(t, e) {\n        C(t.length === n, function() {\n            return \"Error in concat\" + n + \"D: rank of tensors[\" + e + \"] must be the same as the rank of the rest (\" + n + \")\";\n        });\n    }), C(e >= 0 && e < n, function() {\n        return \"Error in concat\" + n + \"D: axis must be between 0 and \" + (n - 1) + \".\";\n    });\n    var r = t[0];\n    t.forEach(function(t, o) {\n        for(var a = 0; a < n; a++)C(a === e || t[a] === r[a], function() {\n            return \"Error in concat\" + n + \"D: Shape of tensors[\" + o + \"] (\" + t + \") does not match the shape of the rest (\" + r + \") along the non-concatenated axis \" + o + \".\";\n        });\n    });\n}\nfunction Sn(t, e) {\n    for(var n = t[0].slice(), r = 1; r < t.length; r++)n[e] += t[r][e];\n    return n;\n}\nfunction An(t) {\n    var e = Object.keys(t);\n    if (1 !== e.length) throw new Error(\"Please provide an object with a single key (operation name) mapping to a function. Got an object with \" + e.length + \" keys.\");\n    var n = e[0], r = t[n];\n    n.endsWith(\"_\") && (n = n.substring(0, n.length - 1));\n    var o = function() {\n        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n        Lt.startScope(n);\n        try {\n            var o = r.apply(void 0, t);\n            return o instanceof Promise && console.error(\"Cannot return a Promise inside of tidy.\"), Lt.endScope(o), o;\n        } catch (t) {\n            throw Lt.endScope(null), t;\n        }\n    };\n    return Object.defineProperty(o, \"name\", {\n        value: n,\n        configurable: !0\n    }), o;\n}\nHe.registerFlag(\"HAS_WEBGL\", function() {\n    return He.getNumber(\"WEBGL_VERSION\") > 0;\n}), He.registerFlag(\"WEBGL_VERSION\", function() {\n    return Le(2) ? 2 : Le(1) ? 1 : 0;\n}), He.registerFlag(\"WEBGL_BUFFER_SUPPORTED\", function() {\n    return 2 === He.get(\"WEBGL_VERSION\");\n}), He.registerFlag(\"WEBGL_CPU_FORWARD\", function() {\n    return !0;\n}), He.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\", function() {\n    return !1;\n}), He.registerFlag(\"WEBGL_PACK\", function() {\n    return He.getBool(\"HAS_WEBGL\");\n}), He.registerFlag(\"WEBGL_PACK_NORMALIZATION\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_CLIP\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\", function() {\n    return !1;\n}), He.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_REDUCE\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_LAZILY_UNPACK\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_CONV_IM2COL\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\", function() {\n    return Oe(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\", function() {\n    return Me(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\", function() {\n    var t = He.getNumber(\"WEBGL_VERSION\");\n    return 0 === t ? 0 : Be(t);\n}), He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\", function() {\n    return He.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0 && (t = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0, 4))));\n    var t;\n}), He.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\", function() {\n    return We(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\", function() {\n    return !He.getBool(\"WEBGL_FORCE_F16_TEXTURES\") && He.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\");\n}), He.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\", function() {\n    return Ue(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_FENCE_API_ENABLED\", function() {\n    return ze(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\", function() {\n    return He.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") ? 4 : 0;\n}), bt = Xe;\nvar Dn = An({\n    complex_: function(t, e) {\n        var n = mn(t, \"real\", \"complex\"), r = mn(e, \"imag\", \"complex\");\n        return E(n.shape, r.shape, \"real and imag shapes, \" + n.shape + \" and \" + r.shape + \", must match in call to tf.complex().\"), Lt.runKernelFunc(function(t) {\n            return t.complex(n, r);\n        }, {\n            $real: n,\n            $imag: r\n        });\n    }\n}), Tn = An({\n    real_: function(t) {\n        var e = mn(t, \"input\", \"real\");\n        return Lt.runKernelFunc(function(t) {\n            return t.real(e);\n        }, {\n            $input: e\n        });\n    }\n}), Nn = An({\n    imag_: function(t) {\n        var e = mn(t, \"input\", \"imag\");\n        return Lt.runKernelFunc(function(t) {\n            return t.imag(e);\n        }, {\n            $input: e\n        });\n    }\n});\nfunction Fn(t, e, n) {\n    return _n(t, e, pn(t, n), n);\n}\nfunction _n(t, e, n, r) {\n    if (null == r && (r = j(t)), \"complex64\" === r) throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");\n    if (!V(t) && !Array.isArray(t) && \"number\" != typeof t && \"boolean\" != typeof t && \"string\" != typeof t) throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");\n    if (null != e) {\n        nt(e);\n        var o = k(e), a = k(n);\n        C(o === a, function() {\n            return \"Based on the provided shape, [\" + e + \"], the tensor should have \" + o + \" values but has \" + a;\n        });\n        for(var s = 0; s < n.length; ++s){\n            var u = n[s], c = s !== n.length - 1 || u !== k(e.slice(s));\n            C(n[s] === e[s] || !c, function() {\n                return \"Error creating a new Tensor. Inferred shape (\" + n + \") does not match the provided shape (\" + e + \"). \";\n            });\n        }\n    }\n    return V(t) || Array.isArray(t) || (t = [\n        t\n    ]), e = e || n, t = \"string\" !== r ? Q(t, r, i().getBool(\"DEBUG\")) : I(t, [], !0), Lt.makeTensor(t, e, r);\n}\nfunction On(t, e) {\n    if ((V(t) && \"string\" !== e || Array.isArray(t)) && \"complex64\" !== e) throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");\n    if (\"string\" === e && V(t) && !(t instanceof Uint8Array)) throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");\n    return _n(t, [], [], e);\n}\nfunction Mn(t, e) {\n    R(t);\n    var n = pn(t, e);\n    if (1 !== n.length) throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");\n    return _n(t, null, n, e);\n}\nfunction Bn(t, e, n) {\n    if (R(t), null != e && 2 !== e.length) throw new Error(\"tensor2d() requires shape to have two numbers\");\n    var r = pn(t, n);\n    if (2 !== r.length && 1 !== r.length) throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");\n    return _n(t, e, r, n);\n}\nfunction Pn(t, e, n) {\n    if (R(t), null != e && 3 !== e.length) throw new Error(\"tensor3d() requires shape to have three numbers\");\n    var r = pn(t, n);\n    if (3 !== r.length && 1 !== r.length) throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Ln(t, e, n) {\n    if (R(t), null != e && 4 !== e.length) throw new Error(\"tensor4d() requires shape to have four numbers\");\n    var r = pn(t, n);\n    if (4 !== r.length && 1 !== r.length) throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Wn(t, e, n) {\n    if (R(t), null != e && 5 !== e.length) throw new Error(\"tensor5d() requires shape to have five numbers\");\n    var r = pn(t, n);\n    if (5 !== r.length && 1 !== r.length) throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Un(t, e, n) {\n    if (R(t), null != e && 6 !== e.length) throw new Error(\"tensor6d() requires shape to have six numbers\");\n    var r = pn(t, n);\n    if (6 !== r.length && 1 !== r.length) throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e = e || r, r, n);\n}\nfunction Vn(t, e, n, r) {\n    return void 0 === e && (e = !0), Lt.makeVariable(t, e, n, r);\n}\nfunction zn(t, e) {\n    if (void 0 === e && (e = \"float32\"), \"complex64\" === e) {\n        var n = zn(t, \"float32\"), r = Gn(t, \"float32\");\n        return Dn(n, r);\n    }\n    var o = Z(k(t), e);\n    return Lt.makeTensor(o, t, e);\n}\nfunction Gn(t, e) {\n    if (void 0 === e && (e = \"float32\"), \"complex64\" === e) {\n        var n = Gn(t, \"float32\"), r = Gn(t, \"float32\");\n        return Dn(n, r);\n    }\n    var o = tt(k(t), e);\n    return Lt.makeTensor(o, t, e);\n}\nfunction Hn(t, e, n) {\n    return Lt.runKernelFunc(function(r) {\n        return r.fill(t, e, n);\n    }, {});\n}\nfunction qn(t, e, n) {\n    if (n <= 0) throw new Error(\"The number of values should be positive.\");\n    return Lt.runKernelFunc(function(r) {\n        return r.linspace(t, e, n);\n    }, {});\n}\nfunction Kn(t, e, n, r) {\n    if (void 0 === n && (n = 1), void 0 === r && (r = \"float32\"), 0 === n) throw new Error(\"Cannot have a step of zero\");\n    if (t === e || t < e && n < 0 || e < t && n > 1) return Gn([\n        0\n    ], r);\n    var o = tt(Math.abs(Math.ceil((e - t) / n)), r);\n    e < t && 1 === n && (n = -1), o[0] = t;\n    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + n;\n    return Mn(o, r);\n}\nvar jn = An({\n    onesLike_: function(t) {\n        var e = mn(t, \"x\", \"onesLike\");\n        if (\"complex64\" === e.dtype) {\n            var n = jn(Tn(e)), r = Xn(Nn(e));\n            return Dn(n, r);\n        }\n        return Lt.runKernelFunc(function(t) {\n            return t.onesLike(e);\n        }, {\n            $x: e\n        }, function(t, e) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Xn = An({\n    zerosLike_: function(t) {\n        var e = mn(t, \"x\", \"zerosLike\");\n        return Lt.runKernelFunc(function(t) {\n            return t.zerosLike(e);\n        }, {\n            $x: e\n        }, function(t, e) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n});\nvar Yn = An({\n    concat_: function(t, e) {\n        void 0 === e && (e = 0), C(t.length >= 1, function() {\n            return \"Pass at least one tensor to concat\";\n        });\n        var n = gn(t, \"tensors\", \"concat\");\n        \"complex64\" === n[0].dtype && n.forEach(function(t) {\n            if (\"complex64\" !== t.dtype) throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \" + t.dtype + \". \");\n        }), e = O(e, n[0].shape)[0];\n        var r = Sn(n.map(function(t) {\n            return t.shape;\n        }), e);\n        if (0 === k(r)) return Fn([], r);\n        if (1 === (n = n.filter(function(t) {\n            return t.size > 0;\n        })).length) return n[0];\n        var o = n.map(function(t) {\n            return t.shape;\n        });\n        kn(o, e);\n        var a = n, i = {\n            axis: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.concat(n, e);\n        }, a, function(t) {\n            var n = o.map(function(t) {\n                return t[e];\n            });\n            return tr(t, n, e).map(function(t) {\n                return function() {\n                    return t;\n                };\n            });\n        }, \"Concat\", i);\n    }\n}), $n = An({\n    concat1d_: function(t) {\n        return Yn(t, 0);\n    }\n}), Qn = An({\n    concat2d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), Jn = An({\n    concat3d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), Zn = An({\n    concat4d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), tr = An({\n    split_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r, o = mn(t, \"x\", \"split\");\n        return n = O(n, o.shape)[0], \"number\" == typeof e ? (C(o.shape[n] % e == 0, function() {\n            return \"Number of splits must evenly divide the axis.\";\n        }), r = new Array(e).fill(o.shape[n] / e)) : (C(o.shape[n] === e.reduce(function(t, e) {\n            return t + e;\n        }), function() {\n            return \"The sum of sizes must match the size of the axis dimension.\";\n        }), r = e), Lt.runKernelFunc(function(t) {\n            return t.split(o, r, n);\n        }, {\n            $x: o\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Yn(t, n);\n                }\n            };\n        });\n    }\n});\n\"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self && self;\nfunction er(t, e) {\n    return t(e = {\n        exports: {}\n    }, e.exports), e.exports;\n}\nvar nr = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e, n = this, r = (e = 4022871197, function(t) {\n                t = t.toString();\n                for(var n = 0; n < t.length; n++){\n                    var r = .02519603282416938 * (e += t.charCodeAt(n));\n                    r -= e = r >>> 0, e = (r *= e) >>> 0, e += 4294967296 * (r -= e);\n                }\n                return 2.3283064365386963e-10 * (e >>> 0);\n            });\n            n.next = function() {\n                var t = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;\n                return n.s0 = n.s1, n.s1 = n.s2, n.s2 = t - (n.c = 0 | t);\n            }, n.c = 1, n.s0 = r(\" \"), n.s1 = r(\" \"), n.s2 = r(\" \"), n.s0 -= r(t), n.s0 < 0 && (n.s0 += 1), n.s1 -= r(t), n.s1 < 0 && (n.s1 += 1), n.s2 -= r(t), n.s2 < 0 && (n.s2 += 1), r = null;\n        }\n        function o(t, e) {\n            return e.c = t.c, e.s0 = t.s0, e.s1 = t.s1, e.s2 = t.s2, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = n.next;\n            return i.int32 = function() {\n                return 4294967296 * n.next() | 0;\n            }, i.double = function() {\n                return i() + 11102230246251565e-32 * (2097152 * i() | 0);\n            }, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.alea = a;\n    }(0, t, !1);\n}), rr = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.next = function() {\n                var t = e.x ^ e.x << 11;\n                return e.x = e.y, e.y = e.z, e.z = e.w, e.w ^= e.w >>> 19 ^ t ^ t >>> 8;\n            }, t === (0 | t) ? e.x = t : n += t;\n            for(var r = 0; r < n.length + 64; r++)e.x ^= 0 | n.charCodeAt(r), e.next();\n        }\n        function o(t, e) {\n            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xor128 = a;\n    }(0, t, !1);\n}), or = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.next = function() {\n                var t = e.x ^ e.x >>> 2;\n                return e.x = e.y, e.y = e.z, e.z = e.w, e.w = e.v, (e.d = e.d + 362437 | 0) + (e.v = e.v ^ e.v << 4 ^ t ^ t << 1) | 0;\n            }, e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.v = 0, t === (0 | t) ? e.x = t : n += t;\n            for(var r = 0; r < n.length + 64; r++)e.x ^= 0 | n.charCodeAt(r), r == n.length && (e.d = e.x << 10 ^ e.x >>> 4), e.next();\n        }\n        function o(t, e) {\n            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e.v = t.v, e.d = t.d, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xorwow = a;\n    }(0, t, !1);\n}), ar = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this;\n            e.next = function() {\n                var t, n, r = e.x, o = e.i;\n                return t = r[o], n = (t ^= t >>> 7) ^ t << 24, n ^= (t = r[o + 1 & 7]) ^ t >>> 10, n ^= (t = r[o + 3 & 7]) ^ t >>> 3, n ^= (t = r[o + 4 & 7]) ^ t << 7, t = r[o + 7 & 7], n ^= (t ^= t << 13) ^ t << 9, r[o] = n, e.i = o + 1 & 7, n;\n            }, function(t, e) {\n                var n, r = [];\n                if (e === (0 | e)) r[0] = e;\n                else for(e = \"\" + e, n = 0; n < e.length; ++n)r[7 & n] = r[7 & n] << 15 ^ e.charCodeAt(n) + r[n + 1 & 7] << 13;\n                for(; r.length < 8;)r.push(0);\n                for(n = 0; n < 8 && 0 === r[n]; ++n);\n                for(8 == n ? r[7] = -1 : r[n], t.x = r, t.i = 0, n = 256; n > 0; --n)t.next();\n            }(e, t);\n        }\n        function o(t, e) {\n            return e.x = t.x.slice(), e.i = t.i, e;\n        }\n        function a(t, e) {\n            null == t && (t = +new Date);\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (a.x && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xorshift7 = a;\n    }(0, t, !1);\n}), ir = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this;\n            e.next = function() {\n                var t, n, r = e.w, o = e.X, a = e.i;\n                return e.w = r = r + 1640531527 | 0, n = o[a + 34 & 127], t = o[a = a + 1 & 127], n ^= n << 13, t ^= t << 17, n ^= n >>> 15, t ^= t >>> 12, n = o[a] = n ^ t, e.i = a, n + (r ^ r >>> 16) | 0;\n            }, function(t, e) {\n                var n, r, o, a, i, s = [], u = 128;\n                for(e === (0 | e) ? (r = e, e = null) : (e += \"\\x00\", r = 0, u = Math.max(u, e.length)), o = 0, a = -32; a < u; ++a)e && (r ^= e.charCodeAt((a + 32) % e.length)), 0 === a && (i = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, a >= 0 && (i = i + 1640531527 | 0, o = 0 == (n = s[127 & a] ^= r + i) ? o + 1 : 0);\n                for(o >= 128 && (s[127 & (e && e.length || 0)] = -1), o = 127, a = 512; a > 0; --a)r = s[o + 34 & 127], n = s[o = o + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[o] = r ^ n;\n                t.w = i, t.X = s, t.i = o;\n            }(e, t);\n        }\n        function o(t, e) {\n            return e.i = t.i, e.w = t.w, e.X = t.X.slice(), e;\n        }\n        function a(t, e) {\n            null == t && (t = +new Date);\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (a.X && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xor4096 = a;\n    }(0, t, !1);\n}), sr = er(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.next = function() {\n                var t = e.b, n = e.c, r = e.d, o = e.a;\n                return t = t << 25 ^ t >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ o, o = o - t | 0, e.b = t = t << 20 ^ t >>> 12 ^ n, e.c = n = n - r | 0, e.d = r << 16 ^ n >>> 16 ^ o, e.a = o - t | 0;\n            }, e.a = 0, e.b = 0, e.c = -1640531527, e.d = 1367130551, t === Math.floor(t) ? (e.a = t / 4294967296 | 0, e.b = 0 | t) : n += t;\n            for(var r = 0; r < n.length + 20; r++)e.b ^= 0 | n.charCodeAt(r), e.next();\n        }\n        function o(t, e) {\n            return e.a = t.a, e.b = t.b, e.c = t.c, e.d = t.d, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.tychei = a;\n    }(0, t, !1);\n}), ur = er(function(t) {\n    !function(e, n) {\n        var r, o = this, a = 256, i = 6, s = \"random\", u = n.pow(a, i), c = n.pow(2, 52), l = 2 * c, h = a - 1;\n        function f(t, h, f) {\n            var g = [], y = v(function t(e, n) {\n                var r, o = [], a = typeof e;\n                if (n && \"object\" == a) for(r in e)try {\n                    o.push(t(e[r], n - 1));\n                } catch (t) {}\n                return o.length ? o : \"string\" == a ? e : e + \"\\x00\";\n            }((h = 1 == h ? {\n                entropy: !0\n            } : h || {}).entropy ? [\n                t,\n                m(e)\n            ] : null == t ? function() {\n                try {\n                    var t;\n                    return r && (t = r.randomBytes) ? t = t(a) : (t = new Uint8Array(a), (o.crypto || o.msCrypto).getRandomValues(t)), m(t);\n                } catch (t) {\n                    var n = o.navigator, i = n && n.plugins;\n                    return [\n                        +new Date,\n                        o,\n                        i,\n                        o.screen,\n                        m(e)\n                    ];\n                }\n            }() : t, 3), g), x = new d(g), b = function() {\n                for(var t = x.g(i), e = u, n = 0; t < c;)t = (t + n) * a, e *= a, n = x.g(1);\n                for(; t >= l;)t /= 2, e /= 2, n >>>= 1;\n                return (t + n) / e;\n            };\n            return b.int32 = function() {\n                return 0 | x.g(4);\n            }, b.quick = function() {\n                return x.g(4) / 4294967296;\n            }, b.double = b, v(m(x.S), e), (h.pass || f || function(t, e, r, o) {\n                return o && (o.S && p(o, x), t.state = function() {\n                    return p(x, {});\n                }), r ? (n[s] = t, e) : t;\n            })(b, y, \"global\" in h ? h.global : this == n, h.state);\n        }\n        function d(t) {\n            var e, n = t.length, r = this, o = 0, i = r.i = r.j = 0, s = r.S = [];\n            for(n || (t = [\n                n++\n            ]); o < a;)s[o] = o++;\n            for(o = 0; o < a; o++)s[o] = s[i = h & i + t[o % n] + (e = s[o])], s[i] = e;\n            (r.g = function(t) {\n                for(var e, n = 0, o = r.i, i = r.j, s = r.S; t--;)e = s[o = h & o + 1], n = n * a + s[h & (s[o] = s[i = h & i + e]) + (s[i] = e)];\n                return r.i = o, r.j = i, n;\n            })(a);\n        }\n        function p(t, e) {\n            return e.i = t.i, e.j = t.j, e.S = t.S.slice(), e;\n        }\n        function v(t, e) {\n            for(var n, r = t + \"\", o = 0; o < r.length;)e[h & o] = h & (n ^= 19 * e[h & o]) + r.charCodeAt(o++);\n            return m(e);\n        }\n        function m(t) {\n            return String.fromCharCode.apply(0, t);\n        }\n        if (n[\"seed\" + s] = f, v(n.random(), e), t.exports) {\n            t.exports = f;\n            try {\n                r = __webpack_require__(/*! crypto */ \"crypto\");\n            } catch (t) {}\n        }\n    }([], Math);\n});\nur.alea = nr, ur.xor128 = rr, ur.xorwow = or, ur.xorshift7 = ar, ur.xor4096 = ir, ur.tychei = sr;\nvar cr = ur.alea, lr = function() {\n    function t(t, e, n, r, o) {\n        this.mean = t, this.stdDev = e, this.dtype = n, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);\n        var a = o || Math.random();\n        this.random = cr(a.toString());\n    }\n    return t.prototype.nextValue = function() {\n        if (!isNaN(this.nextVal)) {\n            var t = this.nextVal;\n            return this.nextVal = NaN, t;\n        }\n        for(var e, n, r = !1; !r;){\n            var o = void 0, a = void 0, i = void 0;\n            do {\n                i = (o = 2 * this.random() - 1) * o + (a = 2 * this.random() - 1) * a;\n            }while (i >= 1 || 0 === i);\n            var s = Math.sqrt(-2 * Math.log(i) / i);\n            e = this.mean + this.stdDev * o * s, n = this.mean + this.stdDev * a * s, this.truncated && !this.isValidTruncated(e) || (r = !0);\n        }\n        return this.truncated && !this.isValidTruncated(n) || (this.nextVal = this.convertValue(n)), this.convertValue(e);\n    }, t.prototype.convertValue = function(t) {\n        return null == this.dtype || \"float32\" === this.dtype ? t : Math.round(t);\n    }, t.prototype.isValidTruncated = function(t) {\n        return t <= this.upper && t >= this.lower;\n    }, t;\n}(), hr = function() {\n    function t(t, e, n, r) {\n        this.alpha = t, this.beta = 1 / e, this.dtype = n;\n        var o = r || Math.random();\n        this.randu = cr(o.toString()), this.randn = new lr(0, 1, n, !1, this.randu()), this.d = t < 1 ? t + 2 / 3 : t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    return t.prototype.nextValue = function() {\n        for(var t, e, n, r, o, a;;){\n            do {\n                r = this.randn.nextValue(), a = 1 + this.c * r;\n            }while (a <= 0);\n            if (a *= a * a, e = 1 - .331 * (t = r * r) * t, n = .5 * t + this.d * (1 - a + Math.log(a)), (o = this.randu()) < e || Math.log(o) < n) break;\n        }\n        return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);\n    }, t.prototype.convertValue = function(t) {\n        return \"float32\" === this.dtype ? t : Math.round(t);\n    }, t;\n}(), fr = function() {\n    function t(t, e, n, r) {\n        var o = this;\n        if (void 0 === t && (t = 0), void 0 === e && (e = 1), this.canReturnFloat = function() {\n            return null == o.dtype || \"float32\" === o.dtype;\n        }, this.min = t, this.range = e - t, this.dtype = n, null == r && (r = Math.random()), \"number\" == typeof r && (r = r.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(\"The difference between \" + t + \" - \" + e + \" <= 1 and dtype is not float\");\n        this.random = cr(r);\n    }\n    return t.prototype.convertValue = function(t) {\n        return this.canReturnFloat() ? t : Math.round(t);\n    }, t.prototype.nextValue = function() {\n        return this.convertValue(this.min + this.range * this.random());\n    }, t;\n}();\nfunction dr(t, e, n) {\n    return void 0 === e && (e = \"float32\"), e = e || \"float32\", nt(t), new gt(t, e, n);\n}\nfunction pr(t, e) {\n    void 0 === e && (e = !1), console.log(t.toString(e));\n}\nvar vr = An({\n    batchToSpaceND_: function(t, e, n) {\n        var r = mn(t, \"x\", \"batchToSpaceND\"), o = e.reduce(function(t, e) {\n            return t * e;\n        });\n        return C(r.rank >= 1 + e.length, function() {\n            return \"input rank is \" + r.rank + \" but should be > than blockShape.length \" + e.length;\n        }), C(n.length === e.length, function() {\n            return \"crops.length is \" + n.length + \" but should be equal to blockShape.length  \" + e.length;\n        }), C(r.shape[0] % o == 0, function() {\n            return \"input tensor batch is \" + r.shape[0] + \" but is not divisible by the product of the elements of blockShape \" + e.join(\" * \") + \" === \" + o;\n        }), Lt.runKernelFunc(function(t) {\n            return t.batchToSpaceND(r, e, n);\n        }, {\n            $x: r\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.spaceToBatchND(e, n);\n                }\n            };\n        });\n    }\n}), mr = An({\n    broadcastTo_: function(t, e) {\n        var n = mn(t, \"broadcastTo\", \"x\"), r = n.shape;\n        if (e.some(function(t) {\n            return !(t > 0) || t % 1 != 0;\n        })) throw new Error(\"broadcastTo(): Invalid broadcast shape [\" + e + \"].\");\n        if (e.length < n.rank) throw new Error(\"broadcastTo(): shape.length=\" + e.length + \" < input.rank=\" + n.rank + \".\");\n        if (e.length > n.rank) {\n            for(var o = n.shape.slice(); o.length < e.length;)o.unshift(1);\n            n = n.reshape(o);\n        }\n        for(var a = Array.from(e), i = e.length - 1; i >= 0; i--)if (n.shape[i] === e[i]) a[i] = 1;\n        else if (1 !== n.shape[i]) throw new Error(\"broadcastTo(): [\" + r + \"] cannot be broadcast to [\" + e + \"].\");\n        var s = a.map(function(t, e) {\n            return t > 1 ? e : -1;\n        }).filter(function(t) {\n            return t >= 0;\n        });\n        return 0 === s.length ? n.clone() : Lt.runKernelFunc(function(t) {\n            return t.tile(n, a);\n        }, {\n            input: n\n        }, function(t) {\n            return {\n                input: function() {\n                    return t.sum(s, !0);\n                }\n            };\n        });\n    }\n}), gr = An({\n    cast_: function(t, e) {\n        var n = mn(t, \"x\", \"cast\");\n        if (!W(e)) throw new Error(\"Failed to cast to unknown dtype \" + e);\n        if (\"string\" === e && \"string\" !== n.dtype || \"string\" !== e && \"string\" === n.dtype) throw new Error(\"Only strings can be casted to strings\");\n        var r = {\n            dtype: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.cast(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.clone();\n                }\n            };\n        }, \"Cast\", r);\n    }\n}), yr = An({\n    clone_: function(t) {\n        var e = mn(t, \"x\", \"clone\", null);\n        return Lt.runKernelFunc(function() {\n            return Lt.makeTensorFromDataId(e.dataId, e.shape, e.dtype);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.toFloat();\n                }\n            };\n        });\n    }\n}), xr = An({\n    cumsum_: function(t, e, n, r) {\n        void 0 === e && (e = 0), void 0 === n && (n = !1), void 0 === r && (r = !1);\n        var o = mn(t, \"x\", \"cumsum\"), a = En([\n            e |= 0\n        ], o.rank), i = o;\n        null != a && (i = o.transpose(a));\n        var s = In(1, o.rank)[0], u = Lt.runKernelFunc(function(t) {\n            return t.cumsum(i, s, n, r);\n        }, {\n            permutedX: i\n        }, function(t) {\n            return {\n                permutedX: function() {\n                    return t.cumsum(e, n, !r);\n                }\n            };\n        });\n        return null != a && (u = u.transpose(a)), u;\n    }\n}), br = An({\n    depthToSpace_: function(t, e, n) {\n        void 0 === n && (n = \"NHWC\");\n        var r = mn(t, \"x\", \"depthToSpace\"), o = \"NHWC\" === n ? r.shape[1] : r.shape[2], a = \"NHWC\" === n ? r.shape[2] : r.shape[3], i = \"NHWC\" === n ? r.shape[3] : r.shape[1];\n        return C(o * e >= 0, function() {\n            return \"Negative dimension size caused by overflow when multiplying\\n      \" + o + \" and \" + e + \"  for depthToSpace with input shape\\n      \" + r.shape;\n        }), C(a * e >= 0, function() {\n            return \"Negative dimension size caused by overflow when multiplying\\n      \" + a + \" and \" + e + \" for depthToSpace with input shape\\n          \" + r.shape;\n        }), C(i % (e * e) == 0, function() {\n            return \"Dimension size must be evenly divisible by \" + e * e + \" but is \" + i + \" for depthToSpace with input shape \" + r.shape;\n        }), Lt.runKernelFunc(function(t) {\n            return t.depthToSpace(r, e, n);\n        }, {\n            $x: r\n        });\n    }\n}), wr = An({\n    expandDims_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = mn(t, \"x\", \"expandDims\", null);\n        C(e <= n.rank, function() {\n            return \"Axis must be <= rank of the tensor\";\n        });\n        var r = n.shape.slice();\n        return e < 0 && (C(-(n.rank + 1) <= e, function() {\n            return \"Axis must be in the interval [\" + -(n.rank + 1) + \", \" + n.rank + \"]\";\n        }), e = n.rank + e + 1), r.splice(e, 0, 1), Or(n, r);\n    }\n}), Cr = An({\n    eye_: function(t, e, n, r) {\n        void 0 === r && (r = \"float32\"), null == e && (e = t);\n        for(var o = dr([\n            t,\n            e\n        ], r), a = t <= e ? t : e, i = 0; i < a; ++i)o.set(1, i, i);\n        var s = o.toTensor().as2D(t, e);\n        if (null == n) return s;\n        if (1 === n.length) return Lr(wr(s, 0), [\n            n[0],\n            1,\n            1\n        ]);\n        if (2 === n.length) return Lr(wr(wr(s, 0), 0), [\n            n[0],\n            n[1],\n            1,\n            1\n        ]);\n        if (3 === n.length) return Lr(wr(wr(wr(s, 0), 0), 0), [\n            n[0],\n            n[1],\n            n[2],\n            1,\n            1\n        ]);\n        throw new Error(\"eye() currently supports only 1D and 2D batchShapes, but received \" + n.length + \"D.\");\n    }\n}), Er = An({\n    multinomial_: function(t, e, n, r) {\n        void 0 === r && (r = !1);\n        var o = mn(t, \"logits\", \"multinomial\"), a = o.size, i = o.rank;\n        if (a < 2) throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" + a + \".\");\n        if (i > 2) throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + i);\n        n = n || Math.random();\n        var s = 1 === i ? o.as2D(1, -1) : o, u = Lt.runKernelFunc(function(t) {\n            return t.multinomial(s, r, e, n);\n        }, {\n            logits2D: s\n        });\n        return 1 === i ? u.as1D() : u;\n    }\n}), Rr = An({\n    oneHot_: function(t, e, n, r) {\n        if (void 0 === n && (n = 1), void 0 === r && (r = 0), e < 2) throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + e);\n        var o = mn(t, \"indices\", \"oneHot\", \"int32\"), a = o.shape.concat([\n            e\n        ]);\n        return o = o.flatten(), Lt.runKernelFunc(function(t) {\n            return t.oneHot(o, e, n, r);\n        }, {\n            $indices: o\n        }, function(t) {\n            return {\n                $indices: function() {\n                    return Gn(o.shape, \"float32\");\n                }\n            };\n        }).reshape(a);\n    }\n}), Ir = An({\n    pad_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r = mn(t, \"x\", \"pad\");\n        if (0 === r.rank) throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");\n        var o = {\n            paddings: e,\n            constantValue: n\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.pad(r, e, n);\n        }, {\n            x: r\n        }, function(t) {\n            var n = e.map(function(t) {\n                return t[0];\n            });\n            return {\n                x: function() {\n                    return t.slice(n, r.shape);\n                }\n            };\n        }, \"PadV2\", o);\n    }\n}), kr = An({\n    pad1d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(2 === e.length, function() {\n            return \"Invalid number of paddings. Must be length of 2.\";\n        }), Ir(t, [\n            e\n        ], n);\n    }\n}), Sr = An({\n    pad2d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(2 === e.length && 2 === e[0].length && 2 === e[1].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ir(t, e, n);\n    }\n}), Ar = An({\n    pad3d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(3 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ir(t, e, n);\n    }\n}), Dr = An({\n    pad4d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(4 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length && 2 === e[3].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ir(t, e, n);\n    }\n}), Tr = An({\n    rand_: function(t, e, n) {\n        var r = k(t), o = null;\n        if (null == n || \"float32\" === n) o = new Float32Array(r);\n        else if (\"int32\" === n) o = new Int32Array(r);\n        else {\n            if (\"bool\" !== n) throw new Error(\"Unknown data type \" + n);\n            o = new Uint8Array(r);\n        }\n        for(var a = 0; a < r; a++)o[a] = e();\n        return Lt.makeTensor(o, t, n);\n    }\n}), Nr = An({\n    randomNormal_: function(t, e, n, r, o) {\n        if (void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && \"bool\" === r) throw new Error(\"Unsupported data type \" + r);\n        for(var a = new lr(e, n, r, !1, o), i = dr(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n}), Fr = An({\n    randomGamma_: function(t, e, n, r, o) {\n        if (void 0 === n && (n = 1), void 0 === r && (r = \"float32\"), null == n && (n = 1), null == r && (r = \"float32\"), \"float32\" !== r && \"int32\" !== r) throw new Error(\"Unsupported data type \" + r);\n        for(var a = new hr(e, n, r, o), i = dr(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n}), _r = An({\n    randomUniform_: function(t, e, n, r, o) {\n        void 0 === e && (e = 0), void 0 === n && (n = 1), void 0 === r && (r = \"float32\");\n        for(var a = dr(t, r), i = new fr(e, n, null, o), s = 0; s < a.values.length; s++)a.values[s] = i.nextValue();\n        return a.toTensor();\n    }\n}), Or = An({\n    reshape_: function(t, e) {\n        var n = mn(t, \"x\", \"reshape\", null);\n        e = _(e, n.size), C(n.size === k(e), function() {\n            return \"new shape and old shape must have the same number of elements.\";\n        });\n        var r = {\n            shape: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.reshape(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.reshape(n.shape);\n                }\n            };\n        }, \"Reshape\", r);\n    }\n}), Mr = An({\n    spaceToBatchND_: function(t, e, n) {\n        var r = mn(t, \"x\", \"spaceToBatchND\");\n        return C(r.rank >= 1 + e.length, function() {\n            return \"input rank \" + r.rank + \" should be > than [blockShape] \" + e.length;\n        }), C(n.length === e.length, function() {\n            return \"paddings.shape[0] \" + n.length + \" must be equal to [blockShape] \" + e.length;\n        }), C(r.shape.reduce(function(t, r, o) {\n            return o > 0 && o <= e.length ? t && (r + n[o - 1][0] + n[o - 1][1]) % e[o - 1] == 0 : t;\n        }, !0), function() {\n            return \"input spatial dimensions \" + r.shape.slice(1) + \" with paddings \" + n.toString() + \" must be divisible by blockShapes \" + e.toString();\n        }), Lt.runKernelFunc(function(t) {\n            return t.spaceToBatchND(r, e, n);\n        }, {\n            $x: r\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.batchToSpaceND(e, n);\n                }\n            };\n        });\n    }\n}), Br = An({\n    squeeze_: function(t, e) {\n        var n = mn(t, \"x\", \"squeeze\");\n        return Or(n, M(n.shape, e).newShape);\n    }\n}), Pr = An({\n    stack_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = gn(t, \"tensors\", \"stack\");\n        if (C(n.length >= 1, function() {\n            return \"Pass at least one tensor to tf.stack\";\n        }), 1 === n.length) return n[0].expandDims(e);\n        var r = n[0].rank, o = n[0].shape, a = n[0].dtype;\n        C(e <= r, function() {\n            return \"Axis must be <= rank of the tensor\";\n        }), n.forEach(function(t) {\n            E(o, t.shape, \"All tensors passed to stack must have matching shapes\");\n        }), n.forEach(function(t) {\n            C(a === t.dtype, function() {\n                return \"All tensors passed to stack must have matching dtypes\";\n            });\n        });\n        var i = n.map(function(t) {\n            return t.expandDims(e);\n        });\n        return Yn(i, e);\n    }\n}), Lr = An({\n    tile_: function(t, e) {\n        var n = mn(t, \"x\", \"tile\", null);\n        C(n.rank === e.length, function() {\n            return \"Error in transpose: rank of input \" + n.rank + \" must match length of reps \" + e + \".\";\n        });\n        var r = [\n            n\n        ], o = {\n            reps: e\n        };\n        return Lt.runKernelFunc(function(t, r) {\n            var o = t.tile(n, e);\n            return r([\n                n\n            ]), o;\n        }, {\n            x: n\n        }, function(t, n) {\n            var r = n[0];\n            return {\n                x: function() {\n                    var n = Xn(r);\n                    if (1 === r.rank) for(var o = 0; o < e[0]; ++o)n = n.add(t.slice([\n                        o * r.shape[0]\n                    ], [\n                        r.shape[0]\n                    ]));\n                    else if (2 === r.rank) for(o = 0; o < e[0]; ++o)for(var a = 0; a < e[1]; ++a)n = n.add(t.slice([\n                        o * r.shape[0],\n                        a * r.shape[1]\n                    ], [\n                        r.shape[0],\n                        r.shape[1]\n                    ]));\n                    else if (3 === r.rank) for(o = 0; o < e[0]; ++o)for(a = 0; a < e[1]; ++a)for(var i = 0; i < e[2]; ++i)n = n.add(t.slice([\n                        o * r.shape[0],\n                        a * r.shape[1],\n                        i * r.shape[2]\n                    ], [\n                        r.shape[0],\n                        r.shape[1],\n                        r.shape[2]\n                    ]));\n                    else {\n                        if (4 !== r.rank) throw new Error(\"Gradient for tile operation is not implemented for rank-\" + r.rank + \" tensors yet.\");\n                        for(o = 0; o < e[0]; ++o)for(a = 0; a < e[1]; ++a)for(i = 0; i < e[2]; ++i)for(var s = 0; s < e[3]; ++s)n = n.add(t.slice([\n                            o * r.shape[0],\n                            a * r.shape[1],\n                            i * r.shape[2],\n                            s * r.shape[3]\n                        ], [\n                            r.shape[0],\n                            r.shape[1],\n                            r.shape[2],\n                            r.shape[3]\n                        ]));\n                    }\n                    return n;\n                }\n            };\n        }, \"Tile\", o, r);\n    }\n}), Wr = An({\n    truncatedNormal_: function(t, e, n, r, o) {\n        if (void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && \"bool\" === r) throw new Error(\"Unsupported data type \" + r);\n        for(var a = new lr(e, n, r, !0, o), i = dr(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n}), Ur = An({\n    unstack_: function(t, e) {\n        void 0 === e && (e = 0), e = e || 0;\n        var n = mn(t, \"x\", \"unstack\");\n        C(e >= -n.shape.length && e < n.shape.length, function() {\n            return \"Axis = \" + e + \" is not in [-\" + n.shape.length + \", \" + n.shape.length + \")\";\n        }), e < 0 && (e += n.shape.length);\n        var r = {\n            axis: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.unstack(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return Pr(t, e);\n                }\n            };\n        }, \"Unpack\", r);\n    }\n}), Vr = function(t, e) {\n    return n(this, void 0, void 0, function() {\n        var n, o, a, i, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = mn(t, \"x\", \"setdiff1d\"), o = mn(e, \"y\", \"setdiff1d\"), C(n.dtype === o.dtype, function() {\n                        return \"x and y should have the same dtype, but got x (\" + n.dtype + \") and y (\" + o.dtype + \").\";\n                    }), C(1 === n.rank, function() {\n                        return \"x should be 1D tensor, but got x (\" + n.shape + \").\";\n                    }), C(1 === o.rank, function() {\n                        return \"y should be 1D tensor, but got y (\" + o.shape + \").\";\n                    }), [\n                        4,\n                        n.data()\n                    ];\n                case 1:\n                    return a = r.sent(), [\n                        4,\n                        o.data()\n                    ];\n                case 2:\n                    for(i = r.sent(), s = new Set(i), u = 0, h = 0; h < a.length; h++)s.has(a[h]) || u++;\n                    for(c = new gt([\n                        u\n                    ], n.dtype), l = new gt([\n                        u\n                    ], \"int32\"), h = 0, f = 0; h < a.length; h++)s.has(a[h]) || (c.values[f] = a[h], l.values[f] = h, f++);\n                    return [\n                        2,\n                        [\n                            c.toTensor(),\n                            l.toTensor()\n                        ]\n                    ];\n            }\n        });\n    });\n};\nfunction zr(t, e, n, r) {\n    void 0 === r && (r = !0);\n    var o = [];\n    if (r) (o = o.concat(e.slice(0))).push(t[0] / n), o = o.concat(t.slice(1));\n    else {\n        o = o.concat(t[0]);\n        for(var a = e.length, i = 0; i < a; ++i)o = o.concat([\n            t[i + 1] / e[i],\n            e[i]\n        ]);\n        o = o.concat(t.slice(a + 1));\n    }\n    return o;\n}\nfunction Gr(t, e, n) {\n    void 0 === n && (n = !0);\n    var r = [];\n    if (n) {\n        r.push(e);\n        for(var o = e + 1; o < t; ++o)o <= 2 * e ? (r.push(o), r.push(o - (e + 1))) : r.push(o);\n    } else {\n        var a = [], i = [];\n        for(o = 1; o < t; ++o)o >= 2 * e + 1 || o % 2 == 1 ? i.push(o) : a.push(o);\n        r.push.apply(r, a), r.push(0), r.push.apply(r, i);\n    }\n    return r;\n}\nfunction Hr(t, e, n, r) {\n    void 0 === r && (r = !0);\n    var o = [];\n    r ? o.push(t[0] / n) : o.push(t[0] * n);\n    for(var a = 1; a < t.length; ++a)a <= e.length ? r ? o.push(e[a - 1] * t[a]) : o.push(t[a] / e[a - 1]) : o.push(t[a]);\n    return o;\n}\nfunction qr(t, e) {\n    for(var n = [\n        0\n    ], r = 0; r < e; ++r)n.push(t[r][0]);\n    return n;\n}\nfunction Kr(t, e, n) {\n    for(var r = t.slice(0, 1), o = 0; o < n; ++o)r.push(t[o + 1] - e[o][0] - e[o][1]);\n    return r;\n}\nfunction jr(t, e) {\n    if (t.rank < 1) throw new Error(\"tf.gatherND() expects the input to be rank 1 or higher, but the rank was \" + t.rank + \".\");\n    if (e.rank < 1) throw new Error(\"tf.gatherND() expects the indices to be rank 1 or higher, but the rank was \" + e.rank + \".\");\n    if (\"int32\" !== e.dtype) throw new Error(\"tf.gatherND() expects the indices to be int32 type, but the dtype was \" + e.dtype + \".\");\n    if (e.shape[e.rank - 1] > t.rank) throw new Error(\"index innermost dimension length must be <= tensor rank; saw: \" + e.shape[e.rank - 1] + \" vs. \" + t.rank);\n    if (0 === t.size) throw new Error(\"Requested more than 0 entries, but input is empty. Input shape: \" + t.shape + \".\");\n    for(var n = e.shape, r = n[n.length - 1], o = 1, a = 0; a < n.length - 1; ++a)o *= n[a];\n    var i = t.shape, s = n.slice();\n    s.pop();\n    var u = 1;\n    for(a = r; a < t.rank; ++a)u *= i[a], s.push(i[a]);\n    var c = $(t.shape).map(function(t) {\n        return t / u;\n    }).concat([\n        1\n    ]).slice(0, r);\n    return [\n        s,\n        o,\n        u,\n        c\n    ];\n}\nvar Xr = Object.freeze({\n    prepareAndValidate: jr\n}), Yr = 30;\nfunction $r(t) {\n    return t <= Yr ? t : Y(t, Math.floor(Math.sqrt(t)));\n}\nfunction Qr(t, e, n) {\n    var r = e.rank > 1 ? e.shape[e.rank - 1] : 1, o = e.rank > 1 ? e.rank - 1 : 1, a = \"Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: \" + n.shape + \", indices.shape: \" + e.shape + \", shape: \" + t + \", sliceDim: \" + r + \", and batchDim: \" + o + \".\";\n    if (n.rank < o) throw new Error(a + \" update.rank < \" + o + \". \");\n    if (t.length < r + (n.rank - o)) throw new Error(a + \" Output shape length < \" + (r + (n.rank - o)));\n    if (n.rank !== o + t.length - r) throw new Error(a + \" update.rank != \" + (o + t.length - r));\n    for(var i = 0; i < o; ++i)if (n.shape[i] !== e.shape[i]) throw new Error(a + \" updates.shape[\" + i + \"] (\" + n.shape[i] + \") != indices.shape[\" + i + \"] (\" + e.shape[i] + \").\");\n    for(i = 0; i < n.rank - o; ++i)if (n.shape[i + o] !== t[i + r]) throw new Error(a + \" updates.shape[\" + (i + o) + \"] (\" + n.shape[i + o] + \") != shape[\" + (i + o) + \"] (\" + t[i + o] + \")\");\n}\nfunction Jr(t, e, n) {\n    if (e.rank < 1) throw new Error(\"tf.scatterND() expects the indices to be rank 1 or higher, but the rank was \" + e.rank + \".\");\n    if (t.rank < 1) throw new Error(\"tf.scatterND() expects the updates to be rank 1 or higher, but the rank was \" + t.rank + \".\");\n    if (\"int32\" !== e.dtype) throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \" + e.dtype);\n    if (n.length < 1) throw new Error(\"Output rank must be greater or equal to 1, but got shape: \" + n);\n    if (0 === n.length) {\n        if (0 === e.size) throw new Error(\"Indices specified for empty output. indices shape: \" + e.shape);\n        if (0 === t.size) throw new Error(\"Updates specified for empty output. updates shape: \" + t.shape);\n    }\n    Qr(n, e, t);\n}\nfunction Zr(t, e, n) {\n    for(var r = e.shape.length, o = r > 1 ? e.shape[r - 1] : 1, a = n.length, i = 1, s = o; s < a; ++s)i *= n[s];\n    var u = o < 1 ? 1 : o;\n    return {\n        sliceRank: o,\n        numUpdates: k(e.shape) / u,\n        sliceSize: i,\n        strides: $(n.slice(0, o)).concat([\n            1\n        ]),\n        outputSize: k(n)\n    };\n}\nvar to = Object.freeze({\n    validateUpdateShape: Qr,\n    validateInput: Jr,\n    calculateShapes: Zr\n});\nfunction eo(t, e, n) {\n    C(t.rank === e.length, function() {\n        return \"Error in slice\" + t.rank + \"D: Length of begin \" + e + \" must match the rank of the array (\" + t.rank + \").\";\n    }), C(t.rank === n.length, function() {\n        return \"Error in slice\" + t.rank + \"D: Length of size \" + n + \" must match the rank of the array (\" + t.rank + \").\";\n    });\n    for(var r = function(r) {\n        C(e[r] + n[r] <= t.shape[r], function() {\n            return \"Error in slice\" + t.rank + \"D: begin[\" + r + \"] + size[\" + r + \"] (\" + (e[r] + n[r]) + \") would overflow input.shape[\" + r + \"] (\" + t.shape[r] + \")\";\n        });\n    }, o = 0; o < t.rank; ++o)r(o);\n}\nfunction no(t) {\n    for(var e = [], n = 0; t > 0;)1 & t && e.push(n), t /= 2, n++;\n    return e;\n}\nfunction ro(t, e, n) {\n    for(var r = [], o = 0; o < t.length; o++)r[o] = Math.ceil((e[o] - t[o]) / n[o]);\n    return r;\n}\nfunction oo(t, e, n, r, o) {\n    var a = e[o], i = n[o] || 1;\n    (t & 1 << o || null == a) && (a = i > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\n    var s = r[o];\n    return a < 0 && (a += s), a = x(0, a, s - 1);\n}\nfunction ao(t, e, n, r, o) {\n    var a = e[o], i = n[o] || 1;\n    (t & 1 << o || null == a) && (a = i > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);\n    var s = r[o];\n    return a < 0 && (a += s), a = i > 0 ? x(0, a, s) : x(-1, a, s - 1);\n}\nfunction io(t, e, n) {\n    for(var r = n.length, o = 0; o < n.length; o++)if (n[o] > 1) {\n        r = o;\n        break;\n    }\n    for(o = r + 1; o < n.length; o++)if (e[o] > 0 || n[o] !== t[o]) return !1;\n    return !0;\n}\nfunction so(t, e) {\n    for(var n = t.length > 0 ? t[t.length - 1] : 1, r = 0; r < t.length - 1; r++)n += t[r] * e[r];\n    return n;\n}\nvar uo = Object.freeze({\n    assertParamsValid: eo,\n    maskToAxes: no,\n    computeOutShape: ro,\n    startForAxis: oo,\n    stopForAxis: ao,\n    isSliceContinous: io,\n    computeFlatOffset: so\n});\nfunction co(t) {\n    return C(X(t), function() {\n        return \"The f passed in grad(f) must be a function\";\n    }), function(e, n) {\n        var r = mn(e, \"x\", \"tf.grad\", null), o = null != n ? mn(n, \"dy\", \"tf.grad\") : null;\n        return Lt.tidy(function() {\n            var e = Lt.gradients(function() {\n                return t(r);\n            }, [\n                r\n            ], o), n = e.value, a = e.grads;\n            return null != o && E(n.shape, o.shape, \"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"), mo(a), a[0];\n        });\n    };\n}\nfunction lo(t) {\n    return C(X(t), function() {\n        return \"The f passed in grads(f) must be a function\";\n    }), function(e, n) {\n        C(Array.isArray(e), function() {\n            return \"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\";\n        });\n        var r = gn(e, \"args\", \"tf.grads\", null), o = null != n ? mn(n, \"dy\", \"tf.grads\") : null;\n        return Lt.tidy(function() {\n            var e = Lt.gradients(function() {\n                return t.apply(void 0, r);\n            }, r, o), n = e.value, a = e.grads;\n            return null != o && E(n.shape, o.shape, \"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"), mo(a), a;\n        });\n    };\n}\nfunction ho(t) {\n    return C(X(t), function() {\n        return \"The f passed in valueAndGrad(f) must be a function\";\n    }), function(e, n) {\n        C(e instanceof wt, function() {\n            return \"The x passed in valueAndGrad(f)(x) must be a tensor\";\n        }), C(null == n || n instanceof wt, function() {\n            return \"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\";\n        });\n        var r = Lt.gradients(function() {\n            return t(e);\n        }, [\n            e\n        ], n), o = r.grads, a = r.value;\n        return mo(o), {\n            grad: o[0],\n            value: a\n        };\n    };\n}\nfunction fo(t) {\n    return C(X(t), function() {\n        return \"The f passed in valueAndGrads(f) must be a function\";\n    }), function(e, n) {\n        C(Array.isArray(e) && e.every(function(t) {\n            return t instanceof wt;\n        }), function() {\n            return \"The args passed in valueAndGrads(f)(args) must be array of tensors\";\n        }), C(null == n || n instanceof wt, function() {\n            return \"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\";\n        });\n        var r = Lt.gradients(function() {\n            return t.apply(void 0, e);\n        }, e, n);\n        return null != n && E(r.value.shape, n.shape, \"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"), mo(r.grads), r;\n    };\n}\nfunction po(t, e) {\n    C(X(t), function() {\n        return \"The f passed in variableGrads(f) must be a function\";\n    }), C(null == e || Array.isArray(e) && e.every(function(t) {\n        return t instanceof St;\n    }), function() {\n        return \"The varList passed in variableGrads(f, varList) must be an array of variables\";\n    });\n    var n = null != e;\n    if (!n) for(var r in e = [], Lt.registeredVariables)e.push(Lt.registeredVariables[r]);\n    var o = n ? e.filter(function(t) {\n        return !t.trainable;\n    }) : null, a = e.length;\n    C((e = e.filter(function(t) {\n        return t.trainable;\n    })).length > 0, function() {\n        return \"variableGrads() expects at least one of the input variables to be trainable, but none of the \" + a + \" variables is trainable.\";\n    });\n    var i = Lt.gradients(t, e, null, !0), s = i.value, u = i.grads;\n    C(u.some(function(t) {\n        return null != t;\n    }), function() {\n        return \"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\";\n    }), C(0 === s.rank, function() {\n        return \"The f passed in variableGrads(f) must return a scalar, but it returned a rank-\" + s.rank + \" tensor\";\n    });\n    var c = {};\n    return e.forEach(function(t, e) {\n        null != u[e] && (c[t.name] = u[e]);\n    }), null != o && o.forEach(function(t) {\n        return c[t.name] = null;\n    }), {\n        value: s,\n        grads: c\n    };\n}\nfunction vo(t) {\n    return Lt.customGrad(t);\n}\nfunction mo(t) {\n    if (t.filter(function(t) {\n        return null == t;\n    }).length > 0) throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");\n}\nvar go = An({\n    softmax_: function(t, e) {\n        void 0 === e && (e = -1);\n        var n = mn(t, \"logits\", \"softmax\", \"float32\");\n        if (-1 === e && (e = n.rank - 1), e !== n.rank - 1) throw Error(\"Softmax along a non-last dimension is not yet supported. Logits was rank \" + n.rank + \" and dim was \" + e);\n        return Lt.runKernelFunc(function(t, r) {\n            var o = t.softmax(n, e);\n            return r([\n                o\n            ]), o;\n        }, {\n            logits: n\n        }, function(t, n) {\n            var r = n[0], o = t.mul(r);\n            return {\n                logits: function() {\n                    return o.sub(o.sum([\n                        e\n                    ], !0).mul(r));\n                }\n            };\n        }, \"Softmax\", {\n            dim: e\n        }, [], [\n            !0\n        ]);\n    }\n}), yo = An({\n    logSoftmax_: function(t, e) {\n        void 0 === e && (e = -1);\n        var n = mn(t, \"logits\", \"logSoftmax\");\n        if (-1 === e && (e = n.rank - 1), e !== n.rank - 1) throw Error(\"Log Softmax along a non-last dimension is not yet supported. Logits was rank \" + n.rank + \" and axis was \" + e);\n        return vo(function(t, n) {\n            var r = t.max(e, !0), o = t.sub(r), a = o.toFloat().sub(o.exp().sum(e, !0).log());\n            n([\n                a\n            ]);\n            return {\n                value: a,\n                gradFunc: function(t, n) {\n                    var r = n[0].exp();\n                    return t.sub(t.sum(e, !0).mul(r));\n                }\n            };\n        })(n);\n    }\n}), xo = function() {\n    function t(t, e) {\n        this.backend = t, this.dataMover = e, this.data = new WeakMap, this.dataIdsCount = 0;\n    }\n    return t.prototype.get = function(t) {\n        return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);\n    }, t.prototype.set = function(t, e) {\n        this.dataIdsCount++, this.data.set(t, e);\n    }, t.prototype.has = function(t) {\n        return this.data.has(t);\n    }, t.prototype.delete = function(t) {\n        return this.dataIdsCount--, this.data.delete(t);\n    }, t.prototype.numDataIds = function() {\n        return this.dataIdsCount;\n    }, t;\n}(), bo = function() {\n    function t() {}\n    return t.prototype.time = function(t) {\n        return wo(\"time\");\n    }, t.prototype.read = function(t) {\n        return wo(\"read\");\n    }, t.prototype.readSync = function(t) {\n        return wo(\"readSync\");\n    }, t.prototype.numDataIds = function() {\n        return wo(\"numDataIds\");\n    }, t.prototype.disposeData = function(t) {\n        return wo(\"disposeData\");\n    }, t.prototype.write = function(t, e, n) {\n        return wo(\"write\");\n    }, t.prototype.move = function(t, e, n, r) {\n        return wo(\"move\");\n    }, t.prototype.memory = function() {\n        return wo(\"memory\");\n    }, t.prototype.floatPrecision = function() {\n        return wo(\"floatPrecision\");\n    }, t.prototype.epsilon = function() {\n        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;\n    }, t.prototype.batchMatMul = function(t, e, n, r) {\n        return wo(\"batchMatMul\");\n    }, t.prototype.fusedBatchMatMul = function(t) {\n        t.a, t.b, t.transposeA, t.transposeB, t.bias, t.activation, t.preluActivationWeights;\n        return wo(\"fusedBatchMatMul\");\n    }, t.prototype.slice = function(t, e, n) {\n        return wo(\"slice\");\n    }, t.prototype.stridedSlice = function(t, e, n, r) {\n        return wo(\"stridedSlice\");\n    }, t.prototype.unstack = function(t, e) {\n        return wo(\"unstack\");\n    }, t.prototype.reverse = function(t, e) {\n        return wo(\"reverse\");\n    }, t.prototype.concat = function(t, e) {\n        return wo(\"concat\");\n    }, t.prototype.neg = function(t) {\n        return wo(\"neg\");\n    }, t.prototype.add = function(t, e) {\n        return wo(\"add\");\n    }, t.prototype.addN = function(t) {\n        return wo(\"addN\");\n    }, t.prototype.subtract = function(t, e) {\n        return wo(\"subtract\");\n    }, t.prototype.multiply = function(t, e) {\n        return wo(\"multiply\");\n    }, t.prototype.realDivide = function(t, e) {\n        return wo(\"realDivide\");\n    }, t.prototype.floorDiv = function(t, e) {\n        return wo(\"floorDiv\");\n    }, t.prototype.sum = function(t, e) {\n        return wo(\"sum\");\n    }, t.prototype.prod = function(t, e) {\n        return wo(\"prod\");\n    }, t.prototype.unsortedSegmentSum = function(t, e, n) {\n        return wo(\"unsortedSegmentSum\");\n    }, t.prototype.argMin = function(t, e) {\n        return wo(\"argMin\");\n    }, t.prototype.argMax = function(t, e) {\n        return wo(\"argMax\");\n    }, t.prototype.equal = function(t, e) {\n        return wo(\"equal\");\n    }, t.prototype.notEqual = function(t, e) {\n        return wo(\"notEqual\");\n    }, t.prototype.less = function(t, e) {\n        return wo(\"less\");\n    }, t.prototype.lessEqual = function(t, e) {\n        return wo(\"lessEqual\");\n    }, t.prototype.greater = function(t, e) {\n        return wo(\"greater\");\n    }, t.prototype.greaterEqual = function(t, e) {\n        return wo(\"greaterEqual\");\n    }, t.prototype.logicalNot = function(t) {\n        return wo(\"logicalNot\");\n    }, t.prototype.logicalAnd = function(t, e) {\n        return wo(\"logicalAnd\");\n    }, t.prototype.logicalOr = function(t, e) {\n        return wo(\"logicalOr\");\n    }, t.prototype.where = function(t) {\n        return wo(\"where\");\n    }, t.prototype.select = function(t, e, n) {\n        return wo(\"select\");\n    }, t.prototype.topk = function(t, e, n) {\n        return wo(\"topk\");\n    }, t.prototype.min = function(t, e) {\n        return wo(\"min\");\n    }, t.prototype.minimum = function(t, e) {\n        return wo(\"minimum\");\n    }, t.prototype.mod = function(t, e) {\n        return wo(\"mod\");\n    }, t.prototype.max = function(t, e) {\n        return wo(\"max\");\n    }, t.prototype.maximum = function(t, e) {\n        return wo(\"maximum\");\n    }, t.prototype.all = function(t, e) {\n        return wo(\"all\");\n    }, t.prototype.any = function(t, e) {\n        return wo(\"any\");\n    }, t.prototype.squaredDifference = function(t, e) {\n        return wo(\"squaredDifference\");\n    }, t.prototype.ceil = function(t) {\n        return wo(\"ceil\");\n    }, t.prototype.floor = function(t) {\n        return wo(\"floor\");\n    }, t.prototype.round = function(t) {\n        return wo(\"round\");\n    }, t.prototype.sign = function(t) {\n        return wo(\"sign\");\n    }, t.prototype.isNaN = function(t) {\n        return wo(\"isNaN\");\n    }, t.prototype.isInf = function(t) {\n        return wo(\"isInf\");\n    }, t.prototype.isFinite = function(t) {\n        return wo(\"isFinite\");\n    }, t.prototype.pow = function(t, e) {\n        return wo(\"pow\");\n    }, t.prototype.exp = function(t) {\n        return wo(\"exp\");\n    }, t.prototype.expm1 = function(t) {\n        return wo(\"expm1\");\n    }, t.prototype.softmax = function(t, e) {\n        return wo(\"softmax\");\n    }, t.prototype.log = function(t) {\n        return wo(\"log\");\n    }, t.prototype.log1p = function(t) {\n        return wo(\"log1p\");\n    }, t.prototype.sqrt = function(t) {\n        return wo(\"sqrt\");\n    }, t.prototype.rsqrt = function(t) {\n        return wo(\"rsqrt\");\n    }, t.prototype.square = function(t) {\n        return wo(\"square\");\n    }, t.prototype.reciprocal = function(t) {\n        return wo(\"reciprocal\");\n    }, t.prototype.relu = function(t) {\n        return wo(\"relu\");\n    }, t.prototype.relu6 = function(t) {\n        return wo(\"relu6\");\n    }, t.prototype.prelu = function(t, e) {\n        return wo(\"prelu\");\n    }, t.prototype.elu = function(t) {\n        return wo(\"elu\");\n    }, t.prototype.eluDer = function(t, e) {\n        return wo(\"eluDer\");\n    }, t.prototype.selu = function(t) {\n        return wo(\"selu\");\n    }, t.prototype.int = function(t) {\n        return wo(\"int\");\n    }, t.prototype.clip = function(t, e, n) {\n        return wo(\"clip\");\n    }, t.prototype.abs = function(t) {\n        return wo(\"abs\");\n    }, t.prototype.complexAbs = function(t) {\n        return wo(\"complexAbs\");\n    }, t.prototype.sigmoid = function(t) {\n        return wo(\"sigmoid\");\n    }, t.prototype.softplus = function(t) {\n        return wo(\"softplus\");\n    }, t.prototype.sin = function(t) {\n        return wo(\"sin\");\n    }, t.prototype.cos = function(t) {\n        return wo(\"cos\");\n    }, t.prototype.tan = function(t) {\n        return wo(\"tan\");\n    }, t.prototype.asin = function(t) {\n        return wo(\"asin\");\n    }, t.prototype.acos = function(t) {\n        return wo(\"acos\");\n    }, t.prototype.atan = function(t) {\n        return wo(\"atan\");\n    }, t.prototype.atan2 = function(t, e) {\n        return wo(\"atan2\");\n    }, t.prototype.sinh = function(t) {\n        return wo(\"sinh\");\n    }, t.prototype.cosh = function(t) {\n        return wo(\"cosh\");\n    }, t.prototype.tanh = function(t) {\n        return wo(\"tanh\");\n    }, t.prototype.asinh = function(t) {\n        return wo(\"asinh\");\n    }, t.prototype.acosh = function(t) {\n        return wo(\"acosh\");\n    }, t.prototype.atanh = function(t) {\n        return wo(\"atanh\");\n    }, t.prototype.erf = function(t) {\n        return wo(\"erf\");\n    }, t.prototype.step = function(t, e) {\n        return wo(\"step\");\n    }, t.prototype.fusedConv2d = function(t) {\n        t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights;\n        return wo(\"fusedConv2d\");\n    }, t.prototype.conv2d = function(t, e, n) {\n        return wo(\"conv2d\");\n    }, t.prototype.conv2dDerInput = function(t, e, n) {\n        return wo(\"conv2dDerInput\");\n    }, t.prototype.conv2dDerFilter = function(t, e, n) {\n        return wo(\"conv2dDerFilter\");\n    }, t.prototype.fusedDepthwiseConv2D = function(t) {\n        t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights;\n        return wo(\"fusedDepthwiseConv2D\");\n    }, t.prototype.depthwiseConv2D = function(t, e, n) {\n        return wo(\"depthwiseConv2D\");\n    }, t.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        return wo(\"depthwiseConv2DDerInput\");\n    }, t.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        return wo(\"depthwiseConv2DDerFilter\");\n    }, t.prototype.conv3d = function(t, e, n) {\n        return wo(\"conv3d\");\n    }, t.prototype.conv3dDerInput = function(t, e, n) {\n        return wo(\"conv3dDerInput\");\n    }, t.prototype.conv3dDerFilter = function(t, e, n) {\n        return wo(\"conv3dDerFilter\");\n    }, t.prototype.maxPool = function(t, e) {\n        return wo(\"maxPool\");\n    }, t.prototype.maxPoolBackprop = function(t, e, n, r) {\n        return wo(\"maxPoolBackprop\");\n    }, t.prototype.avgPool = function(t, e) {\n        return wo(\"avgPool\");\n    }, t.prototype.avgPoolBackprop = function(t, e, n) {\n        return wo(\"avgPoolBackprop\");\n    }, t.prototype.avgPool3d = function(t, e) {\n        return wo(\"avgPool3d\");\n    }, t.prototype.avgPool3dBackprop = function(t, e, n) {\n        return wo(\"avgPool3dBackprop\");\n    }, t.prototype.maxPool3d = function(t, e) {\n        return wo(\"maxPool3d\");\n    }, t.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        return wo(\"maxPool3dBackprop\");\n    }, t.prototype.reshape = function(t, e) {\n        return wo(\"reshape\");\n    }, t.prototype.cast = function(t, e) {\n        return wo(\"cast\");\n    }, t.prototype.tile = function(t, e) {\n        return wo(\"tile\");\n    }, t.prototype.pad = function(t, e, n) {\n        return wo(\"pad\");\n    }, t.prototype.transpose = function(t, e) {\n        return wo(\"transpose\");\n    }, t.prototype.gather = function(t, e, n) {\n        return wo(\"gather\");\n    }, t.prototype.gatherND = function(t, e) {\n        return wo(\"gatherND\");\n    }, t.prototype.scatterND = function(t, e, n) {\n        return wo(\"scatterND\");\n    }, t.prototype.batchToSpaceND = function(t, e, n) {\n        return wo(\"batchToSpaceND\");\n    }, t.prototype.spaceToBatchND = function(t, e, n) {\n        return wo(\"spaceToBatchND\");\n    }, t.prototype.resizeBilinear = function(t, e, n, r) {\n        return wo(\"resizeBilinear\");\n    }, t.prototype.resizeBilinearBackprop = function(t, e, n) {\n        return wo(\"resizeBilinearBackprop\");\n    }, t.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        return wo(\"resizeNearestNeighbor\");\n    }, t.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        return wo(\"resizeNearestNeighborBackprop\");\n    }, t.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        return wo(\"batchNormalization\");\n    }, t.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        return wo(\"localResponseNormalization4D\");\n    }, t.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        return wo(\"LRNGrad\");\n    }, t.prototype.multinomial = function(t, e, n, r) {\n        return wo(\"multinomial\");\n    }, t.prototype.oneHot = function(t, e, n, r) {\n        return wo(\"oneHot\");\n    }, t.prototype.cumsum = function(t, e, n, r) {\n        return wo(\"cumsum\");\n    }, t.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return wo(\"nonMaxSuppression\");\n    }, t.prototype.fft = function(t) {\n        return wo(\"fft\");\n    }, t.prototype.ifft = function(t) {\n        return wo(\"ifft\");\n    }, t.prototype.complex = function(t, e) {\n        return wo(\"complex\");\n    }, t.prototype.real = function(t) {\n        return wo(\"real\");\n    }, t.prototype.imag = function(t) {\n        return wo(\"imag\");\n    }, t.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        return wo(\"cropAndResize\");\n    }, t.prototype.depthToSpace = function(t, e, n) {\n        return wo(\"depthToSpace\");\n    }, t.prototype.split = function(t, e, n) {\n        return wo(\"split\");\n    }, t.prototype.sparseToDense = function(t, e, n, r) {\n        return wo(\"sparseToDense\");\n    }, t.prototype.diag = function(t) {\n        return wo(\"diag\");\n    }, t.prototype.fill = function(t, e, n) {\n        return wo(\"fill\");\n    }, t.prototype.onesLike = function(t) {\n        return wo(\"onesLike\");\n    }, t.prototype.zerosLike = function(t) {\n        return wo(\"zerosLike\");\n    }, t.prototype.linspace = function(t, e, n) {\n        return wo(\"linspace\");\n    }, t.prototype.dispose = function() {\n        return wo(\"dispose\");\n    }, t;\n}();\nfunction wo(t) {\n    throw new Error(\"'\" + t + \"' not yet implemented or not found in the registry. Did you forget to import the kernel?\");\n}\nfunction Co(t, e) {\n    for(var n = t.length, r = [], o = 0; o < n; o++){\n        var a = n - 1 - o, i = t[a] || 1;\n        (e[e.length - 1 - o] || 1) > 1 && 1 === i && r.unshift(a);\n    }\n    return r;\n}\nfunction Eo(t, e) {\n    for(var n = [], r = 0; r < e.length; r++){\n        var o = t[t.length - r - 1], a = e.length - r - 1, i = e[a];\n        (null == o || 1 === o && i > 1) && n.unshift(a);\n    }\n    return n;\n}\nfunction Ro(t, e) {\n    for(var n = [], r = Math.max(t.length, e.length), o = 0; o < r; o++){\n        var a = t[t.length - o - 1];\n        null == a && (a = 1);\n        var i = e[e.length - o - 1];\n        if (null == i && (i = 1), 1 === a) n.unshift(i);\n        else if (1 === i) n.unshift(a);\n        else {\n            if (a !== i) throw Error(\"Operands could not be broadcast together with shapes \" + t + \" and \" + e + \".\");\n            n.unshift(a);\n        }\n    }\n    return n;\n}\nfunction Io(t, e, n, r, o, a, i) {\n    void 0 === i && (i = \"channelsLast\");\n    var s, u = To(e), c = u[0], l = u[1];\n    if (\"channelsLast\" === i) s = [\n        c,\n        l,\n        t[3],\n        t[3]\n    ];\n    else {\n        if (\"channelsFirst\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        s = [\n            c,\n            l,\n            t[1],\n            t[1]\n        ];\n    }\n    return So(t, s, n, r, o, a, !1, i);\n}\nfunction ko(t, e, n, r, o, a, i) {\n    void 0 === i && (i = \"NDHWC\");\n    var s, u, c = No(e), l = c[0], h = c[1], f = c[2];\n    if (\"NDHWC\" === i) u = \"channelsLast\", s = [\n        l,\n        h,\n        f,\n        t[4],\n        t[4]\n    ];\n    else {\n        if (\"NCDHW\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        u = \"channelsFirst\", s = [\n            l,\n            h,\n            f,\n            t[1],\n            t[1]\n        ];\n    }\n    return Ao(t, s, n, r, o, !1, u, a);\n}\nfunction So(t, e, n, r, o, a, i, s) {\n    void 0 === i && (i = !1), void 0 === s && (s = \"channelsLast\");\n    var u = [\n        -1,\n        -1,\n        -1,\n        -1\n    ], c = u[0], l = u[1], h = u[2], f = u[3];\n    if (\"channelsLast\" === s) c = t[0], l = t[1], h = t[2], f = t[3];\n    else {\n        if (\"channelsFirst\" !== s) throw new Error(\"Unknown dataFormat \" + s);\n        c = t[0], f = t[1], l = t[2], h = t[3];\n    }\n    var d, p = e[0], v = e[1], m = e[3], g = To(n), y = g[0], x = g[1], b = To(r), w = b[0], E = b[1], R = Fo(p, w), I = Fo(v, E), k = function(t, e, n, r, o, a, i, s) {\n        var u, c, l;\n        if (\"number\" == typeof t) {\n            u = {\n                top: t,\n                bottom: t,\n                left: t,\n                right: t,\n                type: 0 === t ? \"VALID\" : \"NUMBER\"\n            };\n            var h = function(t, e, n, r, o) {\n                null == r && (r = Do(t, e, n));\n                var a = t[0], i = t[1], s = _o((a - e + 2 * r) / n + 1, o);\n                C(A(s), function() {\n                    return \"The output # of rows (\" + s + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var u = _o((i - e + 2 * r) / n + 1, o);\n                return C(A(u), function() {\n                    return \"The output # of columns (\" + u + \") must be an integer. Change the stride and/or zero pad parameters\";\n                }), [\n                    s,\n                    u\n                ];\n            }([\n                e,\n                n\n            ], a, r, t, s);\n            c = h[0], l = h[1];\n        } else if (\"same\" === t) {\n            c = Math.ceil(e / r), l = Math.ceil(n / o);\n            var f = Math.max(0, (c - 1) * r + a - e), d = Math.max(0, (l - 1) * o + i - n), p = Math.floor(f / 2), v = f - p, m = Math.floor(d / 2);\n            u = {\n                top: p,\n                bottom: v,\n                left: m,\n                right: d - m,\n                type: \"SAME\"\n            };\n        } else {\n            if (\"valid\" !== t) throw Error(\"Unknown padding parameter: \" + t);\n            u = {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                type: \"VALID\"\n            }, c = Math.ceil((e - a + 1) / r), l = Math.ceil((n - i + 1) / o);\n        }\n        return {\n            padInfo: u,\n            outHeight: c,\n            outWidth: l\n        };\n    }(o, l, h, y, x, R, I, a), S = k.padInfo, D = k.outHeight, T = k.outWidth, N = i ? m * f : m;\n    return \"channelsFirst\" === s ? d = [\n        c,\n        N,\n        D,\n        T\n    ] : \"channelsLast\" === s && (d = [\n        c,\n        D,\n        T,\n        N\n    ]), {\n        batchSize: c,\n        dataFormat: s,\n        inHeight: l,\n        inWidth: h,\n        inChannels: f,\n        outHeight: D,\n        outWidth: T,\n        outChannels: N,\n        padInfo: S,\n        strideHeight: y,\n        strideWidth: x,\n        filterHeight: p,\n        filterWidth: v,\n        effectiveFilterHeight: R,\n        effectiveFilterWidth: I,\n        dilationHeight: w,\n        dilationWidth: E,\n        inShape: t,\n        outShape: d,\n        filterShape: e\n    };\n}\nfunction Ao(t, e, n, r, o, a, i, s) {\n    void 0 === a && (a = !1), void 0 === i && (i = \"channelsLast\");\n    var u = [\n        -1,\n        -1,\n        -1,\n        -1,\n        -1\n    ], c = u[0], l = u[1], h = u[2], f = u[3], d = u[4];\n    if (\"channelsLast\" === i) c = t[0], l = t[1], h = t[2], f = t[3], d = t[4];\n    else {\n        if (\"channelsFirst\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        c = t[0], d = t[1], l = t[2], h = t[3], f = t[4];\n    }\n    var p, v = e[0], m = e[1], g = e[2], y = e[4], x = No(n), b = x[0], w = x[1], E = x[2], R = No(r), I = R[0], k = R[1], S = R[2], D = Fo(v, I), T = Fo(m, k), N = Fo(g, S), F = function(t, e, n, r, o, a, i, s, u, c, l) {\n        var h, f, d, p;\n        if (\"number\" == typeof t) {\n            h = {\n                top: t,\n                bottom: t,\n                left: t,\n                right: t,\n                front: t,\n                back: t,\n                type: 0 === t ? \"VALID\" : \"NUMBER\"\n            };\n            var v = function(t, e, n, r, o, a) {\n                null == o && (o = Do(t, e, r));\n                var i = t[0], s = t[1], u = t[2], c = _o((i - e + 2 * o) / r + 1, a);\n                C(A(c), function() {\n                    return \"The output # of depths (\" + c + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var l = _o((s - e + 2 * o) / r + 1, a);\n                C(A(l), function() {\n                    return \"The output # of rows (\" + l + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var h = _o((u - e + 2 * o) / r + 1, a);\n                return C(A(h), function() {\n                    return \"The output # of columns (\" + h + \") must be an integer. Change the stride and/or zero pad parameters\";\n                }), [\n                    c,\n                    l,\n                    h,\n                    n\n                ];\n            }([\n                e,\n                n,\n                r,\n                1\n            ], s, 1, o, t, l);\n            f = v[0], d = v[1], p = v[2];\n        } else if (\"same\" === t) {\n            f = Math.ceil(e / o), d = Math.ceil(n / a), p = Math.ceil(r / i);\n            var m = (f - 1) * o + s - e, g = (d - 1) * a + u - n, y = (p - 1) * i + c - r, x = Math.floor(m / 2), b = m - x, w = Math.floor(g / 2), E = g - w, R = Math.floor(y / 2);\n            h = {\n                top: w,\n                bottom: E,\n                left: R,\n                right: y - R,\n                front: x,\n                back: b,\n                type: \"SAME\"\n            };\n        } else {\n            if (\"valid\" !== t) throw Error(\"Unknown padding parameter: \" + t);\n            h = {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                front: 0,\n                back: 0,\n                type: \"VALID\"\n            }, f = Math.ceil((e - s + 1) / o), d = Math.ceil((n - u + 1) / a), p = Math.ceil((r - c + 1) / i);\n        }\n        return {\n            padInfo: h,\n            outDepth: f,\n            outHeight: d,\n            outWidth: p\n        };\n    }(o, l, h, f, b, w, E, D, T, N, s), _ = F.padInfo, O = F.outDepth, M = F.outHeight, B = F.outWidth, P = a ? y * d : y;\n    return \"channelsFirst\" === i ? p = [\n        c,\n        P,\n        O,\n        M,\n        B\n    ] : \"channelsLast\" === i && (p = [\n        c,\n        O,\n        M,\n        B,\n        P\n    ]), {\n        batchSize: c,\n        dataFormat: i,\n        inDepth: l,\n        inHeight: h,\n        inWidth: f,\n        inChannels: d,\n        outDepth: O,\n        outHeight: M,\n        outWidth: B,\n        outChannels: P,\n        padInfo: _,\n        strideDepth: b,\n        strideHeight: w,\n        strideWidth: E,\n        filterDepth: v,\n        filterHeight: m,\n        filterWidth: g,\n        effectiveFilterDepth: D,\n        effectiveFilterHeight: T,\n        effectiveFilterWidth: N,\n        dilationDepth: I,\n        dilationHeight: k,\n        dilationWidth: S,\n        inShape: t,\n        outShape: p,\n        filterShape: e\n    };\n}\nfunction Do(t, e, n, r) {\n    void 0 === r && (r = 1);\n    var o = Fo(e, r);\n    return Math.floor((t[0] * (n - 1) - n + o) / 2);\n}\nfunction To(t) {\n    return \"number\" == typeof t ? [\n        t,\n        t,\n        t\n    ] : 2 === t.length ? [\n        t[0],\n        t[1],\n        1\n    ] : t;\n}\nfunction No(t) {\n    return \"number\" == typeof t ? [\n        t,\n        t,\n        t\n    ] : t;\n}\nfunction Fo(t, e) {\n    return e <= 1 ? t : t + (t - 1) * (e - 1);\n}\nfunction _o(t, e) {\n    if (!e) return t;\n    switch(e){\n        case \"round\":\n            return Math.round(t);\n        case \"ceil\":\n            return Math.ceil(t);\n        case \"floor\":\n            return Math.floor(t);\n        default:\n            throw new Error(\"Unknown roundingMode \" + e);\n    }\n}\nfunction Oo(t) {\n    var e = To(t), n = e[0], r = e[1], o = e[2];\n    return 1 === n && 1 === r && 1 === o;\n}\nfunction Mo(t, e) {\n    return Oo(t) || Oo(e);\n}\nfunction Bo(t) {\n    if (\"NHWC\" === t) return \"channelsLast\";\n    if (\"NCHW\" === t) return \"channelsFirst\";\n    throw new Error(\"Unknown dataFormat \" + t);\n}\nfunction Po(t, e, n) {\n    if (\"complex64\" === e) {\n        if (\"complex64\" === t.dtype) return t.clone();\n        var r = Gn(t.shape), o = t.toFloat(), a = n.complex(o, r);\n        return r.dispose(), o.dispose(), a;\n    }\n    if (!U(t.dtype, e)) return Lt.makeTensorFromDataId(t.dataId, t.shape, e);\n    if (\"complex64\" === t.dtype) {\n        var i = n.real(t);\n        a = i.cast(e);\n        return i.dispose(), a;\n    }\n    if (\"int32\" === e) return n.int(t);\n    if (\"bool\" === e) {\n        var s = On(0, t.dtype);\n        a = n.notEqual(t, s);\n        return s.dispose(), a;\n    }\n    throw new Error(\"Error in Cast: failed to cast \" + t.dtype + \" to \" + e);\n}\nfunction Lo(t, e) {\n    return Lt.makeTensorFromDataId(t.dataId, e, t.dtype);\n}\nfunction Wo(t, e, n) {\n    var r = (e - t) / (n - 1), o = tt(n, \"float32\");\n    o[0] = t;\n    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + r;\n    return Mn(o, \"float32\");\n}\nvar Uo = Object.freeze({\n    castTensor: Po,\n    reshapeTensor: Lo,\n    linspaceImpl: Wo,\n    upcastType: Dt,\n    axesAreInnerMostDims: yn,\n    combineLocations: xn,\n    computeOutAndReduceShapes: bn,\n    expandShapeToKeepDim: wn,\n    assertAxesAreInnerMostDims: Cn,\n    getAxesPermutation: En,\n    getUndoAxesPermutation: Rn,\n    getInnerMostAxes: In,\n    getBroadcastDims: Co,\n    getReductionAxes: Eo,\n    assertAndGetBroadcastShape: Ro,\n    assertParamsConsistent: kn,\n    computeOutShape: Sn,\n    computePool2DInfo: Io,\n    computePool3DInfo: ko,\n    computeConv2DInfo: So,\n    computeConv3DInfo: Ao,\n    computeDefaultPad: Do,\n    tupleValuesAreOne: Oo,\n    eitherStridesOrDilationsAreOne: Mo,\n    convertConv2DDataFormat: Bo,\n    PARALLELIZE_THRESHOLD: Yr,\n    computeOptimalWindowSize: $r\n});\nfunction Vo(t, e) {\n    if (t.length !== e.length) throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\" + t.length + \", imag: \" + e.length + \".\");\n    for(var n = new Float32Array(2 * t.length), r = 0; r < n.length; r += 2)n[r] = t[r / 2], n[r + 1] = e[r / 2];\n    return n;\n}\nfunction zo(t, e) {\n    return {\n        real: t[2 * e],\n        imag: t[2 * e + 1]\n    };\n}\nfunction Go(t, e, n, r) {\n    t[2 * r] = e, t[2 * r + 1] = n;\n}\nfunction Ho(t, e, n) {\n    var r = (n ? 2 : -2) * Math.PI * (t / e);\n    return {\n        real: Math.cos(r),\n        imag: Math.sin(r)\n    };\n}\nfunction qo(t, e, n) {\n    var r = function(t, e, n) {\n        return function(t, e, n) {\n            var r = 0, o = t.length, a = 0, i = !1;\n            for(; r < o;){\n                var s = n(e, t[a = r + (o - r >>> 1)]);\n                s > 0 ? r = a + 1 : (o = a, i = !s);\n            }\n            return i ? r : -r - 1;\n        }(t, e, n || Ko);\n    }(t, e, n), o = r < 0 ? -(r + 1) : r;\n    t.splice(o, 0, e);\n}\nfunction Ko(t, e) {\n    return t > e ? 1 : t < e ? -1 : 0;\n}\nfunction jo(t, e, n, r, o) {\n    return Yo(t, e, n, r, o, 0).selectedIndices;\n}\nfunction Xo(t, e, n, r, o, a) {\n    var i = Yo(t, e, n, r, o, a, !0);\n    return i.numValidOutputs.dispose(), {\n        selectedIndices: i.selectedIndices,\n        selectedScores: i.selectedScores\n    };\n}\nfunction Yo(t, e, n, r, o, a, i, s) {\n    void 0 === i && (i = !1), void 0 === s && (s = !1);\n    for(var u = Array.from(e).map(function(t, e) {\n        return {\n            score: t,\n            boxIndex: e,\n            suppressBeginIndex: 0\n        };\n    }).filter(function(t) {\n        return t.score > o;\n    }).sort(Jo), c = a > 0 ? -.5 / a : 0, l = [], h = []; l.length < n && u.length > 0;){\n        var f = u.pop(), d = f.score, p = f.boxIndex, v = f.suppressBeginIndex;\n        if (d < o) break;\n        for(var m = !1, g = l.length - 1; g >= v; --g){\n            var y = $o(t, p, l[g]);\n            if (y >= r) {\n                m = !0;\n                break;\n            }\n            if (f.score = f.score * Qo(r, c, y), f.score <= o) break;\n        }\n        f.suppressBeginIndex = l.length, m || (f.score === d ? (l.push(p), h.push(f.score)) : f.score > o && qo(u, f, Jo));\n    }\n    var x = l.length;\n    return s && (l.fill(0, x), h.fill(0, x)), {\n        selectedIndices: Mn(l, \"int32\"),\n        selectedScores: Mn(h, \"float32\"),\n        numValidOutputs: On(x, \"int32\")\n    };\n}\nfunction $o(t, e, n) {\n    var r = t.subarray(4 * e, 4 * e + 4), o = t.subarray(4 * n, 4 * n + 4), a = Math.min(r[0], r[2]), i = Math.min(r[1], r[3]), s = Math.max(r[0], r[2]), u = Math.max(r[1], r[3]), c = Math.min(o[0], o[2]), l = Math.min(o[1], o[3]), h = Math.max(o[0], o[2]), f = Math.max(o[1], o[3]), d = (s - a) * (u - i), p = (h - c) * (f - l);\n    if (d <= 0 || p <= 0) return 0;\n    var v = Math.max(a, c), m = Math.max(i, l), g = Math.min(s, h), y = Math.min(u, f), x = Math.max(g - v, 0) * Math.max(y - m, 0);\n    return x / (d + p - x);\n}\nfunction Qo(t, e, n) {\n    var r = Math.exp(e * n * n);\n    return n <= t ? r : 0;\n}\nfunction Jo(t, e) {\n    return t.score - e.score || t.score === e.score && e.boxIndex - t.boxIndex;\n}\nfunction Zo(t, e, n) {\n    var r = new Array(t.rank).fill(0), o = t.shape.slice();\n    return e.map(function(e) {\n        o[n] = e;\n        var a = t.slice(r, o);\n        return r[n] += e, a;\n    });\n}\nfunction ta(t, e) {\n    for(var n = new Array(t.rank), r = 0; r < n.length; r++)n[r] = t.shape[r] * e[r];\n    var o = dr(n, t.dtype);\n    for(r = 0; r < o.values.length; ++r){\n        for(var a = o.indexToLoc(r), i = new Array(t.rank), s = 0; s < i.length; s++)i[s] = a[s] % t.shape[s];\n        var u = t.locToIndex(i);\n        o.values[r] = t.values[u];\n    }\n    return o.toTensor();\n}\nfunction ea(t, e, n, r, o) {\n    for(var a = e[e.length - 1], i = [\n        t.length / a,\n        a\n    ], s = i[0], u = i[1], c = B(n, s * r), l = B(\"int32\", s * r), h = 0; h < s; h++){\n        for(var f = h * u, d = t.subarray(f, f + u), p = [], v = 0; v < d.length; v++)p.push({\n            value: d[v],\n            index: v\n        });\n        p.sort(function(t, e) {\n            return e.value - t.value;\n        });\n        var m = h * r, g = c.subarray(m, m + r), y = l.subarray(m, m + r);\n        for(v = 0; v < r; v++)g[v] = p[v].value, y[v] = p[v].index;\n    }\n    var x = e.slice();\n    return x[x.length - 1] = r, [\n        Fn(c, x, n),\n        Fn(l, x, \"int32\")\n    ];\n}\nfunction na(t, e) {\n    for(var n = [], r = 0; r < e.length; r++)e[r] && n.push(r);\n    var o = dr(t, \"int32\"), a = dr([\n        n.length,\n        t.length\n    ], \"int32\");\n    for(r = 0; r < n.length; r++){\n        var i = o.indexToLoc(n[r]), s = r * t.length;\n        a.values.set(i, s);\n    }\n    return a.toTensor();\n}\nvar ra = function(t, e) {\n    this.outputShape = [], this.outputShape = t, this.variableNames = e.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var n = [];\n    this.variableNames.forEach(function(t) {\n        n.push(\"float v\" + t + \" = get\" + t + \"AtOutCoords();\");\n    });\n    var r = this.variableNames.map(function(t) {\n        return \"v\" + t;\n    }).join(\" + \");\n    this.userCode = \"\\n      void main() {\\n        \" + n.join(\"\\n        \") + \"\\n\\n        float result = \" + r + \";\\n        setOutput(result);\\n      }\\n    \";\n}, oa = function(t, e) {\n    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var n = [];\n    this.variableNames.forEach(function(t) {\n        n.push(\"vec4 v\" + t + \" = get\" + t + \"AtOutCoords();\");\n    });\n    var r = this.variableNames.map(function(t) {\n        return \"v\" + t;\n    }).join(\" + \");\n    this.userCode = \"\\n      void main() {\\n        \" + n.join(\"\\n        \") + \"\\n\\n        vec4 result = \" + r + \";\\n        setOutput(result);\\n      }\\n    \";\n}, aa = function(t, e, n) {\n    this.variableNames = [\n        \"A\"\n    ];\n    var r = t.windowSize, o = t.batchSize, a = t.inSize, i = Math.ceil(a / r);\n    n || this.variableNames.push(\"bestIndicesA\"), this.outputShape = [\n        o,\n        i\n    ];\n    var s = \"max\" === e ? \">\" : \"<\", u = n ? \"inOffset + i;\" : \"round(getBestIndicesA(batch, inOffset + i));\";\n    this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + r + \";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \" + r + \"; i++) {\\n          int inIdx = \" + u + \";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \" + s + \" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \";\n};\nfunction ia(t, e) {\n    return [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, e).map(function(e) {\n        return t + \".\" + e;\n    });\n}\nfunction sa(t, e) {\n    return 1 === e ? [\n        t\n    ] : ia(t, e);\n}\nfunction ua() {\n    var t, e, n, r, o, a, s, u, c, l;\n    return 2 === i().getNumber(\"WEBGL_VERSION\") ? (t = \"#version 300 es\", e = \"in\", n = \"out\", r = \"in\", o = \"texture\", a = \"outputColor\", s = \"out vec4 outputColor;\", u = \"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \", c = \"\", l = \"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \") : (t = \"\", e = \"attribute\", n = \"varying\", r = \"varying\", o = \"texture2D\", a = \"gl_FragColor\", s = \"\", u = \"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \", c = \"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \", l = \"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"), {\n        version: t,\n        attribute: e,\n        varyingVs: n,\n        varyingFs: r,\n        texture2D: o,\n        output: a,\n        defineOutput: s,\n        defineSpecialNaN: u,\n        defineSpecialInf: c,\n        defineRound: l\n    };\n}\nfunction ca(t, e, n) {\n    void 0 === n && (n = \"index\");\n    var r = $(e);\n    return r.map(function(e, o) {\n        return \"int \" + t[o] + \" = \" + n + \" / \" + e + \"; \" + (o === r.length - 1 ? \"int \" + t[o + 1] + \" = \" + n + \" - \" + t[o] + \" * \" + e : \"index -= \" + t[o] + \" * \" + e) + \";\";\n    }).join(\"\");\n}\nfunction la(t) {\n    var e = $(t).map(function(t) {\n        return t.toString();\n    });\n    return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \" + e[0] + \" + coords.y * \" + e[1] + \" + coords.z;\\n  }\\n\";\n}\nvar ha = \"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";\nfunction fa(t, e, n, r) {\n    var o = [];\n    t.forEach(function(t) {\n        var e = k(t.shapeInfo.logicalShape);\n        t.shapeInfo.isUniform ? o.push(\"uniform float \" + t.name + (e > 1 ? \"[\" + e + \"]\" : \"\") + \";\") : (o.push(\"uniform sampler2D \" + t.name + \";\"), o.push(\"uniform int offset\" + t.name + \";\"));\n    });\n    var a, i, s = o.join(\"\\n\"), u = t.map(function(t) {\n        return function(t, e, n) {\n            void 0 === n && (n = !1);\n            var r = \"\";\n            r += n ? pa(t) : da(t);\n            var o = t.shapeInfo.logicalShape, a = e.logicalShape;\n            o.length <= a.length && (r += n ? function(t, e) {\n                var n, r = t.name, o = r.charAt(0).toUpperCase() + r.slice(1), a = \"get\" + o + \"AtOutCoords\", i = t.shapeInfo.logicalShape.length, s = e.logicalShape.length, u = Co(t.shapeInfo.logicalShape, e.logicalShape), c = wa(s), l = s - i, h = [\n                    \"x\",\n                    \"y\",\n                    \"z\",\n                    \"w\",\n                    \"u\",\n                    \"v\"\n                ];\n                n = 0 === i ? \"\" : s < 2 && u.length >= 1 ? \"coords = 0;\" : u.map(function(t) {\n                    return \"coords.\" + h[t + l] + \" = 0;\";\n                }).join(\"\\n\");\n                var f = \"\";\n                f = s < 2 && i > 0 ? \"coords\" : t.shapeInfo.logicalShape.map(function(t, e) {\n                    return \"coords.\" + h[e + l];\n                }).join(\", \");\n                var d = \"return outputValue;\", p = 1 === k(t.shapeInfo.logicalShape), v = 1 === k(e.logicalShape);\n                if (1 !== i || p || v) {\n                    if (p && !v) d = 1 === s ? \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \" : \"\\n        return vec4(outputValue.x);\\n      \";\n                    else if (u.length) {\n                        var m = i - 2, g = i - 1;\n                        u.indexOf(m) > -1 && u.indexOf(g) > -1 ? d = \"return vec4(outputValue.x);\" : u.indexOf(m) > -1 ? d = \"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\" : u.indexOf(g) > -1 && (d = \"return vec4(outputValue.xx, outputValue.zz);\");\n                    }\n                } else d = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n                return \"\\n    vec4 \" + a + \"() {\\n      \" + c + \" coords = getOutputCoords();\\n      \" + n + \"\\n      vec4 outputValue = get\" + o + \"(\" + f + \");\\n      \" + d + \"\\n    }\\n  \";\n            }(t, e) : function(t, e) {\n                var n = t.name, r = n.charAt(0).toUpperCase() + n.slice(1), o = \"get\" + r + \"AtOutCoords\", a = e.texShape, i = t.shapeInfo.texShape, s = t.shapeInfo.logicalShape.length, u = e.logicalShape.length;\n                if (!t.shapeInfo.isUniform && s === u && null == t.shapeInfo.flatOffset && S(i, a)) return \"\\n      float \" + o + \"() {\\n        return sampleTexture(\" + n + \", resultUV);\\n      }\\n    \";\n                var c, l = wa(u), h = Co(t.shapeInfo.logicalShape, e.logicalShape), f = u - s, d = [\n                    \"x\",\n                    \"y\",\n                    \"z\",\n                    \"w\",\n                    \"u\",\n                    \"v\"\n                ];\n                c = 0 === s ? \"\" : u < 2 && h.length >= 1 ? \"coords = 0;\" : h.map(function(t) {\n                    return \"coords.\" + d[t + f] + \" = 0;\";\n                }).join(\"\\n\");\n                var p = \"\";\n                p = u < 2 && s > 0 ? \"coords\" : t.shapeInfo.logicalShape.map(function(t, e) {\n                    return \"coords.\" + d[e + f];\n                }).join(\", \");\n                return \"\\n    float \" + o + \"() {\\n      \" + l + \" coords = getOutputCoords();\\n      \" + c + \"\\n      return get\" + r + \"(\" + p + \");\\n    }\\n  \";\n            }(t, e));\n            return r;\n        }(t, e, r);\n    }).join(\"\\n\"), c = e.texShape, l = ua(), h = function(t) {\n        return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \" + t.texture2D + \"(textureSampler, uv).r;\\n    }\\n  \";\n    }(l), f = function(t) {\n        return t.version + \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \" + t.varyingFs + \" vec2 resultUV;\\n    \" + t.defineOutput + \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \" + t.defineSpecialNaN + \"\\n    \" + t.defineSpecialInf + \"\\n    \" + t.defineRound + \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \" + va + \"\\n    \" + ma + \"\\n    \" + ga + \"\\n  \";\n    }(l);\n    return e.isPacked ? (a = function(t, e) {\n        switch(t.length){\n            case 0:\n                return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n            case 1:\n                return function(t, e) {\n                    var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ];\n                    if (1 === n[0]) return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \" + n[1] + \".0);\\n      }\\n    \";\n                    if (1 === n[1]) return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \" + n[0] + \".0);\\n      }\\n    \";\n                    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      return 2 * (resTexRC.x * \" + n[1] + \" + resTexRC.y);\\n    }\\n  \";\n                }(0, e);\n            case 2:\n                return function(t, e) {\n                    var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ];\n                    if (S(t, e)) return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\" + n[0] + \", \" + n[1] + \"));\\n      }\\n    \";\n                    var r = Math.ceil(t[1] / 2);\n                    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n      int r = 2 * (index / \" + r + \");\\n      int c = imod(index, \" + r + \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n                }(t, e);\n            case 3:\n                return n = t, r = e, o = [\n                    Math.ceil(r[0] / 2),\n                    Math.ceil(r[1] / 2)\n                ], a = Math.ceil(n[2] / 2), i = a * Math.ceil(n[1] / 2), \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + o[0] + \", \" + o[1] + \"));\\n      int index = resTexRC.x * \" + o[1] + \" + resTexRC.y;\\n\\n      int b = index / \" + i + \";\\n      index -= b * \" + i + \";\\n\\n      int r = 2 * (index / \" + a + \");\\n      int c = imod(index, \" + a + \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n            default:\n                return function(t, e) {\n                    for(var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ], r = Math.ceil(t[t.length - 1] / 2), o = r * Math.ceil(t[t.length - 2] / 2), a = o, i = \"\", s = \"b, r, c\", u = 2; u < t.length - 1; u++)a *= t[t.length - u - 1], i = \"\\n      int b\" + u + \" = index / \" + a + \";\\n      index -= b\" + u + \" * \" + a + \";\\n    \" + i, s = \"b\" + u + \", \" + s;\n                    return \"\\n    ivec\" + t.length + \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n\\n      \" + i + \"\\n\\n      int b = index / \" + o + \";\\n      index -= b * \" + o + \";\\n\\n      int r = 2 * (index / \" + r + \");\\n      int c = imod(index, \" + r + \") * 2;\\n\\n      return ivec\" + t.length + \"(\" + s + \");\\n    }\\n  \";\n                }(t, e);\n        }\n        var n, r, o, a, i;\n    }(e.logicalShape, c), i = function(t) {\n        return \"\\n    void setOutput(vec4 val) {\\n      \" + t.output + \" = val;\\n    }\\n  \";\n    }(l)) : (a = function(t, e) {\n        switch(t.length){\n            case 0:\n                return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n            case 1:\n                return function(t, e) {\n                    if (1 === e[0]) return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + e[1] + \".0);\\n      }\\n    \";\n                    if (1 === e[1]) return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + e[0] + \".0);\\n      }\\n    \";\n                    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + e[0] + \", \" + e[1] + \"));\\n      return resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n    }\\n  \";\n                }(0, e);\n            case 2:\n                return function(t, e) {\n                    if (S(t, e)) return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + e[0] + \", \" + e[1] + \"));\\n      }\\n    \";\n                    if (1 === t[1]) return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n                    if (1 === t[0]) return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n                    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n      int r = index / \" + t[1] + \";\\n      int c = index - r * \" + t[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n                }(t, e);\n            case 3:\n                return n = e, r = ca([\n                    \"r\",\n                    \"c\",\n                    \"d\"\n                ], t), \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n      \" + r + \"\\n      return ivec3(r, c, d);\\n    }\\n  \";\n            case 4:\n                return function(t, e) {\n                    var n = ca([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\"\n                    ], t);\n                    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n      \" + n + \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n                }(t, e);\n            case 5:\n                return function(t, e) {\n                    var n = ca([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\"\n                    ], t);\n                    return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\" + e[0] + \",\\n                             \" + e[1] + \"));\\n\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n\\n      \" + n + \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \";\n                }(t, e);\n            case 6:\n                return function(t, e) {\n                    var n = ca([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\",\n                        \"d4\"\n                    ], t);\n                    return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n\\n      \" + n + \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \";\n                }(t, e);\n            default:\n                throw new Error(t.length + \"-D output sampling is not yet supported\");\n        }\n        var n, r;\n    }(e.logicalShape, c), i = function(t) {\n        return \"\\n    void setOutput(float val) {\\n      \" + t.output + \" = vec4(val, 0, 0, 0);\\n    }\\n  \";\n    }(l)), r && (f += ya), [\n        f,\n        h,\n        i,\n        s,\n        a,\n        u,\n        n\n    ].join(\"\\n\");\n}\nfunction da(t) {\n    var e = t.shapeInfo.logicalShape;\n    switch(e.length){\n        case 0:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1);\n                if (t.shapeInfo.isUniform) return \"float \" + n + \"() {return \" + e + \";}\";\n                var r = t.shapeInfo.texShape, o = r[0], a = r[1];\n                if (1 === o && 1 === a) return \"\\n      float \" + n + \"() {\\n        return sampleTexture(\" + e + \", halfCR);\\n      }\\n    \";\n                var i = t.shapeInfo.texShape, s = i[0], u = i[1], c = xa(e);\n                return \"\\n    float \" + n + \"() {\\n      vec2 uv = uvFromFlat(\" + s + \", \" + u + \", \" + c + \");\\n      return sampleTexture(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 1:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1);\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + n + \"(int index) {\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var r = t.shapeInfo.texShape, o = r[0], a = r[1];\n                if (1 === a && 1 === o) return \"\\n      float \" + n + \"(int index) {\\n        return sampleTexture(\" + e + \", halfCR);\\n      }\\n    \";\n                var i = xa(e);\n                if (1 === a) return \"\\n      float \" + n + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \" + i + \") + 0.5) / \" + o + \".0);\\n        return sampleTexture(\" + e + \", uv);\\n      }\\n    \";\n                if (1 === o) return \"\\n      float \" + n + \"(int index) {\\n        vec2 uv = vec2((float(index + \" + i + \") + 0.5) / \" + a + \".0, 0.5);\\n        return sampleTexture(\" + e + \", uv);\\n      }\\n    \";\n                return \"\\n    float \" + n + \"(int index) {\\n      vec2 uv = uvFromFlat(\" + o + \", \" + a + \", index + \" + i + \");\\n      return sampleTexture(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 2:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape;\n                if (null != o && S(e, o)) {\n                    var a = o[0], i = o[1];\n                    return \"\\n    float \" + r + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + i + \".0, \" + a + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                }\n                var s = M(e), u = s.newShape, c = s.keptDims, l = u;\n                if (l.length < e.length) {\n                    var h = Ca(t, l);\n                    return \"\\n      \" + da(h) + \"\\n      float \" + r + \"(int row, int col) {\\n        return \" + r + \"(\" + Ea([\n                        \"row\",\n                        \"col\"\n                    ], c) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\" + e[1] + \", 1)));\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var f = o[0], d = o[1], p = xa(n);\n                if (1 === d) return \"\\n    float \" + r + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + p + \"), vec3(\" + e[1] + \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \" + f + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                if (1 === f) return \"\\n    float \" + r + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + p + \"), vec3(\" + e[1] + \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \" + d + \".0, 0.5);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                return \"\\n  float \" + r + \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \" + e[1] + \" + col + \" + p + \";\\n    vec2 uv = uvFromFlat(\" + f + \", \" + d + \", index);\\n    return sampleTexture(\" + n + \", uv);\\n  }\\n\";\n            }(t);\n        case 3:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[1] * e[2], a = e[2], i = M(e), s = i.newShape, u = i.keptDims, c = s;\n                if (c.length < e.length) {\n                    var l = Ca(t, c);\n                    return \"\\n        \" + da(l) + \"\\n        float \" + r + \"(int row, int col, int depth) {\\n          return \" + r + \"(\" + Ea([\n                        \"row\",\n                        \"col\",\n                        \"depth\"\n                    ], u) + \");\\n        }\\n      \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\" + o + \", \" + a + \", 1)));\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var h = t.shapeInfo.texShape, f = h[0], d = h[1], p = t.shapeInfo.flatOffset;\n                if (d === o && null == p) return \"\\n        float \" + r + \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\" + a + \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + d + \".0, \" + f + \".0);\\n          return sampleTexture(\" + n + \", uv);\\n        }\\n      \";\n                if (d === a && null == p) return \"\\n    float \" + r + \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\" + e[1] + \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + d + \".0, \" + f + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                var v = xa(n);\n                return \"\\n      float \" + r + \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \" + o + \" + col * \" + a + \" + depth + \" + v + \";\\n        vec2 uv = uvFromFlat(\" + f + \", \" + d + \", index);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n  \";\n            }(t);\n        case 4:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[3], a = e[2] * o, i = e[1] * a, s = M(e), u = s.newShape, c = s.keptDims;\n                if (u.length < e.length) {\n                    var l = Ca(t, u);\n                    return \"\\n      \" + da(l) + \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        return \" + r + \"(\" + Ea([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\"\n                    ], c) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\" + i + \", \" + a + \", \" + o + \", 1)));\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var h = t.shapeInfo.flatOffset, f = t.shapeInfo.texShape, d = f[0], p = f[1];\n                if (p === i && null == h) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\" + a + \", \" + o + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + p + \".0, \" + d + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (p === o && null == h) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\" + e[1] * e[2] + \", \" + e[2] + \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + p + \".0, \" + d + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var v = xa(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + i + \" + col * \" + a + \" +\\n          depth * \" + o + \" + depth2;\\n      vec2 uv = uvFromFlat(\" + d + \", \" + p + \", index + \" + v + \");\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 5:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[4], a = e[3] * o, i = e[2] * a, s = e[1] * i, u = M(e), c = u.newShape, l = u.keptDims;\n                if (c.length < e.length) {\n                    var h = Ca(t, c);\n                    return \"\\n      \" + da(h) + \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \" + r + \"(\" + Ea([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\",\n                        \"depth3\"\n                    ], l) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + s + \", \" + i + \", \" + a + \", \" + o + \")) +\\n          depth3;\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var f = t.shapeInfo.flatOffset, d = t.shapeInfo.texShape, p = d[0], v = d[1];\n                if (v === s && null == f) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\" + i + \", \" + a + \", \" + o + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + v + \".0, \" + p + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (v === o && null == f) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + e[1] * e[2] * e[3] + \",\\n               \" + e[2] * e[3] + \", \" + e[3] + \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + v + \".0, \" + p + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var m = xa(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + s + \" + col * \" + i + \" + depth * \" + a + \" +\\n          depth2 * \" + o + \" + depth3 + \" + m + \";\\n      vec2 uv = uvFromFlat(\" + p + \", \" + v + \", index);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 6:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = M(e), a = o.newShape, i = o.keptDims;\n                if (a.length < e.length) {\n                    var s = Ca(t, a);\n                    return \"\\n      \" + da(s) + \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \" + r + \"(\" + Ea([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\",\n                        \"depth3\",\n                        \"depth4\"\n                    ], i) + \");\\n      }\\n    \";\n                }\n                var u = e[5], c = e[4] * u, l = e[3] * c, h = e[2] * l, f = e[1] * h;\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + f + \", \" + h + \", \" + l + \", \" + c + \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\" + u + \", 1)));\\n        \" + ba(t) + \"\\n      }\\n    \";\n                var d = t.shapeInfo.flatOffset, p = t.shapeInfo.texShape, v = p[0], m = p[1];\n                if (m === f && null == d) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\" + h + \", \" + l + \", \" + c + \", \" + u + \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + m + \".0, \" + v + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (m === u && null == d) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\" + e[1] * e[2] * e[3] * e[4] + \",\\n               \" + e[2] * e[3] * e[4] + \",\\n               \" + e[3] * e[4] + \",\\n               \" + e[4] + \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + m + \".0, \" + v + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var g = xa(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + f + \" + col * \" + h + \" + depth * \" + l + \" +\\n          depth2 * \" + c + \" + depth3 * \" + u + \" + depth4 + \" + g + \";\\n      vec2 uv = uvFromFlat(\" + v + \", \" + m + \", index);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        default:\n            throw new Error(e.length + \"-D input sampling is not yet supported\");\n    }\n}\nfunction pa(t) {\n    var e, n, r;\n    switch(t.shapeInfo.logicalShape.length){\n        case 0:\n            return e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1), r = ua(), \"\\n    vec4 \" + n + \"() {\\n      return \" + r.texture2D + \"(\" + e + \", halfCR);\\n    }\\n  \";\n        case 1:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1), r = t.shapeInfo.texShape, o = [\n                    Math.ceil(r[0] / 2),\n                    Math.ceil(r[1] / 2)\n                ], a = ua();\n                return \"\\n    vec4 \" + n + \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \" + o[0] + \", \" + o[1] + \", index);\\n      return \" + a.texture2D + \"(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 2:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape, a = o[0], i = o[1], s = ua();\n                if (null != o && S(e, o)) return \"\\n      vec4 \" + r + \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + i + \".0, \" + a + \".0);\\n\\n        return \" + s.texture2D + \"(\" + n + \", uv);\\n      }\\n    \";\n                var u = [\n                    Math.ceil(o[0] / 2),\n                    Math.ceil(o[1] / 2)\n                ], c = Math.ceil(e[1] / 2);\n                return \"\\n    vec4 \" + r + \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\" + c + \", \" + u[0] + \", \" + u[1] + \", row, col);\\n      return \" + s.texture2D + \"(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 3:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape, a = [\n                    Math.ceil(o[0] / 2),\n                    Math.ceil(o[1] / 2)\n                ];\n                if (1 === e[0]) {\n                    var i = e.slice(1), s = Ca(t, i);\n                    return \"\\n        \" + pa(s) + \"\\n        vec4 \" + r + \"(int b, int row, int col) {\\n          return \" + r + \"(\" + Ea([\n                        \"b\",\n                        \"row\",\n                        \"col\"\n                    ], [\n                        1,\n                        2\n                    ]) + \");\\n        }\\n      \";\n                }\n                var u = a[0], c = a[1], l = Math.ceil(e[2] / 2), h = l * Math.ceil(e[1] / 2), f = ua();\n                return \"\\n    vec4 \" + r + \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \" + u + \", \" + c + \", \" + h + \", \" + l + \", b, row, col);\\n      return \" + f.texture2D + \"(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        default:\n            return function(t) {\n                for(var e = t.shapeInfo.logicalShape, n = e.length, r = t.name, o = \"get\" + r.charAt(0).toUpperCase() + r.slice(1), a = t.shapeInfo.texShape, i = [\n                    Math.ceil(a[0] / 2),\n                    Math.ceil(a[1] / 2)\n                ], s = i[0], u = i[1], c = Math.ceil(e[n - 1] / 2), l = c * Math.ceil(e[n - 2] / 2), h = \"int b, int row, int col\", f = \"b * \" + l + \" + (row / 2) * \" + c + \" + (col / 2)\", d = 2; d < n - 1; d++)h = \"int b\" + d + \", \" + h, l *= e[n - d - 1], f = \"b\" + d + \" * \" + l + \" + \" + f;\n                var p = ua();\n                return \"\\n    vec4 \" + o + \"(\" + h + \") {\\n      int index = \" + f + \";\\n      int texR = index / \" + u + \";\\n      int texC = index - texR * \" + u + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + u + \", \" + s + \");\\n      return \" + p.texture2D + \"(\" + r + \", uv);\\n    }\\n  \";\n            }(t);\n    }\n}\nvar va = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", ma = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", ga = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", ya = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction xa(t) {\n    return \"offset\" + t;\n}\nfunction ba(t) {\n    var e = t.name, n = k(t.shapeInfo.logicalShape);\n    return n < 2 ? \"return \" + e + \";\" : \"\\n    for (int i = 0; i < \" + n + \"; i++) {\\n      if (i == index) {\\n        return \" + e + \"[i];\\n      }\\n    }\\n  \";\n}\nfunction wa(t) {\n    if (t <= 1) return \"int\";\n    if (2 === t) return \"ivec2\";\n    if (3 === t) return \"ivec3\";\n    if (4 === t) return \"ivec4\";\n    if (5 === t) return \"ivec5\";\n    if (6 === t) return \"ivec6\";\n    throw Error(\"GPU for rank \" + t + \" is not yet supported\");\n}\nfunction Ca(t, e) {\n    var n = JSON.parse(JSON.stringify(t));\n    return n.shapeInfo.logicalShape = e, n;\n}\nfunction Ea(t, e) {\n    return e.map(function(e) {\n        return t[e];\n    }).join(\", \");\n}\nvar Ra = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, C(t.length > 2, function() {\n        return \"Packed arg\" + (n.charAt(0).toUpperCase() + n.slice(1)) + \" supports only inputs with rank above 2.\";\n    });\n    var o = t[t.length - 1], a = Math.ceil(o / e);\n    this.outputShape = t.slice(0, -1), a > 1 && this.outputShape.push(a), r || this.variableNames.push(\"bestIndicesA\");\n    var i, s, u = this.outputShape, c = u.length, l = wa(c), h = sa(\"coords\", c);\n    if (1 === a) {\n        var f = wa(s = c + 1);\n        i = \"\\n        \" + f + \" sourceLocR = \" + f + \"(\" + h.join() + \", 0);\\n        ++\" + h[c - 1] + \";\\n        \" + f + \" sourceLocG = \" + f + \"(\" + h.join() + \", 0);\\n        ++\" + h[c - 2] + \";\\n        \" + f + \" sourceLocA = \" + f + \"(\" + h.join() + \", 0);\\n        --\" + h[c - 1] + \";\\n        \" + f + \" sourceLocB = \" + f + \"(\" + h.join() + \", 0);\\n        --\" + h[c - 2] + \";\";\n    } else s = c, i = \"\\n        \" + l + \" sourceLocR = coords;\\n        ++\" + h[c - 1] + \";\\n        \" + l + \" sourceLocG = coords;\\n        ++\" + h[c - 2] + \";\\n        \" + l + \" sourceLocA = coords;\\n        --\" + h[c - 1] + \";\\n        \" + l + \" sourceLocB = coords;\\n        --\" + h[c - 2] + \";\";\n    var d = [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, s), p = \".\" + d[s - 1], v = d.map(function(t) {\n        return \"int \" + t;\n    }), m = sa(\"sourceLocR\", s - 1).concat(\"inIdx.r\"), g = sa(\"sourceLocG\", s - 1).concat(\"inIdx.g\"), y = sa(\"sourceLocB\", s - 1).concat(\"inIdx.b\"), x = sa(\"sourceLocA\", s - 1).concat(\"inIdx.a\"), b = \"max\" === n ? \"greaterThan\" : \"lessThan\", w = r ? \"\" : \"\\n          inIdx = round(vec4(getBestIndicesAChannel(\" + m.join() + \"),\\n                             getBestIndicesAChannel(\" + g.join() + \"),\\n                             getBestIndicesAChannel(\" + y.join() + \"),\\n                             getBestIndicesAChannel(\" + x.join() + \")));\", E = \"vec4(\\n            getAChannel(\" + m.join() + \"),\\n            hasNextCol ? getAChannel(\" + g.join() + \") : 0.,\\n            hasNextRow ? getAChannel(\" + y.join() + \") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\" + x.join() + \") : 0.)\", R = r ? \"\" : \"\\n      float getBestIndicesAChannel(\" + v.join() + \") {\\n        return getChannel(getBestIndicesA(\" + d.join() + \"),\\n                                          vec2(\" + d.slice(-2).join() + \"));\\n      }\";\n    this.userCode = \"\\n      float getAChannel(\" + v.join() + \") {\\n        return getChannel(getA(\" + d.join() + \"),\\n                               vec2(\" + d.slice(-2).join() + \"));\\n      }\\n      \" + R + \"\\n      void main() {\\n        \" + l + \" coords = getOutputCoords();\\n        bool hasNextCol = \" + h[c - 1] + \" < \" + (u[c - 1] - 1) + \";\\n        bool hasNextRow = \" + h[c - 2] + \" < \" + (u[c - 2] - 1) + \";\\n        \" + i + \"\\n        ivec4 srcIdx = ivec4(sourceLocR\" + p + \", sourceLocG\" + p + \",\\n          sourceLocB\" + p + \", sourceLocA\" + p + \") * \" + e + \";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \" + E + \";\\n\\n        for (int i = 0; i < \" + e + \"; i++) {\\n          inIdx = srcIdx;\\n          \" + w + \"\\n          vec4 candidate = \" + E + \";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\" + b + \"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \";\n}, Ia = function(t) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, c = s - 1 - t.padInfo.top, l = u - 1 - t.padInfo.left, h = 1 / (e * n);\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + c + \", \" + l + \");\\n      const float avgMultiplier = float(\" + h + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + s + \";\\n            wR += \" + a + \") {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + u + \";\\n            wC+= \" + i + \") {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, ka = function(t) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterDepth, n = t.filterHeight, r = t.filterWidth, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = t.dilationDepth, u = t.dilationHeight, c = t.dilationWidth, l = t.effectiveFilterDepth, h = t.effectiveFilterHeight, f = t.effectiveFilterWidth, d = l - 1 - t.padInfo.front, p = h - 1 - t.padInfo.top, v = f - 1 - t.padInfo.left, m = 1 / (e * n * r);\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + d + \", \" + p + \", \" + v + \");\\n      const float avgMultiplier = float(\" + m + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \" + l + \";\\n            wD += \" + s + \") {\\n          float dyD = float(dyDCorner + wD) / \" + o + \".0;\\n\\n          if (dyD < 0.0 || dyD >= \" + t.outDepth + \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \" + h + \";\\n              wR += \" + u + \") {\\n            float dyR = float(dyRCorner + wR) / \" + a + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \" + f + \";\\n                wC += \" + c + \") {\\n              float dyC = float(dyCCorner + wC) / \" + i + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Sa = function(t, e, n, r, o, a) {\n    this.outputShape = [], this.variableNames = [\n        \"x\",\n        \"mean\",\n        \"variance\"\n    ], Ro(t, e), Ro(t, n);\n    var i = \"0.0\";\n    null != r && (Ro(t, r), this.variableNames.push(\"offset\"), i = \"getOffsetAtOutCoords()\");\n    var s = \"1.0\";\n    null != o && (Ro(t, o), this.variableNames.push(\"scale\"), s = \"getScaleAtOutCoords()\"), this.outputShape = t, this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \" + i + \";\\n        float scale = \" + s + \";\\n        float inv = scale * inversesqrt(variance + float(\" + a + \"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \";\n}, Aa = function(t, e, n, r, o, a) {\n    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = [\n        \"x\",\n        \"mean\",\n        \"variance\"\n    ], Ro(t, e), Ro(t, n);\n    var i = \"vec4(0.0)\";\n    null != r && (Ro(t, r), this.variableNames.push(\"offset\"), i = \"getOffsetAtOutCoords()\");\n    var s = \"vec4(1.0)\";\n    null != o && (Ro(t, o), this.variableNames.push(\"scale\"), s = \"getScaleAtOutCoords()\"), this.outputShape = t, this.userCode = \"\\n      void main() {\\n        vec4 offset = \" + i + \";\\n        vec4 scale = \" + s + \";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\" + a + \"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \";\n}, Da = \"return areal * breal - aimag * bimag;\", Ta = \"return areal * bimag + aimag * breal;\", Na = function(t, e, n) {\n    this.variableNames = [\n        \"AReal\",\n        \"AImag\",\n        \"BReal\",\n        \"BImag\"\n    ], this.outputShape = Ro(e, n), this.userCode = \"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \";\n}, Fa = \"return a + b;\", _a = \"return a - b;\", Oa = \"return a * b;\", Ma = \"return (a < 0.) ? b * a : a;\", Ba = function(t, e, n) {\n    this.variableNames = [\n        \"A\",\n        \"B\"\n    ], this.outputShape = Ro(e, n), this.userCode = \"\\n      float binaryOperation(float a, float b) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \";\n}, Pa = \"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\", La = function(t, e, n, r) {\n    void 0 === r && (r = !1), this.variableNames = [\n        \"A\",\n        \"B\"\n    ], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Ro(e, n);\n    var o = this.outputShape.length, a = \"\";\n    if (r) if (0 === o || 1 === k(this.outputShape)) a = \"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";\n    else if (a = \"\\n          \" + wa(o) + \" coords = getOutputCoords();\\n        \", 1 === o) a += \"\\n            result.y = (coords + 1) >= \" + this.outputShape[0] + \" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";\n    else {\n        var i = sa(\"coords\", o);\n        a += \"\\n            bool nextRowOutOfBounds =\\n              (\" + i[o - 2] + \" + 1) >= \" + this.outputShape[o - 2] + \";\\n            bool nextColOutOfBounds =\\n              (\" + i[o - 1] + \" + 1) >= \" + this.outputShape[o - 1] + \";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \";\n    }\n    this.userCode = \"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \" + a + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n}, Wa = function() {\n    function t(t) {\n        this.variableNames = [\n            \"A\"\n        ], this.outputShape = t, this.userCode = \"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t, e) {\n        var n = this;\n        return function(r, o) {\n            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, \"minVal\"), n.maxLoc = r.getUniformLocationNoThrow(o, \"maxVal\")), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);\n        };\n    }, t;\n}(), Ua = function() {\n    function t(t) {\n        this.variableNames = [\n            \"A\"\n        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.userCode = \"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t, e) {\n        var n = this;\n        return function(r, o) {\n            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, \"minVal\"), n.maxLoc = r.getUniformLocationNoThrow(o, \"maxVal\")), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);\n        };\n    }, t;\n}(), Va = function(t) {\n    this.variableNames = [\n        \"real\",\n        \"imag\"\n    ], this.outputShape = t, this.userCode = \"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \";\n}, za = function(t) {\n    this.outputShape = [], this.outputShape = Sn(t, 1), this.variableNames = t.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var e = new Array(t.length - 1);\n    e[0] = t[0][1];\n    for(var n = 1; n < e.length; n++)e[n] = e[n - 1] + t[n][1];\n    var r = [\n        \"if (yC < \" + e[0] + \") setOutput(getT0(yR, yC));\"\n    ];\n    for(n = 1; n < e.length; n++){\n        var o = e[n - 1];\n        r.push(\"else if (yC < \" + e[n] + \") setOutput(getT\" + n + \"(yR, yC-\" + o + \"));\");\n    }\n    var a = e.length, i = e[e.length - 1];\n    r.push(\"else setOutput(getT\" + a + \"(yR, yC-\" + i + \"));\"), this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \" + r.join(\"\\n        \") + \"\\n      }\\n    \";\n}, Ga = function(t, e) {\n    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Sn(t, e);\n    var n = this.outputShape, r = n.length, o = wa(r), a = sa(\"coords\", r), i = [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, r);\n    this.variableNames = t.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var s = new Array(t.length - 1);\n    s[0] = t[0][e];\n    for(var u = 1; u < s.length; u++)s[u] = s[u - 1] + t[u][e];\n    var c = i[e], l = i.slice(-2), h = i.join(), f = \"if (\" + c + \" < \" + s[0] + \") {\\n        return getChannel(\\n            getT0(\" + h + \"), vec2(\" + l.join() + \"));\\n        }\";\n    for(u = 1; u < s.length; u++){\n        var d = s[u - 1];\n        f += \"\\n        if (\" + c + \" < \" + s[u] + \"  && \" + c + \" >= \" + s[u - 1] + \") {\\n          return getChannel(\\n            getT\" + u + \"(\" + Ha(i, c, d) + \"),\\n            vec2(\" + Ha(l, c, d) + \"));\\n        }\";\n    }\n    var p = s.length, v = s[s.length - 1];\n    f += \"\\n        return getChannel(\\n          getT\" + p + \"(\" + Ha(i, c, v) + \"),\\n          vec2(\" + Ha(l, c, v) + \"));\", this.userCode = \"\\n      float getValue(\" + i.map(function(t) {\n        return \"int \" + t;\n    }) + \") {\\n        \" + f + \"\\n      }\\n\\n      void main() {\\n        \" + o + \" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\" + a + \"), 0., 0., 0.);\\n\\n        \" + a[r - 1] + \" = \" + a[r - 1] + \" + 1;\\n        if (\" + a[r - 1] + \" < \" + n[r - 1] + \") {\\n          result.g = getValue(\" + a + \");\\n        }\\n\\n        \" + a[r - 2] + \" = \" + a[r - 2] + \" + 1;\\n        if (\" + a[r - 2] + \" < \" + n[r - 2] + \") {\\n          result.a = getValue(\" + a + \");\\n        }\\n\\n        \" + a[r - 1] + \" = \" + a[r - 1] + \" - 1;\\n        if (\" + a[r - 2] + \" < \" + n[r - 2] + \" &&\\n            \" + a[r - 1] + \" < \" + n[r - 1] + \") {\\n          result.b = getValue(\" + a + \");\\n        }\\n        setOutput(result);\\n      }\\n    \";\n};\nfunction Ha(t, e, n) {\n    var r = t.indexOf(e);\n    return t.map(function(t, e) {\n        return e === r ? t + \" - \" + n : t;\n    }).join();\n}\nvar qa = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, a = \"channelsLast\" === t.dataFormat;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + e + \" - \" + r + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + n + \" - \" + o + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              if (\" + a + \") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Ka = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = \"channelsLast\" === t.dataFormat, i = e - 1 - t.padInfo.top, s = n - 1 - t.padInfo.left, u = a ? 1 : 2, c = a ? 2 : 3, l = a ? 3 : 1;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\" + l + \"];\\n\\n        ivec2 dyCorner = ivec2(coords[\" + u + \"], coords[\" + c + \"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + e + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + e + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + n + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + n + \" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \" + t.outChannels + \"; d2++) {\\n\\n              if (\" + a + \") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, ja = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideDepth, n = t.strideHeight, r = t.strideWidth, o = t.padInfo.front, a = t.padInfo.top, i = t.padInfo.left;\n    this.userCode = \"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yF = 0; yF < \" + t.outDepth + \"; yF++) {\\n            int xF = wF + yF * \" + e + \" - \" + o + \";\\n\\n            if (xF < 0 || xF >= \" + t.inDepth + \") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n              int xR = wR + yR * \" + n + \" - \" + a + \";\\n\\n              if (xR < 0 || xR >= \" + t.inHeight + \") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n                int xC = wC + yC * \" + r + \" - \" + i + \";\\n\\n                if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Xa = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterDepth, n = t.filterHeight, r = t.filterWidth, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = e - 1 - t.padInfo.front, u = n - 1 - t.padInfo.top, c = r - 1 - t.padInfo.left;\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + s + \", \" + u + \", \" + c + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \" + e + \"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \" + o + \".0;\\n\\n          if (dyF < 0.0 || dyF >= \" + t.outDepth + \".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \" + e + \" - 1 - wF;\\n\\n          for (int wR = 0; wR < \" + n + \"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \" + a + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \" + n + \" - 1 - wR;\\n\\n            for (int wC = 0; wC < \" + r + \"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \" + i + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \" + r + \" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \" + t.outChannels + \"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Ya = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, a = t.outChannels / t.inChannels;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \" + a + \" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + e + \" - \" + r + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + n + \" - \" + o + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, $a = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = e - 1 - t.padInfo.top, i = n - 1 - t.padInfo.left, s = t.outChannels / t.inChannels;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + a + \", \" + i + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \" + e + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + e + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + n + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + n + \" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \" + s + \"; dm++) {\\n              int d2 = d1 * \" + s + \" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Qa = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var o = t.padInfo.top, a = t.padInfo.left, i = t.strideHeight, s = t.strideWidth, u = t.dilationHeight, c = t.dilationWidth, l = t.filterHeight, h = t.filterWidth, f = 4 * Math.floor(t.inChannels / 4), d = t.inChannels % 4, p = \"channelsLast\" === t.dataFormat, v = p ? 1 : 2, m = p ? 2 : 3, g = p ? 3 : 1, y = \"\", x = \"\";\n    n && (y = r ? \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"\\n          float activation(float x) {\\n            \" + n + \"\\n          }\\n        \", x = \"result = activation(result);\");\n    var b = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + y + \"\\n\\n      const ivec2 strides = ivec2(\" + i + \", \" + s + \");\\n      const ivec2 pads = ivec2(\" + o + \", \" + a + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\" + g + \"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\" + v + \"], coords[\" + m + \"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + l + \"; wR++) {\\n          int xR = xRCorner + wR * \" + u + \";\\n\\n          if (xR < 0 || xR >= \" + t.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + h + \"; wC++) {\\n            int xC = xCCorner + wC * \" + c + \";\\n\\n            if (xC < 0 || xC >= \" + t.inWidth + \") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \" + f + \"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\" + (1 === d) + \") {\\n\\n              if (\" + p + \") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \" + f + \") *\\n                    getW(wR, wC, \" + f + \", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \" + f + \", xR, xC) *\\n                    getW(wR, wC, \" + f + \", d2);\\n              }\\n\\n            } else if (\" + (2 === d) + \") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \" + f + \", d2),\\n                getW(wR, wC, \" + f + \" + 1, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \" + f + \"),\\n                  getX(batch, xR, xC, \" + f + \" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \" + f + \", xR, xC),\\n                  getX(batch, \" + f + \" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\" + (3 === d) + \") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \" + f + \", d2),\\n                getW(wR, wC, \" + f + \" + 1, d2),\\n                getW(wR, wC, \" + f + \" + 2, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \" + f + \"),\\n                  getX(batch, xR, xC, \" + f + \" + 1),\\n                  getX(batch, xR, xC, \" + f + \" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \" + f + \", xR, xC),\\n                  getX(batch, \" + f + \" + 1, xR, xC),\\n                  getX(batch, \" + f + \" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \" + b + \"\\n        \" + x + \"\\n        setOutput(result);\\n      }\\n    \";\n}, Ja = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var e = t.padInfo.front, n = t.padInfo.top, r = t.padInfo.left, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = t.dilationDepth, u = t.dilationHeight, c = t.dilationWidth, l = t.filterDepth, h = t.filterHeight, f = t.filterWidth, d = 4 * Math.floor(t.inChannels / 4), p = t.inChannels % 4;\n    this.userCode = \"\\n      const ivec3 strides = ivec3(\" + o + \", \" + a + \", \" + i + \");\\n      const ivec3 pads = ivec3(\" + e + \", \" + n + \", \" + r + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \" + l + \"; wF++) {\\n          int xF = xFCorner + wF * \" + s + \";\\n\\n          if (xF < 0 || xF >= \" + t.inDepth + \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \" + h + \"; wR++) {\\n            int xR = xRCorner + wR * \" + u + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + f + \"; wC++) {\\n              int xC = xCCorner + wC * \" + c + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \" + d + \"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\" + (1 === p) + \") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \" + d + \") *\\n                  getW(wF, wR, wC, \" + d + \", d2);\\n              } else if (\" + (2 === p) + \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \" + d + \"),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \" + d + \", d2),\\n                  getW(wF, wR, wC, \" + d + \" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\" + (3 === p) + \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \" + d + \"),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 1),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \" + d + \", d2),\\n                  getW(wF, wR, wC, \" + d + \" + 1, d2),\\n                  getW(wF, wR, wC, \" + d + \" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Za = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var o = t.inHeight, a = t.inWidth, i = t.padInfo.top, s = t.padInfo.left, u = t.strideHeight, c = t.strideWidth, l = t.dilationHeight, h = t.dilationWidth, f = t.filterHeight, d = t.filterWidth, p = t.outChannels / t.inChannels, v = \"\", m = \"\";\n    n && (v = r ? \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"\\n          float activation(float x) {\\n            \" + n + \"\\n          }\\n        \", m = \"result = activation(result);\");\n    var g = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + v + \"\\n\\n      const ivec2 strides = ivec2(\" + u + \", \" + c + \");\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \" + p + \";\\n        int q = d2 - d1 * \" + p + \";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \" + f + \"; wR++) {\\n          int xR = xRCorner + wR * \" + l + \";\\n\\n          if (xR < 0 || xR >= \" + o + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + d + \"; wC++) {\\n            int xC = xCCorner + wC * \" + h + \";\\n\\n            if (xC < 0 || xC >= \" + a + \") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \" + g + \"\\n        \" + m + \"\\n        setOutput(result);\\n      }\\n    \";\n}, ti = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t.outShape;\n    for(var o = t.inHeight, a = t.inWidth, i = t.padInfo.top, s = t.padInfo.left, u = t.strideHeight, c = t.strideWidth, l = t.dilationHeight, h = t.dilationWidth, f = t.filterHeight, d = t.filterWidth, p = d, v = \"int xR; int xC; int xCOffset;\", m = 0; m < f; m++)for(var g = 0; g < d; g++)v += \"\\n          vec4 xTexelR\" + m + \"C\" + 2 * g + \" = vec4(0.);\\n          vec4 wR\" + m + \"C\" + g + \" = vec4(0.);\\n          vec4 xR\" + m + \"C\" + g + \" = vec4(0.);\";\n    for(m = 0; m < f; m++)for(var y = 0; y < p; y++){\n        if (v += \"\\n          xR = xRCorner + \" + m * l + \";\\n          xC = xCCorner + \" + (g = 2 * y) * h + \";\\n        \", 1 === c) {\n            if (g < d && (v += s % 2 == 1 ? \"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \" + o + \" && xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + g + \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + a + \") {\\n                    xTexelR\" + m + \"C\" + g + \".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\" + m + \"C\" + g + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \" + o + \" && xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + a + \") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\" + m + \"C\" + g + \" = vec4(previous.zw, xTexelR\" + m + \"C\" + g + \".xy);\\n                } else {\\n                  xR\" + m + \"C\" + g + \" = vec4(0, 0, xTexelR\" + m + \"C\" + g + \".xy);\\n                }\\n              \" : \"\\n                if(xR >= 0 && xR < \" + o + \" && xC >= 0 && xC < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + g + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + m + \"C\" + g + \" = vec4(0.);\\n                }\\n\\n                xR\" + m + \"C\" + g + \" = xTexelR\" + m + \"C\" + g + \";\\n              \", g + 1 < d)) {\n                var x = s % 2 == 0 ? b(h) : h;\n                h % 2 == 0 && s % 2 == 1 || h % 2 != 0 && s % 2 != 1 ? (v += \"\\n                  xCOffset = xC + \" + s % 2 + \" + \" + x + \";\\n\\n                  if(xR >= 0 && xR < \" + o + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    xTexelR\" + m + \"C\" + (g + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \", h > 1 && (v += \"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \" + o + \" &&\\n                      xCOffset >= 0 && xCOffset < \" + a + \") {\\n                      xTexelR\" + m + \"C\" + g + \" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\" + m + \"C\" + g + \" = vec4(0.);\\n                    }\\n                  \"), v += \"\\n                  xR\" + m + \"C\" + (g + 1) + \" = vec4(\\n                    xTexelR\" + m + \"C\" + g + \".zw, xTexelR\" + m + \"C\" + (g + 2) + \".xy);\\n                \") : v += \"\\n                  xCOffset = xC + \" + x + \";\\n\\n                  if(xR >= 0 && xR < \" + o + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    xTexelR\" + m + \"C\" + (g + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\" + m + \"C\" + (g + 1) + \" = xTexelR\" + m + \"C\" + (g + 2) + \";\\n                \";\n            }\n        } else g < d && (v += \"\\n              if(xR >= 0 && xR < \" + o + \") {\\n            \", s % 2 == 1 ? (v += \"\\n                xCOffset = xC + 1 - \" + c + \";\\n                if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + g + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + m + \"C\" + g + \" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + (g + 2) + \" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\" + m + \"C\" + (g + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + m + \"C\" + g + \" = vec4(\\n                  xTexelR\" + m + \"C\" + g + \".zw, xTexelR\" + m + \"C\" + (g + 2) + \".zw);\\n              \", g + 1 < d && (v += \"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \" + c + \";\\n                  if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\" + m + \"C\" + (g + 1) + \" = vec4(xTexelR\" + m + \"C\" + (g + 2) + \".xy, final.xy);\\n                \")) : (v += \"\\n                if(xC >= 0 && xC < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + g + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + m + \"C\" + g + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \" + c + \";\\n                if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + m + \"C\" + (g + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + m + \"C\" + (g + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + m + \"C\" + g + \" = vec4(\\n                  xTexelR\" + m + \"C\" + g + \".xy, xTexelR\" + m + \"C\" + (g + 2) + \".xy);\\n              \", g + 1 < d && (v += \"\\n                  xR\" + m + \"C\" + (g + 1) + \" = vec4(\\n                    xTexelR\" + m + \"C\" + g + \".zw, xTexelR\" + m + \"C\" + (g + 2) + \".zw);\\n                \")), v += \"}\");\n        g < d && (v += \"\\n            vec4 wTexelR\" + m + \"C\" + g + \" = getW(\" + m + \", \" + g + \", d1, q);\\n            wR\" + m + \"C\" + g + \" = vec4(wTexelR\" + m + \"C\" + g + \".xz, wTexelR\" + m + \"C\" + g + \".xz);\\n          \", g + 1 < d && (v += \"\\n              vec4 wTexelR\" + m + \"C\" + (g + 1) + \" = getW(\" + m + \", \" + (g + 1) + \", d1, q);\\n              wR\" + m + \"C\" + (g + 1) + \" =\\n                vec4(wTexelR\" + m + \"C\" + (g + 1) + \".xz, wTexelR\" + m + \"C\" + (g + 1) + \".xz);\"));\n    }\n    for(m = 0; m < f; m++)for(g = 0; g < d; g++)v += \"dotProd += xR\" + m + \"C\" + g + \" * wR\" + m + \"C\" + g + \";\";\n    var w = \"\", C = \"\";\n    n && (w = r ? \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"vec4 activation(vec4 x) {\\n          \" + n + \"\\n        }\", C = \"result = activation(result);\");\n    var E = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + w + \"\\n\\n      const ivec2 strides = ivec2(\" + u + \", \" + c + \");\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \" + v + \"\\n\\n        vec4 result = dotProd;\\n        \" + E + \"\\n        \" + C + \"\\n        setOutput(result);\\n      }\\n    \";\n}, ei = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"Image\",\n        \"Boxes\",\n        \"BoxInd\"\n    ], this.outputShape = [];\n    var a = t[0], i = t[1], s = t[2], u = t[3], c = e[0], l = n[0], h = n[1];\n    this.outputShape = [\n        c,\n        l,\n        h,\n        u\n    ];\n    var f = \"bilinear\" === r ? 1 : 0, d = [\n        i - 1 + \".0\",\n        s - 1 + \".0\"\n    ], p = d[0], v = d[1], m = l > 1 ? [\n        \"\" + (i - 1) / (l - 1),\n        \"(y2-y1) * height_ratio\",\n        \"y1*\" + p + \" + float(y)*(height_scale)\"\n    ] : [\n        \"0.0\",\n        \"0.0\",\n        \"0.5 * (y1+y2) * \" + p\n    ], g = m[0], y = m[1], x = m[2], b = h > 1 ? [\n        \"\" + (s - 1) / (h - 1),\n        \"(x2-x1) * width_ratio\",\n        \"x1*\" + v + \" + float(x)*(width_scale)\"\n    ] : [\n        \"0.0\",\n        \"0.0\",\n        \"0.5 * (x1+x2) * \" + v\n    ], w = b[0], C = b[1], E = b[2];\n    this.userCode = \"\\n      const float height_ratio = float(\" + g + \");\\n      const float width_ratio = float(\" + w + \");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \" + a + \") {\\n          return;\\n        }\\n\\n        float height_scale = \" + y + \";\\n        float width_scale = \" + C + \";\\n\\n        float in_y = \" + x + \";\\n        if( in_y < 0.0 || in_y > \" + p + \" ) {\\n          setOutput(float(\" + o + \"));\\n          return;\\n        }\\n        float in_x = \" + E + \";\\n        if( in_x < 0.0 || in_x > \" + v + \" ) {\\n          setOutput(float(\" + o + \"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\" + f + \" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \";\n}, ni = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = t;\n    var r = t.length, o = t[t.length - 1], a = n ? \"<\" : \">\";\n    this.userCode = \"\\n      int getIndex(int i) {\\n        \" + (n ? \"return \" + o + \" -i - 1;\" : \"return i;\") + \"\\n      }\\n\\n      void main() {\\n        \" + wa(r) + \" coords = getOutputCoords();\\n        int end = \" + ri(r, \"coords\") + \";\\n        float val = 0.0;\\n        for (int i = \" + o + \" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \" + a + \" end) {\\n            continue;\\n          }\\n          if (idx == end && \" + e + \") {\\n            continue;\\n          }\\n          \" + ri(r, \"coords\") + \" = idx;\\n          val += getX(\" + function(t, e) {\n        if (1 === t) return \"\" + e;\n        if (2 === t) return e + \".x, \" + e + \".y\";\n        if (3 === t) return e + \".x, \" + e + \".y, \" + e + \".z\";\n        if (4 === t) return e + \".x, \" + e + \".y, \" + e + \".z, \" + e + \".w\";\n        throw Error(\"Cumulative sum for rank \" + t + \" is not yet supported\");\n    }(r, \"coords\") + \");\\n        }\\n        setOutput(val);\\n      }\\n    \";\n};\nfunction ri(t, e) {\n    if (1 === t) return \"\" + e;\n    if (2 === t) return e + \".y\";\n    if (3 === t) return e + \".z\";\n    if (4 === t) return e + \".w\";\n    throw Error(\"Cumulative sum for rank \" + t + \" is not yet supported\");\n}\nvar oi = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;\n    var e = Yt(t), n = ua();\n    this.outputShape = t, this.userCode = \"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \" + ca([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], t) + \"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = 4 * (resTexRC.x * \" + e[1] + \" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \" + n.output + \" = result;\\n      }\\n    \";\n}, ai = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;\n    var e = Yt(t), n = ua();\n    this.outputShape = t, this.userCode = \"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \" + ca([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], t) + \"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = 4 * (resTexRC.x * \" + e[1] + \" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \" + n.output + \" = result;\\n      }\\n    \";\n}, ii = function() {\n    function t(t, e, n) {\n        this.variableNames = [\n            \"x\"\n        ], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = n, this.userCode = \"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \" + this.getHeightCoordString() + \";\\n      int w = \" + this.getWidthCoordString() + \";\\n      int d = \" + this.getDepthCoordString() + \";\\n\\n      int in_h = h / \" + e + \";\\n      int offset_h = imod(h, \" + e + \");\\n      int in_w = w / \" + e + \";\\n      int offset_w = imod(w, \" + e + \");\\n      int offset_d = (offset_h * \" + e + \" + offset_w) *\\n        \" + this.getOutputDepthSize() + \";\\n      int in_d = d + offset_d;\\n\\n      float result = \" + this.getInputSamplingString() + \";\\n      setOutput(result);\\n    }\\n  \";\n    }\n    return t.prototype.getHeightCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[1]\" : \"coords[2]\";\n    }, t.prototype.getWidthCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[2]\" : \"coords[3]\";\n    }, t.prototype.getDepthCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[3]\" : \"coords[1]\";\n    }, t.prototype.getOutputDepthSize = function() {\n        return \"NHWC\" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];\n    }, t.prototype.getInputSamplingString = function() {\n        return \"NHWC\" === this.dataFormat ? \"getX(b, in_h, in_w, in_d)\" : \"getX(b, in_d, in_h, in_w)\";\n    }, t;\n}(), si = function(t) {\n    this.variableNames = [\n        \"X\"\n    ], this.outputShape = [\n        t,\n        t\n    ], this.userCode = \"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \";\n}, ui = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.outTexUsage = zt.DOWNLOAD;\n    var e = ua();\n    this.outputShape = t, this.userCode = \"\\n      \" + ha + \"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \" + e.output + \" = encode_float(x);\\n      }\\n    \";\n}, ci = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = zt.DOWNLOAD;\n    var e = ua();\n    this.outputShape = t, this.userCode = \"\\n      \" + ha + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \" + e.output + \" = encode_float(x);\\n      }\\n    \";\n}, li = function(t, e, n) {\n    void 0 === n && (n = !1), this.variableNames = [\n        \"A\"\n    ];\n    var r = ua(), o = e[0], a = e[1];\n    this.outputShape = t;\n    var i = \"result\";\n    n && (i = \"floor(result * 255. + 0.5)\"), this.userCode = \"\\n      \" + la(t) + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \" + a + \";\\n        int c = imod(flatIndex, \" + a + \");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\" + a + \".0, \" + o + \".0);\\n        vec4 values = \" + r.texture2D + \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \" + r.output + \" = vec4(\" + i + \", 0., 0., 0.);\\n      }\\n    \";\n}, hi = function(t, e, n) {\n    void 0 === n && (n = !1), this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0;\n    var r = ua(), o = e[0], a = e[1];\n    this.outputShape = t;\n    var i = \"\", s = \"result\";\n    n && (s = \"floor(result * 255. + 0.5)\");\n    for(var u = 0; u <= 1; u++)for(var c = 0; c <= 1; c++){\n        var l = 2 * u + c;\n        i += \"\\n          localCoords = coords;\\n          if(localCoords[2] + \" + c + \" < \" + t[2] + \") {\\n            localCoords[2] += \" + c + \";\\n            if(localCoords[1] + \" + u + \" < \" + t[1] + \") {\\n              localCoords[1] += \" + u + \";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \" + a + \";\\n              c = imod(flatIndex, \" + a + \");\\n              uv = (vec2(c, r) + halfCR) / vec2(\" + a + \".0, \" + o + \".0);\\n              values = \" + r.texture2D + \"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\" + l + \"] = values[0];\\n              } else if(offset == 1) {\\n                result[\" + l + \"] = values[1];\\n              } else if(offset == 2) {\\n                result[\" + l + \"] = values[2];\\n              } else {\\n                result[\" + l + \"] = values[3];\\n              }\\n            }\\n          }\\n        \";\n    }\n    this.userCode = \"\\n      \" + la(t) + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \" + i + \"\\n\\n        \" + r.output + \" = \" + s + \";\\n      }\\n    \";\n}, fi = \"return real * expR - imag * expI;\", di = \"return real * expI + imag * expR;\", pi = function(t, e, n) {\n    this.variableNames = [\n        \"real\",\n        \"imag\"\n    ];\n    var r = e[1];\n    this.outputShape = e;\n    var o = n ? \"2.0 * \" + Math.PI : \"-2.0 * \" + Math.PI, a = n ? r + \".0\" : \"1.0\";\n    this.userCode = \"\\n      const float exponentMultiplier = \" + o + \";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \" + t + \"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\" + r + \");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \" + r + \"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \" + a + \";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \";\n}, vi = function() {\n    function t(t, e) {\n        this.outputShape = [], this.variableNames = [\n            \"x\"\n        ], this.outputShape = t, this.userCode = \"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        return function(n, r) {\n            null == e.valueLoc && (e.valueLoc = n.getUniformLocationNoThrow(r, \"value\")), n.gl.uniform1f(e.valueLoc, t);\n        };\n    }, t;\n}(), mi = function(t, e, n) {\n    this.variableNames = [\n        \"A\",\n        \"indices\"\n    ];\n    var r = t.slice();\n    r[n] = e, this.outputShape = r, this.rank = r.length;\n    var o = wa(this.rank), a = function(t, e) {\n        var n = t.length;\n        if (n > 4) throw Error(\"Gather for rank \" + n + \" is not yet supported\");\n        if (1 === n) return \"int(getIndices(resRC))\";\n        for(var r = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\"\n        ], o = [], a = 0; a < t.length; a++)a === e ? o.push(\"int(getIndices(\" + r[a] + \"))\") : o.push(\"\" + r[a]);\n        return o.join();\n    }(t, n);\n    this.userCode = \"\\n      void main() {\\n        \" + o + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + a + \"));\\n      }\\n    \";\n};\nvar gi = function(t, e, n) {\n    this.sliceDim = t, this.strides = e, this.variableNames = [\n        \"x\",\n        \"indices\"\n    ], this.outputShape = n;\n    var r = wa(e.length), o = wa(n.length), a = this.sliceDim > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = \"\\n        \" + r + \" strides = \" + r + \"(\" + this.strides + \");\\n         void main() {\\n          \" + o + \" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \" + this.sliceDim + \"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \" + a + \";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \";\n};\nfunction yi(t, e) {\n    var n = ua();\n    return oe(t, e, n.version + \"\\n    precision highp float;\\n    \" + n.attribute + \" vec3 clipSpacePos;\\n    \" + n.attribute + \" vec2 uv;\\n    \" + n.varyingVs + \" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");\n}\nfunction xi(t, e) {\n    return fe(t, e, new Float32Array([\n        -1,\n        1,\n        0,\n        0,\n        1,\n        -1,\n        -1,\n        0,\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        -1,\n        0,\n        1,\n        0\n    ]));\n}\nfunction bi(t, e) {\n    return de(t, e, new Uint16Array([\n        0,\n        1,\n        2,\n        2,\n        1,\n        3\n    ]));\n}\nfunction wi(t, e, n, r, o, a, i) {\n    ve(n, r);\n    var s = pe(t, e), u = t.TEXTURE_2D;\n    return Jt(t, e, function() {\n        return t.bindTexture(u, s);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_MIN_FILTER, t.NEAREST);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_MAG_FILTER, t.NEAREST);\n    }), Jt(t, e, function() {\n        return t.texImage2D(u, 0, o, n, r, 0, a, i, null);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    }), s;\n}\nfunction Ci(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return wi(t, e, a[0], a[1], o.internalFormatFloat, o.textureFormatFloat, t.FLOAT);\n}\nfunction Ei(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return wi(t, e, a[0], a[1], o.internalFormatHalfFloat, o.textureFormatFloat, o.textureTypeHalfFloat);\n}\nfunction Ri(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return wi(t, e, a[0], a[1], t.RGBA, t.RGBA, t.UNSIGNED_BYTE);\n}\nfunction Ii(t, e, n, r, o) {\n    var a = $t(n, r);\n    return wi(t, e, a[0], a[1], o.internalFormatPackedFloat, t.RGBA, t.FLOAT);\n}\nfunction ki(t, e, n, r, o) {\n    var a = $t(n, r);\n    return wi(t, e, a[0], a[1], o.internalFormatPackedHalfFloat, t.RGBA, o.textureTypeHalfFloat);\n}\nfunction Si(t, e, n, r) {\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, r);\n    }), ge(t, e, n, \"clipSpacePos\", r, 3, 20, 0) && ge(t, e, n, \"uv\", r, 2, 20, 12);\n}\nfunction Ai(t, e, n, r, o, a, i) {\n    var s, u, c;\n    Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    }), a instanceof Uint8Array ? (s = new Uint8Array(r * o * 4), u = t.UNSIGNED_BYTE, c = t.RGBA) : (s = new Float32Array(r * o * 4), u = t.FLOAT, c = i.internalFormatPackedFloat), s.set(a), Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, c, r, o, 0, t.RGBA, u, s);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    });\n}\nfunction Di(t, e, n, r) {\n    Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    }), r.data instanceof Uint8Array ? Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, r.width, r.height, 0, t.RGBA, t.UNSIGNED_BYTE, r.data);\n    }) : Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, r);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    });\n}\nfunction Ti(t, e, n, r, o) {\n    var a = t.createBuffer();\n    Jt(t, e, function() {\n        return t.bindBuffer(t.PIXEL_PACK_BUFFER, a);\n    });\n    var i = 16 * n * r;\n    return Jt(t, e, function() {\n        return t.bufferData(t.PIXEL_PACK_BUFFER, i, t.STREAM_READ);\n    }), Jt(t, e, function() {\n        return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, 0);\n    }), Jt(t, e, function() {\n        return t.bindBuffer(t.PIXEL_PACK_BUFFER, null);\n    }), a;\n}\nfunction Ni(t, e, n) {\n    var r = t, o = new Float32Array(n);\n    return r.bindBuffer(r.PIXEL_PACK_BUFFER, e), r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, o), r.bindBuffer(r.PIXEL_PACK_BUFFER, null), o;\n}\nfunction Fi(t, e, n, r, o) {\n    var a = Xt(n, r), i = a[0], s = a[1], u = new Uint8Array(n * r * 4);\n    return Jt(t, e, function() {\n        return t.readPixels(0, 0, i, s, o.downloadTextureFormat, t.UNSIGNED_BYTE, u);\n    }), new Float32Array(u.buffer);\n}\nfunction _i(t, e, n, r, o, a, i, s) {\n    var u = t, c = new Float32Array(function(t, e) {\n        var n = $t(t, e);\n        return n[0] * n[1] * 4;\n    }(a, i));\n    return u.bindBuffer(u.PIXEL_PACK_BUFFER, e), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, c), u.bindBuffer(u.PIXEL_PACK_BUFFER, null), c;\n}\nfunction Oi(t, e, n, r) {\n    var o = new Float32Array(n * r * 4);\n    return Jt(t, e, function() {\n        return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, o);\n    }), o;\n}\nvar Mi = Object.freeze({\n    createVertexShader: yi,\n    createVertexBuffer: xi,\n    createIndexBuffer: bi,\n    createFloat32MatrixTexture: Ci,\n    createFloat16MatrixTexture: Ei,\n    createUnsignedBytesMatrixTexture: Ri,\n    createPackedMatrixTexture: Ii,\n    createFloat16PackedMatrixTexture: ki,\n    bindVertexProgramAttributeStreams: Si,\n    uploadDenseMatrixToTexture: Ai,\n    uploadPixelDataToTexture: Di,\n    createBufferFromOutputTexture: Ti,\n    downloadFloat32MatrixFromBuffer: Ni,\n    downloadByteEncodedFloatMatrixFromOutputTexture: Fi,\n    downloadPackedMatrixFromBuffer: _i,\n    downloadMatrixFromPackedOutputTexture: Oi\n}), Bi = function() {\n    function t(t) {\n        this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];\n        var e = i().getNumber(\"WEBGL_VERSION\");\n        null != t ? (this.gl = t, Kt(e, t)) : this.gl = jt(e);\n        var n = \"WEBGL_color_buffer_float\";\n        if (1 === i().getNumber(\"WEBGL_VERSION\")) {\n            if (this.textureFloatExtension = re(this.gl, this.debug, \"OES_texture_float\"), Pe(this.gl, \"OES_texture_half_float\")) this.textureHalfFloatExtension = re(this.gl, this.debug, \"OES_texture_half_float\");\n            else if (i().get(\"WEBGL_FORCE_F16_TEXTURES\")) throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n            if (this.colorBufferFloatExtension = this.gl.getExtension(n), Pe(this.gl, \"EXT_color_buffer_half_float\")) this.colorBufferHalfFloatExtension = re(this.gl, this.debug, \"EXT_color_buffer_half_float\");\n            else if (i().get(\"WEBGL_FORCE_F16_TEXTURES\")) throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n        } else if (n = \"EXT_color_buffer_float\", Pe(this.gl, n)) this.colorBufferFloatExtension = this.gl.getExtension(n);\n        else {\n            if (!Pe(this.gl, \"EXT_color_buffer_half_float\")) throw new Error(\"GL context does not support color renderable floats\");\n            this.colorBufferHalfFloatExtension = this.gl.getExtension(\"EXT_color_buffer_half_float\");\n        }\n        this.vertexBuffer = xi(this.gl, this.debug), this.indexBuffer = bi(this.gl, this.debug), this.framebuffer = me(this.gl, this.debug), this.textureConfig = Qt(this.gl, this.textureHalfFloatExtension);\n    }\n    return Object.defineProperty(t.prototype, \"debug\", {\n        get: function() {\n            return i().getBool(\"DEBUG\");\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.dispose = function() {\n        var t = this;\n        if (!this.disposed) {\n            null != this.program && console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"), null != this.outputTexture && console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");\n            var e = this.gl;\n            Jt(e, this.debug, function() {\n                return e.finish();\n            }), Jt(e, this.debug, function() {\n                return e.bindFramebuffer(e.FRAMEBUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.deleteFramebuffer(t.framebuffer);\n            }), Jt(e, this.debug, function() {\n                return e.bindBuffer(e.ARRAY_BUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.deleteBuffer(t.indexBuffer);\n            }), this.disposed = !0;\n        }\n    }, t.prototype.createFloat32MatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), Ci(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createFloat16MatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), Ei(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createUnsignedBytesMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), Ri(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.uploadPixelDataToTexture = function(t, e) {\n        this.throwIfDisposed(), Di(this.gl, this.debug, t, e);\n    }, t.prototype.uploadDenseMatrixToTexture = function(t, e, n, r) {\n        this.throwIfDisposed(), Ai(this.gl, this.debug, t, e, n, r, this.textureConfig);\n    }, t.prototype.createFloat16PackedMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), ki(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createPackedMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), Ii(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.deleteMatrixTexture = function(t) {\n        var e = this;\n        this.throwIfDisposed(), this.outputTexture === t && (Ee(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Jt(this.gl, this.debug, function() {\n            return e.gl.deleteTexture(t);\n        });\n    }, t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t, e, n) {\n        var r = this;\n        return this.downloadMatrixDriver(t, function() {\n            return Fi(r.gl, r.debug, e, n, r.textureConfig);\n        });\n    }, t.prototype.downloadPackedMatrixFromBuffer = function(t, e, n, r, o, a) {\n        return _i(this.gl, t, 0, 0, 0, o, a, this.textureConfig);\n    }, t.prototype.downloadFloat32MatrixFromBuffer = function(t, e) {\n        return Ni(this.gl, t, e);\n    }, t.prototype.createBufferFromTexture = function(t, e, n) {\n        this.bindTextureToFrameBuffer(t);\n        var r = Ti(this.gl, this.debug, e, n, this.textureConfig);\n        return this.unbindTextureToFrameBuffer(), r;\n    }, t.prototype.createAndWaitForFence = function() {\n        var t = this.createFence(this.gl);\n        return this.pollFence(t);\n    }, t.prototype.createFence = function(t) {\n        var e, n, r = this;\n        if (i().getBool(\"WEBGL_FENCE_API_ENABLED\")) {\n            var o = t, a = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            t.flush(), n = function() {\n                var t = o.clientWaitSync(a, 0, 0);\n                return t === o.ALREADY_SIGNALED || t === o.CONDITION_SATISFIED;\n            }, e = a;\n        } else i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0 ? (e = this.beginQuery(), this.endQuery(), n = function() {\n            return r.isQueryAvailable(e, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n        }) : n = function() {\n            return !0;\n        };\n        return {\n            query: e,\n            isFencePassed: n\n        };\n    }, t.prototype.downloadMatrixFromPackedTexture = function(t, e, n) {\n        var r = this;\n        return this.downloadMatrixDriver(t, function() {\n            return Oi(r.gl, r.debug, e, n);\n        });\n    }, t.prototype.createProgram = function(t) {\n        this.throwIfDisposed();\n        var e = this.gl, n = ae(e, this.debug, t), r = yi(e, this.debug), o = ce(e, this.debug);\n        return Jt(e, this.debug, function() {\n            return e.attachShader(o, r);\n        }), Jt(e, this.debug, function() {\n            return e.attachShader(o, n);\n        }), le(e, this.debug, o), this.debug && he(e, this.debug, o), this.vertexAttrsAreBound || (this.setProgram(o), this.vertexAttrsAreBound = Si(e, this.debug, this.program, this.vertexBuffer)), o;\n    }, t.prototype.deleteProgram = function(t) {\n        var e = this;\n        this.throwIfDisposed(), t === this.program && (this.program = null), null != t && Jt(this.gl, this.debug, function() {\n            return e.gl.deleteProgram(t);\n        });\n    }, t.prototype.setProgram = function(t) {\n        var e = this;\n        this.throwIfDisposed(), this.program = t, null != this.program && this.debug && he(this.gl, this.debug, this.program), Jt(this.gl, this.debug, function() {\n            return e.gl.useProgram(t);\n        });\n    }, t.prototype.getUniformLocation = function(t, e, n) {\n        return void 0 === n && (n = !0), this.throwIfDisposed(), n ? xe(this.gl, this.debug, t, e) : be(this.gl, t, e);\n    }, t.prototype.getAttributeLocation = function(t, e) {\n        var n = this;\n        return this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return n.gl.getAttribLocation(t, e);\n        });\n    }, t.prototype.getUniformLocationNoThrow = function(t, e) {\n        return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);\n    }, t.prototype.setInputMatrixTexture = function(t, e, n) {\n        this.throwIfDisposed(), this.throwIfNoProgram(), we(this.gl, this.debug, this.program, t, e, n);\n    }, t.prototype.setOutputMatrixTexture = function(t, e, n) {\n        this.setOutputMatrixTextureDriver(t, n, e);\n    }, t.prototype.setOutputPackedMatrixTexture = function(t, e, n) {\n        this.throwIfDisposed();\n        var r = $t(e, n), o = r[0], a = r[1];\n        this.setOutputMatrixTextureDriver(t, o, a);\n    }, t.prototype.setOutputMatrixWriteRegion = function(t, e, n, r) {\n        this.setOutputMatrixWriteRegionDriver(n, t, r, e);\n    }, t.prototype.setOutputPackedMatrixWriteRegion = function(t, e, n, r) {\n        throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\");\n    }, t.prototype.debugValidate = function() {\n        null != this.program && he(this.gl, this.debug, this.program), Re(this.gl);\n    }, t.prototype.executeProgram = function() {\n        this.throwIfDisposed(), this.throwIfNoProgram();\n        var t = this.gl;\n        this.debug && this.debugValidate(), Jt(t, this.debug, function() {\n            return t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0);\n        });\n    }, t.prototype.blockUntilAllProgramsCompleted = function() {\n        var t = this;\n        this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return t.gl.finish();\n        });\n    }, t.prototype.getQueryTimerExtension = function() {\n        return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = re(this.gl, this.debug, 2 === i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") ? \"EXT_disjoint_timer_query_webgl2\" : \"EXT_disjoint_timer_query\")), this.disjointQueryTimerExtension;\n    }, t.prototype.getQueryTimerExtensionWebGL2 = function() {\n        return this.getQueryTimerExtension();\n    }, t.prototype.getQueryTimerExtensionWebGL1 = function() {\n        return this.getQueryTimerExtension();\n    }, t.prototype.beginQuery = function() {\n        if (2 === i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")) {\n            var t = this.gl, e = this.getQueryTimerExtensionWebGL2(), n = t.createQuery();\n            return t.beginQuery(e.TIME_ELAPSED_EXT, n), n;\n        }\n        var r = this.getQueryTimerExtensionWebGL1(), o = r.createQueryEXT();\n        return r.beginQueryEXT(r.TIME_ELAPSED_EXT, o), o;\n    }, t.prototype.endQuery = function() {\n        if (2 !== i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")) {\n            var t = this.getQueryTimerExtensionWebGL1();\n            t.endQueryEXT(t.TIME_ELAPSED_EXT);\n        } else {\n            var e = this.gl, n = this.getQueryTimerExtensionWebGL2();\n            e.endQuery(n.TIME_ELAPSED_EXT);\n        }\n    }, t.prototype.waitForQueryAndGetTime = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e = this;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            F(function() {\n                                return e.disposed || e.isQueryAvailable(t, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n                            })\n                        ];\n                    case 1:\n                        return n.sent(), [\n                            2,\n                            this.getQueryTime(t, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))\n                        ];\n                }\n            });\n        });\n    }, t.prototype.getQueryTime = function(t, e) {\n        if (0 === e) return null;\n        if (2 === e) {\n            var n = this.gl;\n            return n.getQueryParameter(t, n.QUERY_RESULT) / 1e6;\n        }\n        var r = this.getQueryTimerExtensionWebGL1();\n        return r.getQueryObjectEXT(t, r.QUERY_RESULT_EXT) / 1e6;\n    }, t.prototype.isQueryAvailable = function(t, e) {\n        if (0 === e) return !0;\n        if (2 === e) {\n            var n = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = n.getQueryParameter(t, n.QUERY_RESULT_AVAILABLE);\n            return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;\n        }\n        o = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t, r.QUERY_RESULT_AVAILABLE_EXT);\n        return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;\n    }, t.prototype.pollFence = function(t) {\n        var e = this;\n        return new Promise(function(n) {\n            e.addItemToPoll(function() {\n                return t.isFencePassed();\n            }, function() {\n                return n();\n            });\n        });\n    }, t.prototype.pollItems = function() {\n        for(var t = function(t) {\n            for(var e = 0; e < t.length; ++e){\n                if (!t[e]()) break;\n            }\n            return e - 1;\n        }(this.itemsToPoll.map(function(t) {\n            return t.isDoneFn;\n        })), e = 0; e <= t; ++e){\n            (0, this.itemsToPoll[e].resolveFn)();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(t + 1);\n    }, t.prototype.addItemToPoll = function(t, e) {\n        var n = this;\n        this.itemsToPoll.push({\n            isDoneFn: t,\n            resolveFn: e\n        }), this.itemsToPoll.length > 1 || F(function() {\n            return n.pollItems(), 0 === n.itemsToPoll.length;\n        });\n    }, t.prototype.bindTextureToFrameBuffer = function(t) {\n        this.throwIfDisposed(), Ce(this.gl, this.debug, t, this.framebuffer), this.debug && Re(this.gl);\n    }, t.prototype.unbindTextureToFrameBuffer = function() {\n        null != this.outputTexture ? (Ce(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && Re(this.gl)) : Ee(this.gl, this.debug, this.framebuffer);\n    }, t.prototype.downloadMatrixDriver = function(t, e) {\n        this.bindTextureToFrameBuffer(t);\n        var n = e();\n        return this.unbindTextureToFrameBuffer(), n;\n    }, t.prototype.setOutputMatrixTextureDriver = function(t, e, n) {\n        this.throwIfDisposed();\n        var r = this.gl;\n        Ce(r, this.debug, t, this.framebuffer), this.debug && Re(r), this.outputTexture = t, Jt(r, this.debug, function() {\n            return r.viewport(0, 0, e, n);\n        }), Jt(r, this.debug, function() {\n            return r.scissor(0, 0, e, n);\n        });\n    }, t.prototype.setOutputMatrixWriteRegionDriver = function(t, e, n, r) {\n        var o = this;\n        this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return o.gl.scissor(t, e, n, r);\n        });\n    }, t.prototype.throwIfDisposed = function() {\n        if (this.disposed) throw new Error(\"Attempted to use disposed GPGPUContext.\");\n    }, t.prototype.throwIfNoProgram = function() {\n        if (null == this.program) throw new Error(\"No GPU program is currently set.\");\n    }, t;\n}();\nfunction Pi(t, e) {\n    if (t.length !== e.length) throw Error(\"Binary was compiled with \" + t.length + \" inputs, but was executed with \" + e.length + \" inputs\");\n    t.forEach(function(t, n) {\n        var r = t.logicalShape, o = e[n], a = o.shape;\n        if (!S(r, a)) throw Error(\"Binary was compiled with different shapes than the current args. Shapes \" + r + \" and \" + a + \" must match\");\n        if (!t.isUniform || !o.isUniform) {\n            var i = t.texShape, s = o.isUniform ? null : o.texData.texShape;\n            if (!S(i, s)) throw Error(\"Binary was compiled with different texture shapes than the current args. Shape \" + i + \" and \" + s + \" must match\");\n        }\n    });\n}\nvar Li = function(t, e, n) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t;\n    for(var r = n.filterWidth, o = n.inChannels, a = n.strideWidth, i = n.strideHeight, s = n.padInfo, u = n.outWidth, c = n.dilationWidth, l = n.dilationHeight, h = n.dataFormat, f = s.left, d = s.top, p = o * r, v = ua(), m = \"channelsLast\" === h, g = m ? 0 : 1, y = m ? 1 : 2, x = \"\", b = 0; b <= 1; b++)for(var w = 0; w <= 1; w++)x += \"\\n          blockIndex = rc.y + \" + w + \";\\n          pos = rc.x + \" + b + \";\\n\\n          if(blockIndex < \" + t[1] + \" && pos < \" + t[0] + \") {\\n            offsetY = int(blockIndex / (\" + u + \")) * \" + i + \" - \" + d + \";\\n            d0 = offsetY + \" + l + \" * (pos / \" + p + \");\\n\\n            if(d0 < \" + e[g] + \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \" + u + \".) * \" + a + \". - \" + f + \".);\\n              d1 = offsetX + \" + c + \" * (int(mod(float(pos), \" + p + \".) / \" + o + \".));\\n\\n              if(d1 < \" + e[y] + \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \" + o + \".));\\n\\n                if (\" + m + \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\" + (2 * b + w) + \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\" + (2 * b + w) + \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";\n    this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \" + x + \"\\n\\n        \" + v.output + \" = result;\\n      }\\n    \";\n}, Wi = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = [];\n    var a, i = e, s = t[3] - 1;\n    this.outputShape = t;\n    var u = \"float(\" + n + \") + float(\" + r + \") * sum\";\n    a = .5 === o ? \"inversesqrt(\" + u + \")\" : 1 === o ? \"1.0/(\" + u + \")\" : \"exp(log(\" + u + \") * float(-\" + o + \"));\", this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + i + \"; j <= \" + i + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + s + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + a + \";\\n        setOutput(val);\\n      }\\n    \";\n}, Ui = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"inputImage\",\n        \"outputImage\",\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = n, this.alpha = r, this.beta = o, this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \" + this.depth + \"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \" + e + \")));\\n          int depthEnd = int(min(float(\" + this.depth + \"),\\n              float(d + \" + e + \" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \" + this.depth + \";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\" + r + \") * norm + float(\" + n + \");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\" + r + \")\\n                * float(\" + o + \")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \" + o + \");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \";\n}, Vi = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;\n    var a, i = e, s = t[3] - 1;\n    this.outputShape = t;\n    var u = \"float(\" + n + \") + float(\" + r + \") * sum\";\n    a = .5 === o ? \"inversesqrt(\" + u + \")\" : 1 === o ? \"1.0/(\" + u + \")\" : \"exp(log(\" + u + \") * float(-\" + o + \"));\", this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \" + this.outputShape[3] + \";\\n        bool hasNextRow = c < \" + this.outputShape[2] + \";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \" + i + \";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \" + i + \"; j <= \" + i + \"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\" + s + \"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \" + a + \";\\n        setOutput(result);\\n      }\\n    \";\n}, zi = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"maxPos\"\n    ], this.outputShape = t.inShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.dilationHeight, o = t.effectiveFilterHeight, a = t.effectiveFilterWidth, i = o - 1 - t.padInfo.top, s = a - 1 - t.padInfo.left, u = o * a - 1;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + o + \";\\n          wR += \" + r + \") {\\n          float dyR = float(dyRCorner + wR) / \" + e + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + a + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + n + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \" + u + \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \" + a + \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Gi = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"maxPos\"\n    ], this.outputShape = t.inShape;\n    var e = t.strideDepth, n = t.strideHeight, r = t.strideWidth, o = t.dilationDepth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterDepth, u = t.effectiveFilterHeight, c = t.effectiveFilterWidth, l = s - 1 - t.padInfo.front, h = u - 1 - t.padInfo.top, f = c - 1 - t.padInfo.left, d = s * u * c - 1;\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + l + \", \" + h + \", \" + f + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \" + s + \";\\n           wD += \" + o + \") {\\n          float dyD = float(dyDCorner + wD) / \" + e + \".0;\\n\\n          if (dyD < 0.0 || dyD >= \" + t.outDepth + \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \" + u + \";\\n              wR += \" + a + \") {\\n            float dyR = float(dyRCorner + wR) / \" + n + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \" + c + \";\\n                wC += \" + i + \") {\\n              float dyC = float(dyCCorner + wC) / \" + r + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \" + d + \" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \" + u + \" * \" + c + \" +\\n                  wR * \" + c + \" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Hi = function(t, e, n, r, o, a, i) {\n    void 0 === n && (n = !1), void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === a && (a = null), void 0 === i && (i = !1), this.variableNames = [\n        \"matrixA\",\n        \"matrixB\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e;\n    var s = n ? t[1] : t[2], u = Math.ceil(s / 2), c = n ? \"i * 2, rc.y\" : \"rc.y, i * 2\", l = r ? \"rc.z, i * 2\" : \"i * 2, rc.z\", h = n ? [\n        \"a.xxyy\",\n        \"a.zzww\"\n    ] : [\n        \"a.xxzz\",\n        \"a.yyww\"\n    ], f = r ? [\n        \"b.xzxz\",\n        \"b.ywyw\"\n    ] : [\n        \"b.xyxy\",\n        \"b.zwzw\"\n    ], d = \"\", p = \"\";\n    a && (d = i ? \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \" + a + \"\\n        }\" : \"vec4 activation(vec4 x) {\\n          \" + a + \"\\n        }\", p = \"result = activation(result);\");\n    var v = o ? \"result += getBiasAtOutCoords();\" : \"\";\n    o && this.variableNames.push(\"bias\"), i && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + d + \"\\n\\n      const float sharedDimension = \" + u + \".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \" + u + \"; i++) {\\n          vec4 a = getMatrixA(rc.x, \" + c + \");\\n          vec4 b = getMatrixB(rc.x, \" + l + \");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\" + h[0] + \" * \" + f[0] + \");\\n          result += (\" + h[1] + \" * \" + f[1] + \");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \" + v + \"\\n\\n        \" + p + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n}, qi = function() {\n    function t(t, e, n) {\n        this.variableNames = [\n            \"probs\"\n        ], this.outputShape = [\n            t,\n            n\n        ], this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \" + (e - 1) + \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\" + (e - 1) + \"));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        return function(n, r) {\n            null == e.seedLoc && (e.seedLoc = n.getUniformLocation(r, \"seed\")), n.gl.uniform1f(e.seedLoc, t);\n        };\n    }, t;\n}(), Ki = function(t, e, n, r) {\n    this.variableNames = [\n        \"indices\"\n    ], this.outputShape = [\n        t,\n        e\n    ], this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\" + r + \"), float(\" + n + \"),\\n                      float(index == coords.y)));\\n      }\\n    \";\n}, ji = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t;\n    var e = t.length;\n    if (0 === e) this.userCode = \"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";\n    else {\n        var n = sa(\"rc\", e), r = wa(e), o = function(t, e, n) {\n            if (1 === t) return \"rc > \" + e[0];\n            for(var r = \"\", o = t - 2; o < t; o++)r += n[o] + \" >= \" + e[o], o < t - 1 && (r += \"||\");\n            return r;\n        }(e, t, n), a = function(t, e, n, r) {\n            if (1 === t) return \"\";\n            var o = r.slice(-2);\n            return \"\\n    int r = \" + o[0] + \";\\n    int c = \" + o[1] + \";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \" + e + \";\\n    bool rEdge = rp1 >= \" + n + \";\\n  \";\n        }(e, t[t.length - 1], t[t.length - 2], n), i = function(t, e) {\n            var n = t.length, r = function(t, e) {\n                for(var n = [], r = 0; r <= 1; r++)for(var o = 0; o <= 1; o++){\n                    for(var a = (0 === r ? \"r\" : \"rp1\") + \", \" + (0 === o ? \"c\" : \"cp1\"), i = 2; i < t; i++)a = e[e.length - 1 - i] + \",\" + a;\n                    n.push(a);\n                }\n                return n;\n            }(n, e);\n            return 1 === n ? \"getA(rc),\\n            rc + 1 >= \" + t[0] + \" ? 0. : getA(rc + 1),\\n            0, 0\" : \"getA(\" + r[0] + \"),\\n          cEdge ? 0. : getA(\" + r[1] + \"),\\n          rEdge ? 0. : getA(\" + r[2] + \"),\\n          rEdge || cEdge ? 0. : getA(\" + r[3] + \")\";\n        }(t, n);\n        this.userCode = \"\\n        void main() {\\n          \" + r + \" rc = getOutputCoords();\\n\\n          if(\" + o + \") {\\n            setOutput(vec4(0));\\n          } else {\\n            \" + a + \"\\n\\n            setOutput(vec4(\" + i + \"));\\n          }\\n        }\\n      \";\n    }\n};\nvar Xi = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = e.map(function(e, n) {\n        return e[0] + t[n] + e[1];\n    });\n    var r = t.length, o = wa(r), a = e.map(function(t) {\n        return t[0];\n    }).join(\",\"), i = e.map(function(e, n) {\n        return e[0] + t[n];\n    }).join(\",\"), s = [\n        \"coords[0]\",\n        \"coords[1]\",\n        \"coords[2]\",\n        \"coords[3]\"\n    ].slice(0, r);\n    this.userCode = 1 !== r ? \"\\n      \" + o + \" start = \" + o + \"(\" + a + \");\\n      \" + o + \" end = \" + o + \"(\" + i + \");\\n\\n      void main() {\\n        \" + o + \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\" + n + \"));\\n        } else {\\n          \" + o + \" coords = outC - start;\\n          setOutput(getX(\" + s + \"));\\n        }\\n      }\\n    \" : \"\\n        int start = \" + a + \";\\n        int end = \" + i + \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\" + n + \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \";\n}, Yi = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map(function(e, n) {\n        return e[0] + t[n] + e[1];\n    });\n    for(var r = t.length, o = wa(r), a = e.map(function(t) {\n        return t[0];\n    }).join(\",\"), i = e.map(function(e, n) {\n        return e[0] + t[n];\n    }).join(\",\"), s = sa(\"rc\", r), u = sa(\"source\", r), c = s[r - 1] + \" < \" + this.outputShape[r - 1], l = 1 === r ? \"source\" : \"vec2(\" + u.slice(-2).join() + \")\", h = [\n        o + \" rc = outputLoc;\",\n        s[r - 1] + \" += 1;\\n       if(\" + c + \") {\\n      \",\n        1 === r ? \"\" : \"}\\n       rc = outputLoc;\\n       \" + s[r - 2] + \" += 1;\\n       if(\" + s[r - 2] + \" < \" + this.outputShape[r - 2] + \") {\",\n        1 === r ? \"\" : \"  \" + s[r - 1] + \" += 1;\\n         if(\" + c + \") {\"\n    ], f = 1 === r ? \"rc < start || rc >= end\" : \"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\", d = \"\", p = 0, v = 1 === r ? 2 : 4; p < v; p++)d += \"\\n        \" + h[p] + \"\\n        if (\" + f + \") {\\n          result[\" + p + \"] = float(\" + n + \");\\n        } else {\\n          \" + o + \" source = rc - start;\\n          result[\" + p + \"] = getChannel(getX(\" + u.join() + \"), \" + l + \");\\n        }\\n      \";\n    d += 1 === r ? \"} \" : \"}}\", this.userCode = \"\\n      const \" + o + \" start = \" + o + \"(\" + a + \");\\n      const \" + o + \" end = \" + o + \"(\" + i + \");\\n\\n      void main() {\\n        \" + o + \" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \" + d + \"\\n        setOutput(result);\\n      }\\n    \";\n}, $i = function(t, e, n) {\n    if (this.variableNames = [\n        \"x\"\n    ], \"avg\" === e && n) throw new Error(\"Cannot compute positions for average pool.\");\n    var r = t.filterWidth, o = t.strideHeight, a = t.strideWidth, i = t.dilationHeight, s = t.dilationWidth, u = t.effectiveFilterHeight, c = t.effectiveFilterWidth, l = t.padInfo.top, h = t.padInfo.left;\n    this.outputShape = t.outShape;\n    var f = \"avg\" === e, d = \"0.0\";\n    if (f || (d = \"-1.0 / 1e-20\"), n) this.userCode = \"\\n        const ivec2 strides = ivec2(\" + o + \", \" + a + \");\\n        const ivec2 pads = ivec2(\" + l + \", \" + h + \");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \" + u + \";\\n              wR += \" + i + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + c + \";\\n                wC += \" + s + \") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value >= currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = wR * \" + c + \" + wC;\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    else {\n        var p = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n        \"avg\" === e && (p = \"avgValue / count\");\n        var v = 4 * Math.floor(r / 4), m = r % 4, g = \"\\n      if (\" + f + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";\n        this.userCode = \"\\n      const ivec2 strides = ivec2(\" + o + \", \" + a + \");\\n      const ivec2 pads = ivec2(\" + l + \", \" + h + \");\\n      const float initializationValue = \" + d + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \" + t.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + d + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \" + u + \";\\n            wR += \" + i + \") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \" + t.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + v + \"; wC += 4) {\\n            int xC = xCCorner + wC * \" + s + \";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + s + \", d),\\n              getValue(batch, xR, xC + 2 * \" + s + \", d),\\n              getValue(batch, xR, xC + 3 * \" + s + \", d)\\n            );\\n\\n            \" + g + \"\\n          }\\n\\n          int xC = xCCorner + \" + v + \";\\n          if (\" + (1 === m) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + g + \"\\n          } else if (\" + (2 === m) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + s + \", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + g + \"\\n          } else if (\" + (3 === m) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + s + \", d),\\n              getValue(batch, xR, xC + 2 * \" + s + \", d),\\n              initializationValue\\n            );\\n\\n            \" + g + \"\\n          }\\n        }\\n        setOutput(\" + p + \");\\n      }\\n    \";\n    }\n}, Qi = function(t, e, n) {\n    if (this.variableNames = [\n        \"x\"\n    ], \"avg\" === e && n) throw new Error(\"Cannot compute positions for average pool.\");\n    var r = t.filterWidth, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = t.dilationDepth, u = t.dilationHeight, c = t.dilationWidth, l = t.effectiveFilterDepth, h = t.effectiveFilterHeight, f = t.effectiveFilterWidth, d = t.padInfo.front, p = t.padInfo.top, v = t.padInfo.left;\n    this.outputShape = t.outShape;\n    var m = \"avg\" === e, g = \"0.0\";\n    if (m || (g = \"-1.0 / 1e-20\"), n) this.userCode = \"\\n        const ivec3 strides =\\n            ivec3(\" + o + \", \" + a + \", \" + i + \");\\n        const ivec3 pads = ivec3(\" + d + \", \" + p + \", \" + v + \");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \" + l + \";\\n              wD += \" + s + \") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \" + t.inDepth + \") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \" + h + \";\\n                wR += \" + u + \") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \" + t.inHeight + \") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \" + f + \";\\n                  wC += \" + c + \") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value >= currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition =\\n                      wD * \" + h + \" * \" + f + \" +\\n                      wR * \" + f + \" + wC;;\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    else {\n        var y = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n        \"avg\" === e && (y = \"avgValue / count\");\n        var x = 4 * Math.floor(r / 4), b = r % 4, w = \"\\n      if (\" + m + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";\n        this.userCode = \"\\n      const ivec3 strides =\\n        ivec3(\" + o + \", \" + a + \", \" + i + \");\\n      const ivec3 pads = ivec3(\" + d + \", \" + p + \", \" + v + \");\\n      const float initializationValue = \" + g + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \" + t.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + g + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \" + l + \";\\n            wD += \" + s + \") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \" + t.inDepth + \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \" + h + \";\\n            wR += \" + u + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + x + \"; wC += 4) {\\n              int xC = xCCorner + wC * \" + c + \";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + c + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + c + \", ch),\\n                getValue(batch, xD, xR, xC + 3 * \" + c + \", ch)\\n              );\\n\\n              \" + w + \"\\n            }\\n\\n            int xC = xCCorner + \" + x + \";\\n            if (\" + (1 === b) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + w + \"\\n            } else if (\" + (2 === b) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + c + \", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + w + \"\\n            } else if (\" + (3 === b) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + c + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + c + \", ch),\\n                initializationValue\\n              );\\n\\n              \" + w + \"\\n            }\\n          }\\n          setOutput(\" + y + \");\\n        }\\n      }\\n    \";\n    }\n}, Ji = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ];\n    var n = t.windowSize, r = t.batchSize, o = t.inSize, a = Math.ceil(o / n);\n    this.outputShape = [\n        r,\n        a\n    ];\n    var i = \"0.0\", s = \"\";\n    \"prod\" === e ? i = \"1.0\" : \"min\" === e ? (i = \"1.0 / 1e-20\", s = \"min\") : \"max\" === e && (i = \"-1.0 / 1e-20\", s = \"max\");\n    var u = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n    \"sum\" === e ? u = \"sumValue\" : \"prod\" === e ? u = \"prodValue\" : \"all\" === e ? u = \"allValue\" : \"any\" === e && (u = \"anyValue\");\n    var c = 4 * Math.floor(n / 4), l = n % 4, h = \"\\n      if (\" + (\"sum\" === e) + \") {\\n        sumValue += dot(values, ones);\\n      } else if (\" + (\"prod\" === e) + \") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \" + s + \"(values, minMaxValue);\\n      }\\n    \", f = \"vec4\";\n    \"all\" === e ? (i = \"1.0\", h = \"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \", f = \"bvec4\") : \"any\" === e && (i = \"0.0\", h = \"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \", f = \"bvec4\");\n    var d = \"\";\n    o % n > 0 && (d = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return initializationValue;\\n        }\\n      \"), this.userCode = \"\\n      const float initializationValue = \" + i + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + d + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + n + \";\\n\\n        vec4 minMaxValue = vec4(\" + i + \");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \" + c + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \" + h + \"\\n        }\\n\\n        int inIdx = inOffset + \" + c + \";\\n        if (\" + (1 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        } else if (\" + (2 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        } else if (\" + (3 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        }\\n        setOutput(\" + u + \");\\n      }\\n    \";\n}, Zi = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t;\n    for(var n = \"\", r = 0; r < 4; r++){\n        var o = \"thisRC = rc;\";\n        r % 2 == 1 && (o += \"thisRC.z += 1;\"), r > 1 && (o += \"thisRC.y += 1;\"), n += \"\\n        \" + o + \"\\n        \" + (r > 0 ? \"if(thisRC.y < rows && thisRC.z < cols){\" : \"\") + \"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\" + r + \"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \" + (r > 0 ? \"}\" : \"\") + \"\\n      \";\n    }\n    this.userCode = \"\\n      \\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \" + ca([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], e) + \"\\n      return ivec3(r, c, d);\\n    }\\n  \\n      \" + la(t) + \"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \" + t[1] + \";\\n        int cols = \" + t[2] + \";\\n\\n        \" + n + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n};\nvar ts = function(t, e, n) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = e.shape;\n    var r = e.shape, o = r[1], a = r[2], i = t.shape, s = i[1], u = i[2], c = [\n        n && s > 1 ? o - 1 : o,\n        n && u > 1 ? a - 1 : a\n    ], l = [\n        n && s > 1 ? s - 1 : s,\n        n && u > 1 ? u - 1 : u\n    ], h = c[0] / l[0], f = c[1] / l[1], d = 1 / h, p = 1 / f, v = 2 * Math.ceil(d) + 2, m = 2 * Math.ceil(p) + 2;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\" + h + \");\\n        const float widthScale = float(\" + f + \");\\n\\n        const float invHeightScale = float(\" + d + \");\\n        const float invWidthScale = float(\" + p + \");\\n\\n        const int winHeight = int(\" + v + \");\\n        const int winWidth = int(\" + m + \");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \" + s + \") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \" + u + \") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \" + (o - 1) + \".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \" + (a - 1) + \".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \";\n}, es = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ];\n    this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + a + \".0, \" + i + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, ns = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ];\n    this.userCode = \"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec3 inputShapeRC = vec3(\" + a + \".0, \" + i + \".0,\\n                                     \" + i + \".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \" + (s - 1) + \";\\n        bool hasNextRow = coords.z < \" + (n - 1) + \";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, rs = function(t, e, n) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = e.shape;\n    var r = e.shape, o = r[1], a = r[2], i = t.shape, s = i[1], u = i[2], c = [\n        n && s > 1 ? o - 1 : o,\n        n && u > 1 ? a - 1 : a\n    ], l = [\n        n && s > 1 ? s - 1 : s,\n        n && u > 1 ? u - 1 : u\n    ], h = c[0] / l[0], f = c[1] / l[1], d = 1 / h, p = 1 / f, v = 2 * Math.ceil(d) + 2, m = 2 * Math.ceil(p) + 2;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\" + h + \");\\n        const float widthScale = float(\" + f + \");\\n\\n        const float invHeightScale = float(\" + d + \");\\n        const float invWidthScale = float(\" + p + \");\\n\\n        const int winHeight = int(\" + v + \");\\n        const int winWidth = int(\" + m + \");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \" + s + \") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \" + u + \") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\" + c[0] + \") *\\n                (float(dyR) / float(\" + l[0] + \"));\\n\\n            float sourceFracCol =\\n                float(\" + c[1] + \") *\\n                  (float(dyC) / float(\" + l[1] + \"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\" + o + \") - 1),\\n                \" + n + \" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\" + a + \") - 1),\\n                \" + n + \" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \";\n}, os = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ], l = r ? \"0.5\" : \"0.0\";\n    this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + a + \".0, \" + i + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \" + l + \")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, as = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ];\n    var n = t.length;\n    if (n > 4) throw new Error(\"WebGL backend: Reverse of rank-\" + n + \" tensor is not yet supported\");\n    if (this.outputShape = t, 1 !== n) {\n        var r = t.map(function(n, r) {\n            return function(n) {\n                return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + \" - coords[\" + n + \"] - 1\" : \"coords[\" + n + \"]\";\n            }(r);\n        }).join(\",\"), o = wa(n);\n        this.userCode = \"\\n      void main() {\\n        \" + o + \" coords = getOutputCoords();\\n        setOutput(getX(\" + r + \"));\\n      }\\n    \";\n    } else this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + t[0] + \" - coord - 1));\\n        }\\n      \";\n}, is = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ], this.packedInputs = !0, this.packedOutput = !0;\n    var n = t.length;\n    if (n > 4) throw new Error(\"WebGL backend: Reverse of rank-\" + n + \" tensor is not yet supported\");\n    this.outputShape = t;\n    var r = sa(\"rc\", n), o = r[n - 1] + \" + 1 < \" + this.outputShape[n - 1], a = r[n - 2] + \" + 1 < \" + this.outputShape[n - 2], i = wa(n);\n    function s(n) {\n        var r = t.map(function(r, o) {\n            return function(n, r) {\n                return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + \" - \" + r[n] + \" - 1\" : \"\" + r[n];\n            }(o, n);\n        });\n        return \"getChannel(getX(\" + r.join(\",\") + \"), vec2(\" + r.slice(-2).join(\",\") + \"))\";\n    }\n    this.userCode = 1 === n ? \"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\" + t[0] + \" - rc - 1),\\n            \" + t[0] + \" - rc - 1);\\n          if(\" + o + \"){\\n              result.g = getChannel(getX(\" + t[0] + \" - (rc  + 1) - 1),\\n                \" + t[0] + \" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \" : \"\\n        void main() {\\n          \" + i + \" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \" + function(t) {\n        return s(t);\n    }(r.slice()) + \";\\n          if(\" + o + \"){\\n            result.g = \" + function(t) {\n        return t[n - 1] = \"(\" + t[n - 1] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n          }\\n          if(\" + a + \") {\\n            result.b = \" + function(t) {\n        return t[n - 2] = \"(\" + t[n - 2] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n            if(\" + o + \") {\\n              result.a = \" + function(t) {\n        return t[n - 1] = \"(\" + t[n - 1] + \" + 1)\", t[n - 2] = \"(\" + t[n - 2] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \";\n}, ss = function(t, e, n, r, o, a, i) {\n    void 0 === i && (i = !0), this.variableNames = [\n        \"updates\",\n        \"indices\",\n        \"defaultValue\"\n    ], this.outputShape = a;\n    var s = wa(o.length), u = wa(a.length), c = \"\";\n    1 === n ? c = \"i\" : 2 === n && (c = \"i, j\");\n    var l = \"getIndices(\" + c + \")\", h = \"\";\n    1 === r ? h = \"i\" : 2 === r && (h = \"i, coords[1]\");\n    var f = \"getUpdates(\" + h + \")\", d = e > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = \"\\n        \" + s + \" strides = \" + s + \"(\" + o + \");\\n\\n        void main() {\\n          \" + u + \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \" + t + \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \" + e + \"; j++) {\\n              int index = round(\" + l + \");\\n              flattenedIndex += index * \" + d + \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \" + f + \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \";\n}, us = function(t, e) {\n    this.variableNames = [\n        \"x\",\n        \"segmentIds\"\n    ];\n    var n = t.windowSize, r = t.batchSize, o = t.inSize, a = t.numSegments, i = a * Math.ceil(o / n);\n    this.outputShape = [\n        r,\n        i\n    ];\n    var s = 4 * Math.floor(n / 4), u = n % 4, c = \"\\n        sumValue += dot(values, segFilter);\\n    \", l = \"\";\n    o % n > 0 && (l = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return initializationValue;\\n        }\\n      \");\n    var h = \"\";\n    o % n > 0 && (h = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return -1.0;\\n        }\\n      \"), this.userCode = \"\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + l + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \" + h + \"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \" + a + \")) * float(\" + n + \"));\\n        int currentSeg = int(mod(float(outIdx), float(\" + a + \")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \" + s + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \" + c + \"\\n        }\\n\\n        int inIdx = inOffset + \" + s + \";\\n        if (\" + (1 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \" + c + \"\\n        } else if (\" + (2 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \" + c + \"\\n        } else if (\" + (3 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \" + c + \"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \";\n}, cs = function(t, e, n) {\n    var r, o;\n    if (this.variableNames = [\n        \"c\",\n        \"a\",\n        \"b\"\n    ], this.outputShape = e, n > 4) throw Error(\"Where for rank \" + n + \" is not yet supported\");\n    if (1 === n) o = \"resRC\", r = \"resRC\";\n    else {\n        for(var a = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\"\n        ], i = [], s = [], u = 0; u < e.length; u++)s.push(\"\" + a[u]), u < t && i.push(\"\" + a[u]);\n        r = i.join(), o = s.join();\n    }\n    var c = wa(n);\n    this.userCode = \"\\n      void main() {\\n        \" + c + \" resRC = getOutputCoords();\\n        float cVal = getC(\" + r + \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\" + o + \"));\\n        } else {\\n          setOutput(getB(\" + o + \"));\\n        }\\n      }\\n    \";\n}, ls = function() {\n    function t(t) {\n        this.variableNames = [\n            \"source\"\n        ], this.outputShape = t, this.rank = t.length;\n        var e, n = wa(this.rank), r = \"uniform int start[\" + this.rank + \"];\", o = function(t) {\n            if (1 === t) return \"sourceLoc\";\n            if (t <= 6) return hs.slice(0, t).map(function(t) {\n                return \"sourceLoc.\" + t;\n            }).join(\",\");\n            throw Error(\"Slicing for rank \" + t + \" is not yet supported\");\n        }(this.rank);\n        e = \"\\n        \" + n + \" sourceLoc;\\n        \" + n + \" coords = getOutputCoords();\\n        \" + t.map(function(t, e) {\n            return \"sourceLoc.\" + hs[e] + \" = start[\" + e + \"] + coords.\" + hs[e] + \";\";\n        }).join(\"\\n\") + \"\\n      \", this.userCode = \"\\n      \" + r + \"\\n      void main() {\\n        \" + e + \"\\n        setOutput(getSource(\" + o + \"));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        if (t.length !== this.rank) throw Error(\"The rank (\" + this.rank + \") of the program must match the length of start (\" + t.length + \")\");\n        return function(n, r) {\n            null == e.startLoc && (e.startLoc = n.getUniformLocationNoThrow(r, \"start\"), null == e.startLoc) || n.gl.uniform1iv(e.startLoc, t);\n        };\n    }, t;\n}(), hs = [\n    \"x\",\n    \"y\",\n    \"z\",\n    \"w\",\n    \"u\",\n    \"v\"\n];\nvar fs = function() {\n    function t(t) {\n        this.variableNames = [\n            \"source\"\n        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length;\n        var e = wa(this.rank), n = sa(\"coords\", this.rank), r = sa(\"sourceLoc\", this.rank), o = 1 === this.rank ? \"sourceLoc\" : \"vec2(\" + r.slice(-2).join() + \")\", a = \"getChannel(getSource(\" + r.join() + \"), \" + o + \")\", i = \"\\n      result.x = \" + a + \";\\n      if (++\" + n[this.rank - 1] + \" < \" + t[this.rank - 1] + \") {\\n        ++\" + r[this.rank - 1] + \";\\n        result.y = \" + a + \";\\n        --\" + r[this.rank - 1] + \";\\n      }\\n    \", s = 1 === this.rank ? \"\" : \"\\n      --\" + n[this.rank - 1] + \";\\n      if (++\" + n[this.rank - 2] + \" < \" + t[this.rank - 2] + \") {\\n        ++\" + r[this.rank - 2] + \";\\n        result.z = \" + a + \";\\n        if (++\" + n[this.rank - 1] + \" < \" + t[this.rank - 1] + \") {\\n          ++\" + r[this.rank - 1] + \";\\n          result.w = \" + a + \";\\n        }\\n      }\\n    \", u = this.rank <= 4 ? \"sourceLoc = coords +\\n            \" + e + \"(\" + t.map(function(t, e) {\n            return \"start[\" + e + \"]\";\n        }).join() + \");\" : t.map(function(t, e) {\n            return r[e] + \" = \" + n[e] + \" + start[\" + e + \"];\";\n        }).join(\"\\n\");\n        this.userCode = \"\\n      uniform int start[\" + this.rank + \"];\\n      void main() {\\n        \" + e + \" coords = getOutputCoords();\\n        \" + e + \" sourceLoc;\\n        \" + u + \"\\n        vec4 result = vec4(0.);\\n        \" + i + \"\\n        \" + s + \"\\n        setOutput(result);\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        if (t.length !== this.rank) throw Error(\"The rank (\" + this.rank + \") of the program must match the length of start (\" + t.length + \")\");\n        return function(n, r) {\n            null == e.startLoc && (e.startLoc = n.getUniformLocationNoThrow(r, \"start\"), null == e.startLoc) || n.gl.uniform1iv(e.startLoc, t);\n        };\n    }, t;\n}(), ds = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = n;\n    var r = n.length, o = wa(n.length), a = wa(n.length), i = \"\";\n    if (1 === r) i = \"coords * strides + begin\";\n    else {\n        var s = 0;\n        i = n.map(function(t, e) {\n            return s++, 1 === n.length ? \"coords * strides[\" + e + \"] + begin[\" + e + \"]\" : \"coords[\" + (s - 1) + \"] * strides[\" + e + \"] + begin[\" + e + \"]\";\n        }).join(\",\");\n    }\n    this.userCode = \"\\n      \" + o + \" begin = \" + o + \"(\" + t + \");\\n      \" + o + \" strides = \" + o + \"(\" + e + \");\\n\\n      void main() {\\n        \" + a + \" coords = getOutputCoords();\\n        setOutput(getX(\" + i + \"));\\n      }\\n    \";\n}, ps = function() {\n    function t(t) {\n        this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};\n    }\n    return t.prototype.acquireTexture = function(t, e, n) {\n        var r, o = vs(e, n), a = ms(t, o, n);\n        if (a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []), this.freeTextures[a].length > 0) {\n            this.numFreeTextures--, this.numUsedTextures++, this.log();\n            var i = this.freeTextures[a].shift();\n            return this.usedTextures[a].push(i), i;\n        }\n        return this.numUsedTextures++, this.log(), o === Gt.PACKED_2X2_FLOAT32 ? r = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : o === Gt.PACKED_2X2_FLOAT16 ? r = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : o === Gt.UNPACKED_FLOAT32 ? r = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : o === Gt.UNPACKED_FLOAT16 ? r = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : o === Gt.PACKED_4X1_UNSIGNED_BYTE && (r = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[a].push(r), r;\n    }, t.prototype.releaseTexture = function(t, e, n, r) {\n        if (null != this.freeTextures) {\n            var o = ms(e, vs(n, r), r);\n            o in this.freeTextures || (this.freeTextures[o] = []), this.freeTextures[o].push(t), this.numFreeTextures++, this.numUsedTextures--;\n            var a = this.usedTextures[o], i = a.indexOf(t);\n            if (i < 0) throw new Error(\"Cannot release a texture that was never provided by this texture manager\");\n            a.splice(i, 1), this.log();\n        }\n    }, t.prototype.log = function() {\n        if (this.logEnabled) {\n            var t = this.numFreeTextures + this.numUsedTextures;\n            console.log(\"Free/Used\", this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + t + \")\");\n        }\n    }, t.prototype.getNumUsedTextures = function() {\n        return this.numUsedTextures;\n    }, t.prototype.getNumFreeTextures = function() {\n        return this.numFreeTextures;\n    }, t.prototype.dispose = function() {\n        var t = this;\n        if (null != this.freeTextures) {\n            for(var e in this.freeTextures)this.freeTextures[e].forEach(function(e) {\n                t.gpgpu.deleteMatrixTexture(e);\n            });\n            for(var e in this.usedTextures)this.usedTextures[e].forEach(function(e) {\n                t.gpgpu.deleteMatrixTexture(e);\n            });\n            this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;\n        }\n    }, t;\n}();\nfunction vs(t, e) {\n    if (t === zt.UPLOAD) return Gt.PACKED_2X2_FLOAT32;\n    if (t === zt.RENDER || null == t) return function(t) {\n        return i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") ? t ? Gt.PACKED_2X2_FLOAT32 : Gt.UNPACKED_FLOAT32 : t ? Gt.PACKED_2X2_FLOAT16 : Gt.UNPACKED_FLOAT16;\n    }(e);\n    if (t === zt.DOWNLOAD || t === zt.PIXELS) return Gt.PACKED_4X1_UNSIGNED_BYTE;\n    throw new Error(\"Unknown logical texture type \" + t);\n}\nfunction ms(t, e, n) {\n    return t[0] + \"_\" + t[1] + \"_\" + e + \"_\" + n;\n}\nvar gs = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ];\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[r] * e[r];\n    this.outputShape = n, this.rank = n.length;\n    var o = wa(this.rank), a = function(t) {\n        var e = t.length;\n        if (e > 5) throw Error(\"Tile for rank \" + e + \" is not yet supported\");\n        if (1 === e) return \"imod(resRC, \" + t[0] + \")\";\n        for(var n = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\",\n            \"resRC.u\"\n        ], r = [], o = 0; o < t.length; o++)r.push(\"imod(\" + n[o] + \", \" + t[o] + \")\");\n        return r.join();\n    }(t);\n    this.userCode = \"\\n      void main() {\\n        \" + o + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + a + \"));\\n      }\\n    \";\n};\nvar ys = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ];\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[e[r]];\n    this.outputShape = n, this.rank = n.length;\n    var o = wa(this.rank), a = function(t) {\n        var e = t.length;\n        if (e > 6) throw Error(\"Transpose for rank \" + e + \" is not yet supported\");\n        for(var n = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\",\n            \"resRC.u\",\n            \"resRC.v\"\n        ], r = new Array(e), o = 0; o < t.length; o++)r[t[o]] = n[o];\n        return r.join();\n    }(e);\n    this.userCode = \"\\n    void main() {\\n      \" + o + \" resRC = getOutputCoords();\\n      setOutput(getA(\" + a + \"));\\n    }\\n    \";\n};\nvar xs = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0;\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[e[r]];\n    if (this.outputShape = n, this.rank = n.length, this.rank > 6) throw Error(\"Packed transpose for rank \" + this.rank + \" is not yet supported.\");\n    var o = wa(this.rank), a = ia(\"rc\", this.rank), i = new Array(this.rank);\n    for(r = 0; r < e.length; r++)i[e[r]] = a[r];\n    var s = \"vec2(\" + i.slice(-2).join() + \")\", u = \"++\" + a[this.rank - 1] + \" < \" + n[this.rank - 1], c = \"getChannel(getA(\" + i.join() + \"), \" + s + \")\";\n    this.userCode = \"\\n    void main() {\\n      \" + o + \" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \" + c + \";\\n      if(\" + u + \") {\\n        result[1] = \" + c + \";\\n      }\\n      --\" + a[this.rank - 1] + \";\\n      if(++\" + a[this.rank - 2] + \" < \" + n[this.rank - 2] + \") {\\n        result[2] = \" + c + \";\\n        if(\" + u + \") {\\n          result[3] = \" + c + \";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \";\n}, bs = 1.7580993408473768, ws = 1.0507009873554805, Cs = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = t, this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + e + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n}, Es = \"if (isnan(x)) return x;\", Rs = \"return x;\", Is = \"return abs(x);\", ks = Es + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\", Ss = Es + \"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\", As = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\", Ds = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + bs + \";\\n  float scale = \" + ws + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nvar Ts = \"return -x;\", Ns = \"return ceil(x);\", Fs = \"return floor(x);\", _s = \"return exp(x);\", Os = \"return exp(x) - 1.0;\", Ms = Es + \"\\n  return sin(x);\\n\", Bs = Es + \"\\n  return cos(x);\\n\", Ps = Es + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\", Ls = Es + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\", Ws = Es + \"\\n  return atan(x);\\n\", Us = Es + \"return log(x + sqrt(x * x + 1.0));\", Vs = Es + \"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\", zs = Es + \"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\", Gs = \"return x;\", Hs = \"return x;\", qs = \"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\", Ks = \"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\", js = \"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\", Xs = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.userCode = \"\\n      vec4 unaryOperation(vec4 x) {\\n        \" + e + \"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n}, Ys = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t;\n    var e = t.length, n = sa(\"rc\", e), r = wa(e), o = function(t, e) {\n        if (1 === t) return \"rc\";\n        for(var n = \"\", r = 0; r < t; r++)n += e[r], r < t - 1 && (n += \",\");\n        return n;\n    }(e, n), a = n.slice(-2), i = e <= 1 ? \"rc\" : \"vec2(\" + a.join(\",\") + \")\";\n    this.userCode = \"\\n      void main() {\\n        \" + r + \" rc = getOutputCoords();\\n        vec4 packedInput = getA(\" + o + \");\\n\\n        setOutput(getChannel(packedInput, \" + i + \"));\\n      }\\n    \";\n}, $s = {};\nfunction Qs(t, e) {\n    if (void 0 === e && (e = !1), \"linear\" === t) return e ? Hs : Rs;\n    if (\"relu\" === t) return e ? qs : ks;\n    if (\"elu\" === t) return e ? js : As;\n    if (\"relu6\" === t) return e ? Ks : Ss;\n    if (\"prelu\" === t) return e ? Pa : Ma;\n    throw new Error(\"Activation \" + t + \" has not been implemented for the WebGL backend.\");\n}\nvar Js = 600;\nvar Zs = function(t) {\n    function o(e) {\n        var n, r = t.call(this) || this;\n        if (r.pendingRead = new WeakMap, r.pendingDisposal = new WeakSet, r.dataRefCount = new WeakMap, r.numBytesInGPU = 0, r.uploadWaitMs = 0, r.downloadWaitMs = 0, r.warnedAboutMemory = !1, r.pendingDeletes = 0, r.disposed = !1, !i().getBool(\"HAS_WEBGL\")) throw new Error(\"WebGL is not supported on this device\");\n        if (null == e) {\n            var o = jt(i().getNumber(\"WEBGL_VERSION\"));\n            r.binaryCache = (n = i().getNumber(\"WEBGL_VERSION\")) in $s ? $s[n] : ($s[n] = {}, $s[n]), r.gpgpu = new Bi(o), r.canvas = o.canvas, r.gpgpuCreatedLocally = !0;\n        } else r.gpgpu = e, r.binaryCache = {}, r.gpgpuCreatedLocally = !1, r.canvas = e.gl.canvas;\n        return r.textureManager = new ps(r.gpgpu), r.numMBBeforeWarning = null == i().global.screen ? 1024 : i().global.screen.height * i().global.screen.width * window.devicePixelRatio * Js / 1024 / 1024, r.texData = new xo(r, Lt), r;\n    }\n    return e(o, t), o.prototype.numDataIds = function() {\n        return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n    }, o.prototype.write = function(t, e, n) {\n        if (i().getBool(\"DEBUG\") && this.checkNumericalProblems(t), \"complex64\" === n && null != t) throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");\n        var r = {};\n        return this.texData.set(r, {\n            shape: e,\n            dtype: n,\n            values: t,\n            usage: zt.UPLOAD\n        }), r;\n    }, o.prototype.move = function(t, e, n, r) {\n        if (i().getBool(\"DEBUG\") && this.checkNumericalProblems(e), \"complex64\" === r) throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");\n        this.texData.set(t, {\n            shape: n,\n            dtype: r,\n            values: e,\n            usage: zt.UPLOAD\n        });\n    }, o.prototype.readSync = function(t) {\n        var e = this.texData.get(t), n = e.values, r = e.dtype, o = e.complexTensors, a = e.slice, i = e.shape, s = e.isPacked;\n        if (null != a) {\n            var u = void 0;\n            u = s ? new Xs(i, Gs) : new Cs(i, Gs);\n            var c = this.runWebGLProgram(u, [\n                {\n                    dataId: t,\n                    shape: i,\n                    dtype: r\n                }\n            ], r), l = this.readSync(c.dataId);\n            return this.disposeData(c.dataId), l;\n        }\n        if (null != n) return this.convertAndCacheOnCPU(t);\n        if (\"string\" === r) return n;\n        var h, f, d = null != this.activeTimers;\n        (d && (h = et()), \"complex64\" === r) ? f = Vo(o.real.dataSync(), o.imag.dataSync()) : f = this.getValuesFromTexture(t);\n        return d && (this.downloadWaitMs += et() - h), this.convertAndCacheOnCPU(t, f);\n    }, o.prototype.read = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, s, u, c, l, h, f, d, p, v, m, g, y, x, b, w, C, E, R;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (this.pendingRead.has(t)) return e = this.pendingRead.get(t), [\n                            2,\n                            new Promise(function(t) {\n                                return e.push(t);\n                            })\n                        ];\n                        if (n = this.texData.get(t), o = n.values, a = n.shape, s = n.slice, u = n.dtype, c = n.complexTensors, l = n.isPacked, null != s) return h = void 0, h = l ? new Xs(a, Gs) : new Cs(a, Gs), f = this.runWebGLProgram(h, [\n                            {\n                                dataId: t,\n                                shape: a,\n                                dtype: u\n                            }\n                        ], u), d = this.read(f.dataId), this.disposeData(f.dataId), [\n                            2,\n                            d\n                        ];\n                        if (null != o) return [\n                            2,\n                            this.convertAndCacheOnCPU(t)\n                        ];\n                        if (!i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\") && 2 === i().getNumber(\"WEBGL_VERSION\")) throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");\n                        return p = null, \"complex64\" !== u && i().get(\"WEBGL_BUFFER_SUPPORTED\") && (v = this.decode(t), m = this.texData.get(v.dataId), p = (R = this.gpgpu).createBufferFromTexture.apply(R, [\n                            m.texture\n                        ].concat(Yt(a)))), this.pendingRead.set(t, []), \"complex64\" === u ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            this.gpgpu.createAndWaitForFence()\n                        ];\n                    case 1:\n                        r.sent(), r.label = 2;\n                    case 2:\n                        return \"complex64\" !== u ? [\n                            3,\n                            4\n                        ] : [\n                            4,\n                            Promise.all([\n                                c.real.data(),\n                                c.imag.data()\n                            ])\n                        ];\n                    case 3:\n                        return y = r.sent(), x = y[0], b = y[1], g = Vo(x, b), [\n                            3,\n                            5\n                        ];\n                    case 4:\n                        null == p ? g = this.getValuesFromTexture(t) : (w = k(a), g = this.gpgpu.downloadFloat32MatrixFromBuffer(p, w)), r.label = 5;\n                    case 5:\n                        return null != v && this.disposeData(v.dataId), C = this.convertAndCacheOnCPU(t, g), E = this.pendingRead.get(t), this.pendingRead.delete(t), E.forEach(function(t) {\n                            return t(C);\n                        }), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t), this.pendingDeletes--), [\n                            2,\n                            C\n                        ];\n                }\n            });\n        });\n    }, o.prototype.checkNumericalProblems = function(t) {\n        if (null != t) for(var e = 0; e < t.length; e++){\n            var n = t[e];\n            if (!ee(n)) {\n                if (i().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")) throw Error(\"The value \" + n + \" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n                throw Error(\"The value \" + n + \" cannot be represented on this device.\");\n            }\n        }\n    }, o.prototype.getValuesFromTexture = function(t) {\n        var e, n = this.texData.get(t), r = n.shape, o = n.dtype, a = n.isPacked, s = k(r);\n        if (i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")) {\n            var u = this.decode(t), c = this.texData.get(u.dataId), l = (e = this.gpgpu).downloadMatrixFromPackedTexture.apply(e, [\n                c.texture\n            ].concat(Yt(r))).subarray(0, s);\n            return this.disposeData(u.dataId), l;\n        }\n        var h = i().getBool(\"WEBGL_PACK\") && !0 === a, f = h ? Te(r) : r, d = h ? new ci(f) : new ui(f), p = this.runWebGLProgram(d, [\n            {\n                shape: f,\n                dtype: o,\n                dataId: t\n            }\n        ], \"float32\"), v = this.texData.get(p.dataId), m = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture, v.texShape[0], v.texShape[1]).subarray(0, s);\n        return this.disposeData(p.dataId), m;\n    }, o.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, s, u, c;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return e = this.activeTimers, n = [], o = !1, null == this.programTimersStack ? (this.programTimersStack = n, o = !0) : this.activeTimers.push(n), this.activeTimers = n, t(), a = I(this.activeTimers.map(function(t) {\n                            return t.query;\n                        })).filter(function(t) {\n                            return null != t;\n                        }), s = I(this.activeTimers.map(function(t) {\n                            return t.name;\n                        })).filter(function(t) {\n                            return null != t;\n                        }), this.activeTimers = e, o && (this.programTimersStack = null), u = {\n                            uploadWaitMs: this.uploadWaitMs,\n                            downloadWaitMs: this.downloadWaitMs,\n                            kernelMs: null,\n                            wallMs: null\n                        }, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? [\n                            4,\n                            Promise.all(a)\n                        ] : [\n                            3,\n                            2\n                        ];\n                    case 1:\n                        return c = r.sent(), u.kernelMs = w(c), u.getExtraProfileInfo = function() {\n                            return c.map(function(t, e) {\n                                return {\n                                    name: s[e],\n                                    ms: t\n                                };\n                            }).map(function(t) {\n                                return t.name + \": \" + t.ms;\n                            }).join(\", \");\n                        }, [\n                            3,\n                            3\n                        ];\n                    case 2:\n                        u.kernelMs = {\n                            error: \"WebGL query timers are not supported in this environment.\"\n                        }, r.label = 3;\n                    case 3:\n                        return this.uploadWaitMs = 0, this.downloadWaitMs = 0, [\n                            2,\n                            u\n                        ];\n                }\n            });\n        });\n    }, o.prototype.memory = function() {\n        return {\n            unreliable: !1,\n            numBytesInGPU: this.numBytesInGPU\n        };\n    }, o.prototype.startTimer = function() {\n        return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? this.gpgpu.beginQuery() : {\n            startMs: et(),\n            endMs: null\n        };\n    }, o.prototype.endTimer = function(t) {\n        return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = et(), t);\n    }, o.prototype.getQueryTime = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? [\n                    2,\n                    this.gpgpu.waitForQueryAndGetTime(t)\n                ] : [\n                    2,\n                    (e = t).endMs - e.startMs\n                ];\n            });\n        });\n    }, o.prototype.disposeData = function(t) {\n        if (!this.pendingDisposal.has(t)) {\n            if (this.pendingRead.has(t)) return this.pendingDisposal.add(t), void this.pendingDeletes++;\n            if (this.texData.has(t)) {\n                this.releaseGPUData(t);\n                var e = this.texData.get(t).complexTensors;\n                null != e && (e.real.dispose(), e.imag.dispose()), this.texData.delete(t);\n            }\n        }\n    }, o.prototype.releaseGPUData = function(t) {\n        var e = this.texData.get(t), n = e.texture, r = e.dtype, o = e.texShape, a = e.usage, i = e.isPacked, s = e.slice, u = s && s.origDataId || t, c = this.dataRefCount.get(u);\n        c > 1 ? this.dataRefCount.set(u, c - 1) : (this.dataRefCount.delete(u), null != n && (this.numBytesInGPU -= this.computeBytes(o, r), this.textureManager.releaseTexture(n, o, a, i)));\n        var l = this.texData.get(t);\n        l.texture = null, l.texShape = null, l.isPacked = !1, l.slice = null;\n    }, o.prototype.getTexture = function(t) {\n        return this.uploadToGPU(t), this.texData.get(t).texture;\n    }, o.prototype.getDataInfo = function(t) {\n        return this.texData.get(t);\n    }, o.prototype.getCPUBackend = function() {\n        return i().getBool(\"WEBGL_CPU_FORWARD\") ? (null == this.cpuBackend && (this.cpuBackend = Lt.findBackend(\"cpu\")), this.cpuBackend) : null;\n    }, o.prototype.shouldExecuteOnCPU = function(t, e) {\n        var n = this;\n        return void 0 === e && (e = 128), null != this.getCPUBackend() && t.every(function(t) {\n            return null == n.texData.get(t.dataId).texture && t.size < e;\n        });\n    }, o.prototype.getGPGPUContext = function() {\n        return this.gpgpu;\n    }, o.prototype.complex = function(t, e) {\n        var n = this.makeOutput(t.shape, \"complex64\");\n        return this.texData.get(n.dataId).complexTensors = {\n            real: Lt.keep(t.clone()),\n            imag: Lt.keep(e.clone())\n        }, n;\n    }, o.prototype.real = function(t) {\n        return this.texData.get(t.dataId).complexTensors.real.clone();\n    }, o.prototype.imag = function(t) {\n        return this.texData.get(t.dataId).complexTensors.imag.clone();\n    }, o.prototype.slice = function(t, e, n) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.slice(t, e, n);\n        if (0 === k(n)) return Fn([], n, t.dtype);\n        var r = this.texData.get(t.dataId).isPacked, o = io(t.shape, e, n);\n        if (r || !o) {\n            var a = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new fs(n) : new ls(n), s = a.getCustomSetupFunc(e);\n            return this.compileAndRun(a, [\n                t\n            ], null, s);\n        }\n        return this.uploadToGPU(t.dataId), this.shallowSlice(t, e, n);\n    }, o.prototype.shallowSlice = function(t, e, n) {\n        var r = this.texData.get(t.dataId), o = this.makeOutput(n, t.dtype), a = this.texData.get(o.dataId);\n        Object.assign(a, r), a.shape = n, a.dtype = t.dtype;\n        var i = so(e, t.strides);\n        r.slice && (i += r.slice.flatOffset), a.slice = {\n            flatOffset: i,\n            origDataId: r.slice && r.slice.origDataId || t.dataId\n        };\n        var s = this.dataRefCount.get(a.slice.origDataId) || 1;\n        return this.dataRefCount.set(a.slice.origDataId, s + 1), o;\n    }, o.prototype.stridedSlice = function(t, e, n, r) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.stridedSlice(t, e, n, r);\n        var o = ro(e, n, r);\n        if (o.some(function(t) {\n            return 0 === t;\n        })) return Fn([], o);\n        var a = new ds(e, r, o);\n        return this.compileAndRun(a, [\n            t\n        ]);\n    }, o.prototype.reverse = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new is(t.shape, e) : new as(t.shape, e);\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.concat = function(t, e) {\n        if (\"complex64\" === t[0].dtype) {\n            var n = t.map(function(t) {\n                return Tn(t);\n            }), r = t.map(function(t) {\n                return Nn(t);\n            });\n            return Dn(this.concat(n, e), this.concat(r, e));\n        }\n        if (this.shouldExecuteOnCPU(t)) return this.cpuBackend.concat(t, e);\n        if (1 === t.length) return t[0];\n        if (t.length > i().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n            var o = Math.floor(t.length / 2), a = this.concat(t.slice(0, o), e), s = this.concat(t.slice(o), e);\n            return this.concat([\n                a,\n                s\n            ], e);\n        }\n        if (i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") && t[0].rank > 1) {\n            var u = new Ga(t.map(function(t) {\n                return t.shape;\n            }), e);\n            return this.compileAndRun(u, t);\n        }\n        var c = Sn(t.map(function(t) {\n            return t.shape;\n        }), e), l = t.map(function(t) {\n            return t.as2D(-1, k(t.shape.slice(e)));\n        }), h = new za(l.map(function(t) {\n            return t.shape;\n        }));\n        return this.compileAndRun(h, l).reshape(c);\n    }, o.prototype.neg = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.neg(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Ts, t.dtype);\n        var e = new Cs(t.shape, Ts);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.batchMatMul = function(t, e, n, r) {\n        var o = n ? t.shape[2] : t.shape[1], a = r ? e.shape[1] : e.shape[2], i = n ? t.shape[1] : t.shape[2], s = t.shape[0];\n        if ((1 === o || 1 === a) && i > 1e3) {\n            n && (t = t.transpose([\n                0,\n                2,\n                1\n            ])), r && (e = e.transpose([\n                0,\n                2,\n                1\n            ]));\n            var u = 1 === a ? t : t.as3D(s, i, 1), c = 1 === a ? 2 : 1, l = 1 === a ? e.as3D(s, 1, i) : e;\n            return this.multiply(u, l).sum(c, !0);\n        }\n        var h = Dt(t.dtype, e.dtype), f = new Hi(t.shape, [\n            s,\n            o,\n            a\n        ], n, r);\n        return this.compileAndRun(f, [\n            t,\n            e\n        ], h);\n    }, o.prototype.fusedBatchMatMul = function(t) {\n        var e = t.a, n = t.b, r = t.transposeA, o = t.transposeB, a = t.bias, i = t.activation, s = t.preluActivationWeights, u = r ? e.shape[2] : e.shape[1], c = o ? n.shape[1] : n.shape[2], l = e.shape[0], h = Dt(e.dtype, n.dtype), f = null != a, d = null != s, p = i ? Qs(i, !0) : null, v = new Hi(e.shape, [\n            l,\n            u,\n            c\n        ], r, o, f, p, d), m = [\n            e,\n            n\n        ];\n        return a && m.push(a), s && m.push(s), this.compileAndRun(v, m, h);\n    }, o.prototype.multiply = function(t, e) {\n        if (\"complex64\" === t.dtype) {\n            var n = this.texData.get(t.dataId), r = this.texData.get(e.dataId), o = new Na(Da, t.shape, e.shape), a = new Na(Ta, t.shape, e.shape), s = [\n                this.makeComplexComponentTensorInfo(t, n.complexTensors.real),\n                this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),\n                this.makeComplexComponentTensorInfo(e, r.complexTensors.real),\n                this.makeComplexComponentTensorInfo(e, r.complexTensors.imag)\n            ], u = this.compileAndRun(o, s), c = this.compileAndRun(a, s), l = this.complex(u, c);\n            return u.dispose(), c.dispose(), l;\n        }\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.multiply(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, Oa, t.dtype);\n        var h = new Ba(Oa, t.shape, e.shape);\n        return this.compileAndRun(h, [\n            t,\n            e\n        ], t.dtype);\n    }, o.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        var s = [\n            t,\n            e,\n            n\n        ], u = null;\n        null != a && (u = a.shape, s.push(a));\n        var c = null;\n        if (null != o && (c = o.shape, s.push(o)), i().getBool(\"WEBGL_PACK_NORMALIZATION\")) {\n            var l = new Aa(t.shape, e.shape, n.shape, u, c, r);\n            return this.compileAndRun(l, s);\n        }\n        var h = new Sa(t.shape, e.shape, n.shape, u, c, r);\n        return this.compileAndRun(h, s);\n    }, o.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        var a = i().getBool(\"WEBGL_PACK_NORMALIZATION\") ? new Vi(t.shape, e, n, r, o) : new Wi(t.shape, e, n, r, o);\n        return this.compileAndRun(a, [\n            t\n        ]);\n    }, o.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        var s = new Ui(e.shape, r, o, a, i);\n        return this.compileAndRun(s, [\n            e,\n            n,\n            t\n        ]);\n    }, o.prototype.tile = function(t, e) {\n        if (\"string\" === t.dtype) {\n            var n = this.readSync(t.dataId).map(function(t) {\n                return ot(t);\n            });\n            return ta(dr(t.shape, t.dtype, n), e);\n        }\n        var r = new gs(t.shape, e);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.pad = function(t, e, n) {\n        var r = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new Yi(t.shape, e, n) : new Xi(t.shape, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.transpose = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.transpose(t, e);\n        var n = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new xs(t.shape, e) : new ys(t.shape, e);\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.gather = function(t, e, n) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.gather(t, e, n);\n        var r = new mi(t.shape, e.size, n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.batchToSpaceND = function(t, e, n) {\n        C(t.rank <= 4, function() {\n            return \"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\";\n        });\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = zr(t.shape, e, r), a = Gr(o.length, e.length), i = Hr(t.shape, e, r), s = qr(n, e.length), u = Kr(i, n, e.length);\n        return t.reshape(o).transpose(a).reshape(i).slice(s, u);\n    }, o.prototype.spaceToBatchND = function(t, e, n) {\n        C(t.rank <= 4, function() {\n            return \"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\";\n        });\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = [\n            [\n                0,\n                0\n            ]\n        ];\n        o.push.apply(o, n);\n        for(var a = 1 + e.length; a < t.shape.length; ++a)o.push([\n            0,\n            0\n        ]);\n        var i = t.pad(o), s = zr(i.shape, e, r, !1), u = Gr(s.length, e.length, !1), c = Hr(i.shape, e, r, !1);\n        return i.reshape(s).transpose(u).reshape(c);\n    }, o.prototype.reduce = function(t, e, n) {\n        var r = t.shape[0], o = t.shape[1], a = $r(o), i = new Ji({\n            windowSize: a,\n            inSize: o,\n            batchSize: r\n        }, e), s = this.compileAndRun(i, [\n            t\n        ], n);\n        return 1 === s.shape[1] ? s : this.reduce(s, e, n);\n    }, o.prototype.argReduce = function(t, e, n) {\n        void 0 === n && (n = null);\n        var r = t.shape[0], o = t.shape[1];\n        null != n && (r = n.shape[0], o = n.shape[1]);\n        var a = $r(o), i = new aa({\n            windowSize: a,\n            inSize: o,\n            batchSize: r\n        }, e, null == n), s = [\n            t\n        ];\n        null != n && s.push(n);\n        var u = this.compileAndRun(i, s, \"int32\");\n        return 1 === u.shape[1] ? u : this.argReduce(t, e, u);\n    }, o.prototype.argReducePacked = function(t, e, n) {\n        void 0 === n && (n = null);\n        var r = null != n ? n.shape : t.shape, o = $r(r[r.length - 1]), a = new Ra(r, o, e, null == n), i = null == n ? [\n            t\n        ] : [\n            t,\n            n\n        ], s = this.compileAndRun(a, i, \"int32\");\n        return s.rank === t.rank ? this.argReducePacked(t, e, s) : s;\n    }, o.prototype.sum = function(t, e) {\n        Cn(\"sum\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o), i = Tt(t.dtype);\n        return this.reduce(a, \"sum\", i).reshape(r);\n    }, o.prototype.prod = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.prod(t, e);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o), i = Tt(t.dtype);\n        return this.reduce(a, \"prod\", i).reshape(r);\n    }, o.prototype.unsortedSegmentSum = function(t, e, n) {\n        var r = 0, o = En([\n            r\n        ], t.rank), a = t;\n        null != o && (a = t.transpose(o), r = In(1, t.rank)[0]);\n        var i = function(t, e, n) {\n            for(var r = [], o = t.length, a = 0; a < o; a++)a !== e ? r.push(t[a]) : r.push(n);\n            return r;\n        }(a.shape, r, n), s = k([\n            a.shape[r]\n        ]), u = a.as2D(-1, s), c = Tt(t.dtype), l = this.segOpCompute(u, \"unsortedSegmentSum\", e, c, n).reshape(i);\n        return null != o && (l = l.transpose(Rn(o))), l;\n    }, o.prototype.segOpCompute = function(t, e, n, r, o) {\n        var a = t.shape[0], i = t.shape[1], s = function(t, e) {\n            var n, r = !1;\n            for(t <= Yr ? (n = t, r = !0) : n = Y(t, Math.floor(Math.sqrt(t))); !r;)n > e || n === t ? r = !0 : n = Y(t, n + 1);\n            return n;\n        }(i, o), u = new us({\n            windowSize: s,\n            inSize: i,\n            batchSize: a,\n            numSegments: o\n        }, e), c = this.compileAndRun(u, [\n            t,\n            n\n        ], r);\n        return c.shape[1] === o ? c : (n = Kn(0, o).tile([\n            i / s\n        ]), this.segOpCompute(c, e, n, r, o));\n    }, o.prototype.argMinMaxReduce = function(t, e, n) {\n        var r = [\n            e\n        ];\n        if (Cn(\"arg\" + n.charAt(0).toUpperCase() + n.slice(1), r, t.rank), !i().getBool(\"WEBGL_PACK_REDUCE\") || t.rank <= 2) {\n            var o = bn(t.shape, r), a = o[0], s = k(o[1]), u = t.as2D(-1, s);\n            return this.argReduce(u, n).reshape(a);\n        }\n        return this.argReducePacked(t, n);\n    }, o.prototype.argMin = function(t, e) {\n        return this.argMinMaxReduce(t, e, \"min\");\n    }, o.prototype.argMax = function(t, e) {\n        return this.argMinMaxReduce(t, e, \"max\");\n    }, o.prototype.cumsum = function(t, e, n, r) {\n        if (e !== t.rank - 1) throw new Error(\"WebGL cumsum shader expects an inner-most axis=\" + (t.rank - 1) + \" but got axis=\" + e);\n        var o = new ni(t.shape, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.equal = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(equal(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a == b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.notEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(notEqual(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a != b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.less = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.less(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(lessThan(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a < b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.lessEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(lessThanEqual(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a <= b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.greater = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.greater(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(greaterThan(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a > b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.greaterEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(greaterThanEqual(a, b));\\n\", \"bool\");\n        var n = new Ba(\"return float(a >= b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.logicalNot = function(t) {\n        var e = new Cs(t.shape, \"return float(!(x >= 1.0));\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.logicalAnd = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\", \"bool\");\n        var n = new Ba(\"return float(a >= 1.0 && b >= 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.logicalOr = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\", \"bool\");\n        var n = new Ba(\"return float(a >= 1.0 || b >= 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.select = function(t, e, n) {\n        var r = new cs(t.rank, e.shape, e.rank);\n        return this.compileAndRun(r, [\n            t,\n            e,\n            n\n        ], Dt(e.dtype, n.dtype));\n    }, o.prototype.where = function(t) {\n        dn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");\n        var e = t.dataSync();\n        return na(t.shape, e);\n    }, o.prototype.topk = function(t, e, n) {\n        return ea(t.dataSync(), t.shape, t.dtype, e);\n    }, o.prototype.min = function(t, e) {\n        Cn(\"min\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"min\", a.dtype).reshape(r);\n    }, o.prototype.minimum = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.minimum(t, e);\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ba(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.mod = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ba(\"if (b == 0.0) return NAN;\\n  return mod(a, b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.max = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.max(t, e);\n        Cn(\"max\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"max\", a.dtype).reshape(r);\n    }, o.prototype.maximum = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.maximum(t, e);\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ba(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.all = function(t, e) {\n        Cn(\"all\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"all\", a.dtype).reshape(r);\n    }, o.prototype.any = function(t, e) {\n        Cn(\"any\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"any\", a.dtype).reshape(r);\n    }, o.prototype.realDivide = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) {\n            return this.packedBinaryOp(t, e, \"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\", \"float32\", !0);\n        }\n        var n = new Ba(\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"float32\");\n    }, o.prototype.floorDiv = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\", \"int32\");\n        var n = new Ba(\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"int32\");\n    }, o.prototype.add = function(t, e) {\n        if (\"complex64\" === t.dtype && \"complex64\" === e.dtype) return this.complexSeparableBinaryOp(t, e, Fa);\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.add(t, e);\n        var n = Dt(t.dtype, e.dtype);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, Fa, n);\n        var r = new Ba(Fa, t.shape, e.shape);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ], n);\n    }, o.prototype.packedUnaryOp = function(t, e, n) {\n        var r = new Xs(t.shape, e);\n        return this.compileAndRun(r, [\n            t\n        ], n);\n    }, o.prototype.packedBinaryOp = function(t, e, n, r, o) {\n        void 0 === o && (o = !1);\n        var a = new La(n, t.shape, e.shape, o);\n        return this.compileAndRun(a, [\n            t,\n            e\n        ], r);\n    }, o.prototype.complexSeparableBinaryOp = function(t, e, n) {\n        var r = this, o = this.texData.get(t.dataId), a = this.texData.get(e.dataId), i = [\n            [\n                o.complexTensors.real,\n                a.complexTensors.real\n            ],\n            [\n                o.complexTensors.imag,\n                a.complexTensors.imag\n            ]\n        ].map(function(o) {\n            var a = o[0], i = o[1], s = r.makeComplexComponentTensorInfo(t, a), u = r.makeComplexComponentTensorInfo(e, i), c = new Ba(n, t.shape, e.shape);\n            return r.compileAndRun(c, [\n                s,\n                u\n            ], Dt(a.dtype, i.dtype));\n        }), s = i[0], u = i[1], c = this.complex(s, u);\n        return s.dispose(), u.dispose(), c;\n    }, o.prototype.makeComplexComponentTensorInfo = function(t, e) {\n        return {\n            dataId: e.dataId,\n            dtype: e.dtype,\n            shape: t.shape\n        };\n    }, o.prototype.addN = function(t) {\n        if (1 === t.length) return t[0];\n        if (t.length > i().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n            var e = Math.floor(t.length / 2), n = this.addN(t.slice(0, e)), r = this.addN(t.slice(e));\n            return this.addN([\n                n,\n                r\n            ]);\n        }\n        var o = t.map(function(t) {\n            return t.dtype;\n        }).reduce(function(t, e) {\n            return Dt(t, e);\n        }), a = t.map(function(t) {\n            return t.shape;\n        }), s = i().getBool(\"WEBGL_PACK\") ? new oa(t[0].shape, a) : new ra(t[0].shape, a);\n        return this.compileAndRun(s, t, o);\n    }, o.prototype.subtract = function(t, e) {\n        if (\"complex64\" === t.dtype && \"complex64\" === e.dtype) return this.complexSeparableBinaryOp(t, e, _a);\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.subtract(t, e);\n        var n = Dt(t.dtype, e.dtype);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, _a, t.dtype);\n        var r = new Ba(_a, t.shape, e.shape);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ], n);\n    }, o.prototype.pow = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ba(\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\", t.shape, e.shape), r = Dt(t.dtype, e.dtype);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], r);\n    }, o.prototype.ceil = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.ceil(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Ns, t.dtype);\n        var e = new Cs(t.shape, Ns);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.floor = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.floor(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Fs, t.dtype);\n        var e = new Cs(t.shape, Fs);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sign = function(t) {\n        var e = new Cs(t.shape, \"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.isNaN = function(t) {\n        var e = new Cs(t.shape, \"return float(isnan(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.isInf = function(t) {\n        var e = new Cs(t.shape, \"return float(isinf(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.isFinite = function(t) {\n        var e = new Cs(t.shape, \"return float(!isnan(x) && !isinf(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.round = function(t) {\n        var e = new Cs(t.shape, \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.exp = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.exp(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, _s, t.dtype);\n        var e = new Cs(t.shape, _s);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.expm1 = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.expm1(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Os, t.dtype);\n        var e = new Cs(t.shape, Os);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.softmax = function(t, e) {\n        var n = O([\n            e\n        ], t.shape), r = this.max(t, n), o = wn(r.shape, n), a = this.subtract(t, r.reshape(o)), i = this.exp(a), s = this.sum(i, n).reshape(o);\n        return this.realDivide(i, s);\n    }, o.prototype.log = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.log(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, \"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\", t.dtype);\n        var e = new Cs(t.shape, \"if (x < 0.0) return NAN;\\n  return log(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.log1p = function(t) {\n        var e = new Cs(t.shape, \"return log(1.0 + x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sqrt = function(t) {\n        var e = new Cs(t.shape, \"return sqrt(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.rsqrt = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.rsqrt(t);\n        var e = new Cs(t.shape, \"return inversesqrt(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.reciprocal = function(t) {\n        var e = new Cs(t.shape, \"return 1.0 / x;\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.relu = function(t) {\n        var e;\n        return e = i().getBool(\"WEBGL_PACK\") ? new Xs(t.shape, qs) : new Cs(t.shape, ks), this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.relu6 = function(t) {\n        var e;\n        return e = i().getBool(\"WEBGL_PACK\") ? new Xs(t.shape, Ks) : new Cs(t.shape, Ss), this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.prelu = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(Pa, t.shape, e.shape) : new Ba(Ma, t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.elu = function(t) {\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, js, t.dtype);\n        var e = new Cs(t.shape, As);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.eluDer = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\", t.shape, e.shape) : new Ba(\"return (b >= 1.0) ? a : a * (b + 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.selu = function(t) {\n        var e = new Cs(t.shape, Ds);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.int = function(t) {\n        var e = new Cs(t.shape, \"return float(int(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"int32\");\n    }, o.prototype.clip = function(t, e, n) {\n        var r, o = (r = i().getBool(\"WEBGL_PACK_CLIP\") ? new Ua(t.shape) : new Wa(t.shape)).getCustomSetupFunc(e, n);\n        return this.compileAndRun(r, [\n            t\n        ], null, o);\n    }, o.prototype.abs = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.abs(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Is, t.dtype);\n        var e = new Cs(t.shape, Is);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.complexAbs = function(t) {\n        var e = this.texData.get(t.dataId), n = new Va(t.shape), r = [\n            this.makeComplexComponentTensorInfo(t, e.complexTensors.real),\n            this.makeComplexComponentTensorInfo(t, e.complexTensors.imag)\n        ];\n        return this.compileAndRun(n, r);\n    }, o.prototype.sigmoid = function(t) {\n        var e = new Cs(t.shape, \"return 1.0 / (1.0 + exp(-1.0 * x));\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.softplus = function(t) {\n        var e = new Cs(t.shape, \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sin = function(t) {\n        var e = new Cs(t.shape, Ms);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.cos = function(t) {\n        var e = new Cs(t.shape, Bs);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.tan = function(t) {\n        var e = new Cs(t.shape, \"return tan(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.asin = function(t) {\n        var e = new Cs(t.shape, Ps);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.acos = function(t) {\n        var e = new Cs(t.shape, Ls);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atan = function(t) {\n        var e = new Cs(t.shape, Ws);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atan2 = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ba(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.sinh = function(t) {\n        var e = new Cs(t.shape, \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.cosh = function(t) {\n        var e = new Cs(t.shape, \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.tanh = function(t) {\n        var e = new Cs(t.shape, \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.asinh = function(t) {\n        var e = new Cs(t.shape, Us);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.acosh = function(t) {\n        var e = new Cs(t.shape, Vs);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atanh = function(t) {\n        var e = new Cs(t.shape, zs);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.erf = function(t) {\n        var e = new Cs(t.shape, '\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = 0.3275911;\\n  float a1 = 0.254829592;\\n  float a2 = -0.284496736;\\n  float a3 = 1.421413741;\\n  float a4 = -1.453152027;\\n  float a5 = 1.061405429;\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n');\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.step = function(t, e) {\n        var n = new Cs(t.shape, function(t) {\n            return void 0 === t && (t = 0), Es + \"\\n    return x > 0.0 ? 1.0 : float(\" + t + \");\\n  \";\n        }(e));\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.conv2dByMatMul = function(t, e, n, r, o, a) {\n        var s = t.shape, u = this.texData.get(t.dataId), c = n.inChannels, l = s[0] * s[1] * s[2], h = n.outChannels, f = \"channelsLast\" === n.dataFormat, d = (1 === l || 1 === h) && c > 1e3, p = s[2] % 2 != 0 && !!u.isPacked;\n        if (d || !i().getBool(\"WEBGL_LAZILY_UNPACK\") || !i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") || !p) {\n            var v = f ? s[0] * s[1] * s[2] : s[0] * s[2] * s[3], m = this.reshape(t, [\n                1,\n                v,\n                n.inChannels\n            ]), g = this.reshape(e, [\n                1,\n                n.inChannels,\n                n.outChannels\n            ]);\n            return this.reshape(this.fusedBatchMatMul({\n                a: m,\n                b: g,\n                transposeA: !1,\n                transposeB: !1,\n                bias: r,\n                activation: o,\n                preluActivationWeights: a\n            }), n.outShape);\n        }\n        var y = f ? s[0] * s[1] * (s[2] + 1) : s[0] * s[2] * (s[3] + 1), x = {\n            dataId: t.dataId,\n            shape: [\n                1,\n                y,\n                n.inChannels\n            ],\n            dtype: t.dtype\n        }, b = u.shape;\n        u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, C(_e(u.shape, x.shape), function() {\n            return \"packed reshape \" + u.shape + \" to \" + x.shape + \" isn't free\";\n        });\n        var w = this.reshape(e, [\n            1,\n            n.inChannels,\n            n.outChannels\n        ]), E = this.fusedBatchMatMul({\n            a: x,\n            b: w,\n            transposeA: !1,\n            transposeB: !1,\n            bias: r,\n            activation: o,\n            preluActivationWeights: a\n        }), R = this.texData.get(E.dataId);\n        return C(R.isPacked, function() {\n            return \"batchMatMul result is expected to be packed\";\n        }), u.shape = b, R.shape = n.outShape, Lt.makeTensorFromDataId(E.dataId, n.outShape, E.dtype);\n    }, o.prototype.conv2dWithIm2Row = function(t, e, n, r, o, a) {\n        var i = n.filterWidth, s = n.filterHeight, u = n.inChannels, c = n.outWidth, l = n.outHeight, h = \"channelsLast\" === n.dataFormat, f = i * s * u, d = l * c, p = [\n            f,\n            d\n        ], v = t.squeeze([\n            0\n        ]), m = e.reshape([\n            1,\n            f,\n            -1\n        ]), g = new Li(p, v.shape, n), y = this.compileAndRun(g, [\n            v\n        ]).reshape([\n            1,\n            p[0],\n            p[1]\n        ]), x = null != r, b = null != a, w = o ? Qs(o, !0) : null, C = new Hi(y.shape, [\n            1,\n            d,\n            n.outChannels\n        ], !0, !1, x, w, b), E = [\n            y,\n            m\n        ];\n        r && E.push(r), b && E.push(a);\n        var R = this.compileAndRun(C, E);\n        return h ? R.reshape([\n            1,\n            l,\n            c,\n            n.outChannels\n        ]) : R.reshape([\n            1,\n            n.outChannels,\n            l,\n            c\n        ]);\n    }, o.prototype.fusedConv2d = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, s = t.preluActivationWeights;\n        if (1 === r.filterHeight && 1 === r.filterWidth && 1 === r.dilationHeight && 1 === r.dilationWidth && 1 === r.strideHeight && 1 === r.strideWidth && (\"SAME\" === r.padInfo.type || \"VALID\" === r.padInfo.type)) return this.conv2dByMatMul(e, n, r, o, a, s);\n        if (i().getBool(\"WEBGL_CONV_IM2COL\") && 1 === e.shape[0]) return this.conv2dWithIm2Row(e, n, r, o, a, s);\n        var u = null != o, c = null != s, l = a ? Qs(a, !1) : null, h = new Qa(r, u, l, c), f = [\n            e,\n            n\n        ];\n        return o && f.push(o), s && f.push(s), this.compileAndRun(h, f);\n    }, o.prototype.conv2d = function(t, e, n) {\n        if (1 === n.filterHeight && 1 === n.filterWidth && 1 === n.dilationHeight && 1 === n.dilationWidth && 1 === n.strideHeight && 1 === n.strideWidth && (\"SAME\" === n.padInfo.type || \"VALID\" === n.padInfo.type)) return this.conv2dByMatMul(t, e, n);\n        if (i().getBool(\"WEBGL_CONV_IM2COL\") && 1 === t.shape[0]) return this.conv2dWithIm2Row(t, e, n);\n        var r = new Qa(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv2dDerInput = function(t, e, n) {\n        var r = new Ka(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv2dDerFilter = function(t, e, n) {\n        var r = new qa(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.fusedDepthwiseConv2D = function(t) {\n        var e, n = t.input, r = t.filter, o = t.convInfo, a = t.bias, s = t.activation, u = t.preluActivationWeights, c = i().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && o.strideWidth <= 2 && o.outChannels / o.inChannels == 1, l = s ? Qs(s, c) : null, h = [\n            n,\n            r\n        ], f = null != a, d = null != u;\n        return f && h.push(a), d && h.push(u), c ? (e = new ti(o, f, l, d), this.compileAndRun(e, h)) : (e = new Za(o, f, l, d), this.compileAndRun(e, h));\n    }, o.prototype.depthwiseConv2D = function(t, e, n) {\n        var r;\n        return i().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && n.strideWidth <= 2 && n.outChannels / n.inChannels == 1 ? (r = new ti(n), this.compileAndRun(r, [\n            t,\n            e\n        ])) : (r = new Za(n), this.compileAndRun(r, [\n            t,\n            e\n        ]));\n    }, o.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        var r = new $a(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        var r = new Ya(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3d = function(t, e, n) {\n        var r = new Ja(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3dDerInput = function(t, e, n) {\n        var r = new Xa(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3dDerFilter = function(t, e, n) {\n        var r = new ja(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.maxPool = function(t, e) {\n        var n = new $i(e, \"max\", !1);\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.avgPool = function(t, e) {\n        var n = new $i(e, \"avg\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.maxPoolBackprop = function(t, e, n, r) {\n        var o = new $i(r, \"max\", !0), a = this.compileAndRun(o, [\n            e\n        ]), i = new zi(r), s = this.compileAndRun(i, [\n            t,\n            a\n        ], e.dtype);\n        return a.dispose(), s;\n    }, o.prototype.avgPoolBackprop = function(t, e, n) {\n        var r = new Ia(n);\n        return this.compileAndRun(r, [\n            t\n        ], e.dtype);\n    }, o.prototype.cast = function(t, e) {\n        return Po(t, e, this);\n    }, o.prototype.unstack = function(t, e) {\n        for(var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++)a !== e && (r[o++] = t.shape[a]);\n        var i = new Array(t.rank).fill(0), s = t.shape.slice();\n        s[e] = 1;\n        var u = new Array(n);\n        for(a = 0; a < u.length; a++)i[e] = a, u[a] = this.slice(t, i, s).reshape(r);\n        return u;\n    }, o.prototype.avgPool3d = function(t, e) {\n        var n = new Qi(e, \"avg\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.avgPool3dBackprop = function(t, e, n) {\n        var r = new ka(n);\n        return this.compileAndRun(r, [\n            t\n        ], e.dtype);\n    }, o.prototype.maxPool3d = function(t, e) {\n        var n = new Qi(e, \"max\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        var o = new Qi(r, \"max\", !0), a = this.compileAndRun(o, [\n            e\n        ]), i = new Gi(r), s = this.compileAndRun(i, [\n            t,\n            a\n        ], e.dtype);\n        return a.dispose(), s;\n    }, o.prototype.reshape = function(t, e) {\n        var n = this.texData.get(t.dataId);\n        if (n.isPacked && !_e(t.shape, e) && (null === n.texture || !_e(n.shape, e))) {\n            var r = this.packedReshape(t, e);\n            return Lt.makeTensorFromDataId(r.dataId, r.shape, r.dtype);\n        }\n        return Lo(t, e);\n    }, o.prototype.resizeBilinear = function(t, e, n, r) {\n        var o = i().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\") ? new ns(t.shape, e, n, r) : new es(t.shape, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ], \"float32\");\n    }, o.prototype.resizeBilinearBackprop = function(t, e, n) {\n        var r = new ts(t, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        var o = new os(t.shape, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        var r = new rs(t, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.multinomial = function(t, e, n, r) {\n        var o = e ? t : go(t), a = o.shape[0], i = o.shape[1], s = new qi(a, i, n), u = s.getCustomSetupFunc(r);\n        return this.compileAndRun(s, [\n            o\n        ], \"int32\", u);\n    }, o.prototype.oneHot = function(t, e, n, r) {\n        var o = new Ki(t.size, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.diag = function(t) {\n        var e = new si(t.size);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\"), jo(t.dataSync(), e.dataSync(), n, r, o);\n    }, o.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        var i = new ei(t.shape, e.shape, r, o, a);\n        return this.compileAndRun(i, [\n            t,\n            e,\n            n\n        ], \"float32\");\n    }, o.prototype.depthToSpace = function(t, e, n) {\n        C(e > 1, function() {\n            return \"blockSize should be > 1 for depthToSpace, but was: \" + e;\n        });\n        var r = t.shape[0], o = \"NHWC\" === n ? t.shape[1] : t.shape[2], a = \"NHWC\" === n ? t.shape[2] : t.shape[3], i = \"NHWC\" === n ? t.shape[3] : t.shape[1], s = o * e, u = a * e, c = i / (e * e), l = new ii(\"NHWC\" === n ? [\n            r,\n            s,\n            u,\n            c\n        ] : [\n            r,\n            c,\n            s,\n            u\n        ], e, n);\n        return this.compileAndRun(l, [\n            t\n        ]);\n    }, o.prototype.split = function(t, e, n) {\n        return Zo(t, e, n);\n    }, o.prototype.scatterND = function(t, e, n) {\n        var r = Zr(0, t, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, c = [\n            u / i,\n            i\n        ], l = t.reshape([\n            a,\n            o\n        ]), h = e.reshape([\n            a,\n            i\n        ]);\n        if (0 === u) return Lo(Fn([]), n);\n        var f = On(0), d = new ss(a, o, l.rank, h.rank, s, c);\n        return this.compileAndRun(d, [\n            h,\n            l,\n            f\n        ]).reshape(n);\n    }, o.prototype.sparseToDense = function(t, e, n, r) {\n        var o = Zr(0, t, n), a = o.sliceRank, i = o.numUpdates, s = o.strides, u = o.outputSize, c = new ss(i, a, t.rank, e.rank, s, [\n            u,\n            1\n        ], !1);\n        return this.compileAndRun(c, [\n            e,\n            t,\n            r\n        ]).reshape(n);\n    }, o.prototype.fft = function(t) {\n        return this.fftImpl(t, !1);\n    }, o.prototype.ifft = function(t) {\n        return this.fftImpl(t, !0);\n    }, o.prototype.fftImpl = function(t, e) {\n        var n = this.texData.get(t.dataId), r = new pi(fi, t.shape, e), o = new pi(di, t.shape, e), a = [\n            this.makeComplexComponentTensorInfo(t, n.complexTensors.real),\n            this.makeComplexComponentTensorInfo(t, n.complexTensors.imag)\n        ], i = this.compileAndRun(r, a), s = this.compileAndRun(o, a), u = this.complex(i, s).as2D(t.shape[0], t.shape[1]);\n        return i.dispose(), s.dispose(), u;\n    }, o.prototype.gatherND = function(t, e) {\n        var n = e.shape, r = n[n.length - 1], o = jr(t, e), a = o[0], i = o[1], s = o[2], u = o[3], c = e.reshape([\n            i,\n            r\n        ]), l = t.reshape([\n            t.size / s,\n            s\n        ]), h = new gi(r, u, [\n            i,\n            s\n        ]);\n        return this.compileAndRun(h, [\n            l,\n            c\n        ]).reshape(a);\n    }, o.prototype.fill = function(t, e, n) {\n        if (\"string\" === (n = n || j(e))) {\n            var r = P(n, k(t));\n            return r.fill(e), Lt.makeTensor(r, t, n, this);\n        }\n        var o = new vi(t, e), a = o.getCustomSetupFunc(e);\n        return this.compileAndRun(o, [], n, a);\n    }, o.prototype.onesLike = function(t) {\n        if (\"string\" === t.dtype) throw new Error(\"onesLike is not supported under string dtype\");\n        return this.fill(t.shape, 1, t.dtype);\n    }, o.prototype.zerosLike = function(t) {\n        return this.fill(t.shape, \"string\" === t.dtype ? \"\" : 0, t.dtype);\n    }, o.prototype.linspace = function(t, e, n) {\n        return Wo(t, e, n);\n    }, o.prototype.makeTensorInfo = function(t, e) {\n        var n = this.write(null, t, e);\n        return this.texData.get(n).usage = null, {\n            dataId: n,\n            shape: t,\n            dtype: e\n        };\n    }, o.prototype.makeOutput = function(t, e) {\n        var n = this.makeTensorInfo(t, e).dataId;\n        return Lt.makeTensorFromDataId(n, t, e, this);\n    }, o.prototype.unpackTensor = function(t) {\n        var e = new Ys(t.shape);\n        return this.runWebGLProgram(e, [\n            t\n        ], t.dtype);\n    }, o.prototype.packTensor = function(t) {\n        var e = new ji(t.shape);\n        return this.runWebGLProgram(e, [\n            t\n        ], t.dtype, null, !0);\n    }, o.prototype.packedReshape = function(t, e) {\n        var n = [\n            Ae(t.shape)\n        ].concat(De(t.shape)), r = {\n            dtype: t.dtype,\n            shape: n,\n            dataId: t.dataId\n        }, o = [\n            Ae(e)\n        ].concat(De(e)), a = new Zi(o, n), i = this.runWebGLProgram(a, [\n            r\n        ], t.dtype, null, !0);\n        return {\n            dataId: i.dataId,\n            shape: e,\n            dtype: i.dtype\n        };\n    }, o.prototype.decode = function(t) {\n        var e, n = this.texData.get(t), r = n.isPacked, o = n.shape, a = n.dtype, i = Te(o);\n        e = r ? new ai(i) : new oi(i);\n        return {\n            dtype: a,\n            shape: o,\n            dataId: this.runWebGLProgram(e, [\n                {\n                    shape: i,\n                    dtype: a,\n                    dataId: t\n                }\n            ], a, null, !0).dataId\n        };\n    }, o.prototype.runWebGLProgram = function(t, e, n, r, o) {\n        var a = this;\n        void 0 === o && (o = !1);\n        var s = this.makeTensorInfo(t.outputShape, n), u = this.texData.get(s.dataId);\n        if (t.packedOutput && (u.isPacked = !0), t.outPackingScheme === Vt.DENSE) {\n            var c = Yt(t.outputShape);\n            u.texShape = c.map(function(t) {\n                return 2 * t;\n            });\n        }\n        if (null != t.outTexUsage && (u.usage = t.outTexUsage), 0 === k(s.shape)) return u.values = B(s.dtype, 0), s;\n        var l = [], h = e.map(function(e) {\n            if (\"complex64\" === e.dtype) throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");\n            var n = a.texData.get(e.dataId);\n            if (null == n.texture) {\n                if (!t.packedInputs && k(e.shape) <= i().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\")) return {\n                    shape: e.shape,\n                    texData: null,\n                    isUniform: !0,\n                    uniformValues: n.values\n                };\n                t.packedInputs && (n.isPacked = !0, n.shape = e.shape);\n            } else if (!!n.isPacked != !!t.packedInputs) e = n.isPacked ? a.unpackTensor(e) : a.packTensor(e), l.push(e), n = a.texData.get(e.dataId);\n            else if (n.isPacked && !_e(n.shape, e.shape)) {\n                var r = e, o = e.shape;\n                e.shape = n.shape, e = a.packedReshape(e, o), l.push(e), n = a.texData.get(e.dataId), r.shape = o;\n            }\n            return a.uploadToGPU(e.dataId), {\n                shape: e.shape,\n                texData: n,\n                isUniform: !1\n            };\n        });\n        this.uploadToGPU(s.dataId);\n        var f, d = {\n            shape: s.shape,\n            texData: u,\n            isUniform: !1\n        }, p = function(t, e, n) {\n            var r = \"\";\n            e.concat(n).forEach(function(t) {\n                var e = null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0, n = t.isUniform ? \"uniform\" : t.texData.texShape;\n                r += t.shape + \"_\" + n + \"_\" + e;\n            });\n            var o = t.userCode, a = t.constructor.name;\n            return a += \"_\" + r + \"_\" + o;\n        }(t, h, d), v = this.getAndSaveBinary(p, function() {\n            return function(t, e, n, r) {\n                var o = e.userCode, a = n.map(function(t, n) {\n                    var r = {\n                        logicalShape: t.shape,\n                        texShape: t.isUniform ? null : t.texData.texShape,\n                        isUniform: t.isUniform,\n                        isPacked: !t.isUniform && t.texData.isPacked,\n                        flatOffset: null\n                    };\n                    return null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0 && (r.flatOffset = t.texData.slice.flatOffset), {\n                        name: e.variableNames[n],\n                        shapeInfo: r\n                    };\n                }), s = a.map(function(t) {\n                    return t.shapeInfo;\n                }), u = {\n                    logicalShape: r.shape,\n                    texShape: r.texData.texShape,\n                    isUniform: !1,\n                    isPacked: r.texData.isPacked,\n                    flatOffset: null\n                }, c = fa(a, u, o, e.packedInputs), l = t.createProgram(c), h = null, f = t.getUniformLocation(l, \"NAN\", !1);\n                1 === i().getNumber(\"WEBGL_VERSION\") && (h = t.getUniformLocation(l, \"INFINITY\", !1));\n                for(var d = {}, p = 0; p < e.variableNames.length; p++){\n                    var v = e.variableNames[p];\n                    d[v] = t.getUniformLocation(l, v, !1), d[\"offset\" + v] = t.getUniformLocation(l, \"offset\" + v, !1);\n                }\n                return {\n                    program: e,\n                    source: c,\n                    webGLProgram: l,\n                    uniformLocations: d,\n                    inShapeInfos: s,\n                    outShapeInfo: u,\n                    infLoc: h,\n                    nanLoc: f\n                };\n            }(a.gpgpu, t, h, d);\n        }), m = null != this.activeTimers;\n        if (m && (f = this.startTimer()), function(t, e, n, r, o) {\n            Pi(e.inShapeInfos, n), Pi([\n                e.outShapeInfo\n            ], [\n                r\n            ]);\n            var a = r.texData.texture, s = r.texData.texShape;\n            r.texData.isPacked ? t.setOutputPackedMatrixTexture(a, s[0], s[1]) : t.setOutputMatrixTexture(a, s[0], s[1]), t.setProgram(e.webGLProgram), 1 === i().getNumber(\"WEBGL_VERSION\") && null !== e.infLoc && t.gl.uniform1f(e.infLoc, 1 / 0), null !== e.nanLoc && t.gl.uniform1f(e.nanLoc, NaN), n.forEach(function(n, r) {\n                var o = e.program.variableNames[r], a = e.uniformLocations[o], i = e.uniformLocations[\"offset\" + o];\n                if (null != a) if (n.isUniform) if (k(n.shape) < 2) t.gl.uniform1f(a, n.uniformValues[0]);\n                else {\n                    var s = n.uniformValues;\n                    s instanceof Float32Array || (s = new Float32Array(s)), t.gl.uniform1fv(a, s);\n                }\n                else null != n.texData.slice && null != i && t.gl.uniform1i(i, n.texData.slice.flatOffset), t.setInputMatrixTexture(n.texData.texture, a, r);\n            }), null != o && o(t, e.webGLProgram), t.executeProgram();\n        }(this.gpgpu, v, h, d, r), l.forEach(function(t) {\n            return a.disposeData(t.dataId);\n        }), m && (f = this.endTimer(f), this.activeTimers.push({\n            name: t.constructor.name,\n            query: this.getQueryTime(f)\n        })), !i().getBool(\"WEBGL_LAZILY_UNPACK\") && u.isPacked && !1 === o) {\n            var g = this.unpackTensor(s);\n            return this.disposeData(s.dataId), g;\n        }\n        return s;\n    }, o.prototype.compileAndRun = function(t, e, n, r, o) {\n        void 0 === o && (o = !1), n = n || e[0].dtype;\n        var a = this.runWebGLProgram(t, e, n, r, o);\n        return Lt.makeTensorFromDataId(a.dataId, a.shape, a.dtype);\n    }, o.prototype.getAndSaveBinary = function(t, e) {\n        return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];\n    }, o.prototype.getTextureManager = function() {\n        return this.textureManager;\n    }, o.prototype.dispose = function() {\n        var t = this;\n        if (!this.disposed) {\n            if (!i().getBool(\"IS_TEST\")) Object.keys(this.binaryCache).forEach(function(e) {\n                t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram), delete t.binaryCache[e];\n            });\n            this.textureManager.dispose(), null != this.canvas && \"undefined\" != typeof HTMLCanvasElement && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0;\n        }\n    }, o.prototype.floatPrecision = function() {\n        var t = this;\n        return null == this.floatPrecisionValue && (this.floatPrecisionValue = Ze(function() {\n            if (!i().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")) {\n                var e = i().getBool(\"DEBUG\");\n                i().set(\"DEBUG\", !1);\n                var n = t.abs(On(1e-8)).dataSync()[0];\n                if (i().set(\"DEBUG\", e), n > 0) return 32;\n            }\n            return 16;\n        })), this.floatPrecisionValue;\n    }, o.prototype.epsilon = function() {\n        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;\n    }, o.prototype.uploadToGPU = function(t) {\n        var e, n = this.texData.get(t), r = n.shape, o = n.dtype, a = n.values, i = n.texture, s = n.usage, u = n.isPacked;\n        if (null == i) {\n            var c, l = null != this.activeTimers;\n            l && (c = et());\n            var h = n.texShape;\n            if (null == h && (h = Ne(r, u), n.texShape = h), null != a) {\n                var f = Te(r), d = void 0, p = h[1], v = h[0], m = a instanceof Uint8Array;\n                u ? (p = (e = $t(h[0], h[1]))[0], v = e[1], d = new hi(f, [\n                    v,\n                    p\n                ], m)) : d = new li(f, [\n                    v,\n                    p\n                ], m);\n                var g = this.makeTensorInfo([\n                    v,\n                    p\n                ], o);\n                this.texData.get(g.dataId).usage = m ? zt.PIXELS : zt.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId), p, v, a);\n                var y = this.runWebGLProgram(d, [\n                    g\n                ], o, null, !0), x = this.texData.get(y.dataId);\n                n.texture = x.texture, n.texShape = x.texShape, n.isPacked = x.isPacked, n.usage = x.usage, this.disposeData(g.dataId), this.texData.delete(y.dataId), n.values = null, l && (this.uploadWaitMs += et() - c);\n            } else {\n                var b = this.acquireTexture(h, s, o, u);\n                n.texture = b;\n            }\n        }\n    }, o.prototype.convertAndCacheOnCPU = function(t, e) {\n        var n = this.texData.get(t), r = n.dtype;\n        return this.releaseGPUData(t), null != e && (n.values = function(t, e) {\n            if (\"float32\" === e || \"complex64\" === e) return t;\n            if (\"int32\" === e || \"bool\" === e) {\n                for(var n = \"int32\" === e ? new Int32Array(t.length) : new Uint8Array(t.length), r = 0; r < n.length; ++r)n[r] = Math.round(t[r]);\n                return n;\n            }\n            throw new Error(\"Unknown dtype \" + e);\n        }(e, r)), n.values;\n    }, o.prototype.acquireTexture = function(t, e, n, r) {\n        if (this.numBytesInGPU += this.computeBytes(t, n), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {\n            var o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = !0, console.warn(\"High memory usage in GPU: \" + o + \" MB, most likely due to a memory leak\");\n        }\n        return this.textureManager.acquireTexture(t, e, r);\n    }, o.prototype.computeBytes = function(t, e) {\n        return t[0] * t[1] * z(e);\n    }, o;\n}(bo);\nWt() && Lt.registerBackend(\"webgl\", function() {\n    return new Zs;\n}, 2);\nvar tu = An({\n    square_: function(t) {\n        var e = mn(t, \"x\", \"square\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            return n([\n                e\n            ]), t.square(e);\n        }, {\n            x: e\n        }, null, \"Square\", {}, n, []);\n    }\n}), eu = \"SquaredDifference\";\nvar nu = An({\n    squaredDifference_: function(t, e) {\n        var n, r = mn(t, \"a\", \"squaredDifference\"), o = mn(e, \"b\", \"squaredDifference\");\n        n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape);\n        var a = {\n            a: r,\n            b: o\n        }, i = [\n            r,\n            o\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.squaredDifference(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, a, function(t, e) {\n            var n = e[0], r = e[1], o = On(2);\n            return {\n                a: function() {\n                    return t.mul(n.sub(r).mul(o));\n                },\n                b: function() {\n                    return t.mul(r.sub(n).mul(o));\n                }\n            };\n        }, eu, {}, i, []);\n    }\n});\nvar ru = An({\n    abs_: function(t) {\n        var e = mn(t, \"x\", \"abs\");\n        return \"complex64\" === e.dtype ? Lt.runKernelFunc(function(t) {\n            return t.complexAbs(e);\n        }, {\n            $x: e\n        }) : Lt.runKernelFunc(function(t, n) {\n            var r = t.abs(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.toFloat().step(-1));\n                }\n            };\n        }, \"Abs\");\n    }\n}), ou = An({\n    acos_: function(t) {\n        var e = mn(t, \"x\", \"acos\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.acos(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg();\n                }\n            };\n        });\n    }\n}), au = An({\n    acosh_: function(t) {\n        var e = mn(t, \"x\", \"acosh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.acosh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(n.toFloat().square().sub(1).sqrt());\n                }\n            };\n        });\n    }\n}), iu = An({\n    asin_: function(t) {\n        var e = mn(t, \"x\", \"asin\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.asin(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).sub(n.toFloat().square()).sqrt());\n                }\n            };\n        });\n    }\n}), su = An({\n    asinh_: function(t) {\n        var e = mn(t, \"x\", \"asinh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.asinh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).add(n.toFloat().square()).sqrt());\n                }\n            };\n        });\n    }\n}), uu = An({\n    atan_: function(t) {\n        var e = mn(t, \"x\", \"atan\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.atan(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.toFloat().square().add(1));\n                }\n            };\n        });\n    }\n}), cu = An({\n    atanh_: function(t) {\n        var e = mn(t, \"x\", \"atanh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.atanh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(On(1).sub(n.toFloat().square()));\n                }\n            };\n        });\n    }\n}), lu = An({\n    ceil_: function(t) {\n        var e = mn(t, \"x\", \"ceil\");\n        return Lt.runKernelFunc(function(t) {\n            return t.ceil(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), hu = An({\n    clipByValue_: function(t, e, n) {\n        var r = mn(t, \"x\", \"clipByValue\");\n        C(e <= n, function() {\n            return \"Error in clip: min (\" + e + \") must be less than or equal to max (\" + n + \").\";\n        });\n        var o = [\n            r\n        ], a = {\n            min: e,\n            max: n\n        };\n        return Lt.runKernelFunc(function(t, o) {\n            var a = t.clip(r, e, n);\n            return o([\n                r\n            ]), a;\n        }, {\n            x: r\n        }, function(t, r) {\n            var o = r[0];\n            return {\n                x: function() {\n                    return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)), Xn(t));\n                }\n            };\n        }, \"ClipByValue\", a, o);\n    }\n}), fu = An({\n    cos_: function(t) {\n        var e = mn(t, \"x\", \"cos\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.cos(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return n.toFloat().sin().neg().mul(t);\n                }\n            };\n        }, \"Cos\", {}, n);\n    }\n}), du = An({\n    cosh_: function(t) {\n        var e = mn(t, \"x\", \"cosh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.cosh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return n.toFloat().sinh().mulStrict(t);\n                }\n            };\n        });\n    }\n}), pu = An({\n    erf_: function(t) {\n        var e = mn(t, \"x\", \"erf\");\n        return C(\"int32\" === e.dtype || \"float32\" === e.dtype, function() {\n            return \"Input dtype must be `int32` or `float32`.\";\n        }), \"int32\" === e.dtype && (e = e.toFloat()), Lt.runKernelFunc(function(t, n) {\n            var r = t.erf(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));\n                }\n            };\n        });\n    }\n}), vu = An({\n    exp_: function(t) {\n        var e = mn(t, \"x\", \"exp\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.exp(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return t.mulStrict(e[0]);\n                }\n            };\n        }, \"Exp\", {}, [], [\n            !0\n        ]);\n    }\n}), mu = An({\n    expm1_: function(t) {\n        var e = mn(t, \"x\", \"expm1\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.expm1(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.exp());\n                }\n            };\n        });\n    }\n}), gu = An({\n    floor_: function(t) {\n        var e = mn(t, \"x\", \"floor\");\n        return Lt.runKernelFunc(function(t) {\n            return t.floor(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), yu = An({\n    log_: function(t) {\n        var e = mn(t, \"x\", \"log\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.log(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.div(n.toFloat());\n                }\n            };\n        }, \"Log\", {}, n);\n    }\n}), xu = An({\n    log1p_: function(t) {\n        var e = mn(t, \"x\", \"log1p\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.log1p(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.add(1));\n                }\n            };\n        });\n    }\n}), bu = An({\n    logSigmoid_: function(t) {\n        var e = mn(t, \"x\", \"logSigmoid\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.softplus(e.neg()).neg();\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.neg().sigmoid());\n                }\n            };\n        });\n    }\n}), wu = An({\n    neg_: function(t) {\n        var e = mn(t, \"x\", \"neg\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t) {\n            return t.neg(e);\n        }, {\n            x: e\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.neg();\n                }\n            };\n        }, \"Neg\", {}, n);\n    }\n}), Cu = An({\n    reciprocal_: function(t) {\n        var e = mn(t, \"x\", \"reciprocal\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.reciprocal(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.square().neg());\n                }\n            };\n        });\n    }\n}), Eu = An({\n    round_: function(t) {\n        var e = mn(t, \"x\", \"round\");\n        return Lt.runKernelFunc(function(t) {\n            return t.round(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Ru = An({\n    rsqrt_: function(t) {\n        var e = mn(t, \"x\", \"rsqrt\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.rsqrt(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.div(n.pow(1.5).mul(2)).neg();\n                }\n            };\n        }, \"Rsqrt\", {}, n);\n    }\n}), Iu = An({\n    sigmoid_: function(t) {\n        var e = mn(t, \"x\", \"sigmoid\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sigmoid(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.mul(On(1).sub(n)));\n                }\n            };\n        }, \"Sigmoid\");\n    }\n}), ku = An({\n    sign_: function(t) {\n        var e = mn(t, \"x\", \"sign\");\n        return Lt.runKernelFunc(function(t) {\n            return t.sign(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Su = An({\n    isNaN_: function(t) {\n        var e = mn(t, \"x\", \"isNaN\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isNaN(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Au = An({\n    isInf_: function(t) {\n        var e = mn(t, \"x\", \"isInf\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isInf(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Du = An({\n    isFinite_: function(t) {\n        var e = mn(t, \"x\", \"isFinite\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isFinite(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Tu = An({\n    sin_: function(t) {\n        var e = mn(t, \"x\", \"sin\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sin(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return n.toFloat().cos().mul(t);\n                }\n            };\n        }, \"Sin\", {}, n);\n    }\n}), Nu = An({\n    sinh_: function(t) {\n        var e = mn(t, \"x\", \"sinh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sinh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return n.toFloat().cosh().mulStrict(t);\n                }\n            };\n        });\n    }\n}), Fu = An({\n    softplus_: function(t) {\n        var e = mn(t, \"x\", \"softplus\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.softplus(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.sigmoid());\n                }\n            };\n        });\n    }\n}), _u = An({\n    sqrt_: function(t) {\n        var e = mn(t, \"x\", \"sqrt\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sqrt(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.toFloat().sqrt().mul(2));\n                }\n            };\n        });\n    }\n}), Ou = An({\n    step_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = mn(t, \"x\", \"step\");\n        return Lt.runKernelFunc(function(t) {\n            return t.step(n, e);\n        }, {\n            $x: n\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Mu = An({\n    tan_: function(t) {\n        var e = mn(t, \"x\", \"tan\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.tan(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.cos().square());\n                }\n            };\n        });\n    }\n}), Bu = An({\n    tanh_: function(t) {\n        var e = mn(t, \"x\", \"tanh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.tanh(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return On(1).sub(n.square()).mulStrict(t);\n                }\n            };\n        }, \"Tanh\", {}, null, [\n            !0\n        ]);\n    }\n});\nfunction Pu(t, e, n, r, o, a) {\n    var i, s, u = mn(t, \"x\", \"batchNorm\"), c = mn(e, \"mean\", \"batchNorm\"), l = mn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = mn(o, \"scale\", \"batchNorm\")), null != r && (s = mn(r, \"offset\", \"batchNorm\")), C(2 === u.rank, function() {\n        return \"Error in batchNorm3D: x must be rank 3 but got rank \" + u.rank + \".\";\n    }), C(2 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(2 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(2 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(2 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank \" + s.rank + \".\";\n    }), Uu(u, c, l, s, i, a);\n}\nfunction Lu(t, e, n, r, o, a) {\n    var i, s, u = mn(t, \"x\", \"batchNorm\"), c = mn(e, \"mean\", \"batchNorm\"), l = mn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = mn(o, \"scale\", \"batchNorm\")), null != r && (s = mn(r, \"offset\", \"batchNorm\")), C(3 === u.rank, function() {\n        return \"Error in batchNorm3D: x must be rank 3 but got rank \" + u.rank + \".\";\n    }), C(3 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(3 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(3 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(3 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank \" + s.rank + \".\";\n    }), Uu(u, c, l, s, i, a);\n}\nfunction Wu(t, e, n, r, o, a) {\n    var i, s, u = mn(t, \"x\", \"batchNorm\"), c = mn(e, \"mean\", \"batchNorm\"), l = mn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = mn(o, \"scale\", \"batchNorm\")), null != r && (s = mn(r, \"offset\", \"batchNorm\")), C(4 === u.rank, function() {\n        return \"Error in batchNorm4D: x must be rank 4 but got rank \" + u.rank + \".\";\n    }), C(4 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(4 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(4 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(4 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank \" + s.rank + \".\";\n    }), Uu(u, c, l, s, i, a);\n}\nfunction Uu(t, e, n, r, o, a) {\n    null == a && (a = .001);\n    var i, s, u, c = mn(t, \"x\", \"batchNorm\"), l = mn(e, \"mean\", \"batchNorm\"), h = mn(n, \"variance\", \"batchNorm\");\n    null != o && (i = mn(o, \"scale\", \"batchNorm\")), null != r && (s = mn(r, \"offset\", \"batchNorm\")), C(l.rank === h.rank, function() {\n        return \"Batch normalization gradient requires mean and variance to have equal ranks.\";\n    }), C(null == s || l.rank === s.rank, function() {\n        return \"Batch normalization gradient requires mean and offset to have equal ranks.\";\n    }), C(null == i || l.rank === i.rank, function() {\n        return \"Batch normalization gradient requires mean and scale to have equal ranks.\";\n    }), u = 0 === c.rank || 1 === c.rank ? c.as4D(1, 1, 1, c.size) : 2 === c.rank ? c.as4D(1, 1, c.shape[0], c.shape[1]) : 3 === c.rank ? c.as4D(1, c.shape[0], c.shape[1], c.shape[2]) : c;\n    var f = [\n        c,\n        l,\n        h,\n        i\n    ];\n    return Lt.runKernelFunc(function(t, e) {\n        var n = t.batchNormalization(u, Vu(l), Vu(h), a, Vu(i), Vu(s));\n        return e([\n            c,\n            l,\n            h,\n            i\n        ]), n;\n    }, {\n        x: c,\n        mean: l,\n        variance: h,\n        scale: i,\n        offset: s\n    }, function(t, e) {\n        var n = e, r = n[0], o = n[1], i = n[2], s = n[3], c = null == s ? On(1) : s, l = Eo(o.shape, u.shape), h = [];\n        if (1 === o.rank) {\n            for(var f = 0; f < u.shape.length - 1; ++f)h.push(u.shape[f]);\n            h.push(1);\n        }\n        var d = r.sub(o), p = t.mul(c), v = Ru(i.add(On(a))), m = v.mul(v).mul(v).mul(On(-.5));\n        return {\n            x: function() {\n                return 1 === o.rank ? t.mul(Lr(v.as4D(1, 1, 1, o.shape[0]), h)).mul(c).reshape(r.shape) : t.mul(v).mul(c).reshape(r.shape);\n            },\n            mean: function() {\n                var t = v.mul(On(-1)).mul(p);\n                return 1 === o.rank && (t = t.sum(l)), t.reshape(o.shape);\n            },\n            variance: function() {\n                var t = m.mul(d).mul(p);\n                return 1 === o.rank && (t = t.sum(l)), t.reshape(o.shape);\n            },\n            scale: function() {\n                var e = d.mul(v), n = t.mul(e);\n                return 1 === o.rank && (n = n.sum(l)), n.reshape(o.shape);\n            },\n            offset: function() {\n                var e = t;\n                return 1 === o.rank && (e = e.sum(l)), e.reshape(o.shape);\n            }\n        };\n    }, \"BatchNormalization\", {\n        varianceEpsilon: a\n    }, f).reshape(c.shape);\n}\nfunction Vu(t) {\n    return null == t ? null : 0 === t.rank ? t.as1D() : 1 === t.rank ? t : 2 === t.rank ? t.as4D(1, 1, t.shape[0], t.shape[1]) : 3 === t.rank ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2]) : t;\n}\nfunction zu() {\n    Xe(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\");\n}\nvar Gu = An({\n    batchNormalization2d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), zu(), Pu(t, e, n, a, o, r);\n    }\n}), Hu = An({\n    batchNormalization3d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), zu(), Lu(t, e, n, a, o, r);\n    }\n}), qu = An({\n    batchNormalization4d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), zu(), Wu(t, e, n, a, o, r);\n    }\n}), Ku = An({\n    batchNormalization_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), zu(), Uu(t, e, n, a, o, r);\n    }\n}), ju = An({\n    batchNorm_: Uu\n}), Xu = An({\n    batchNorm2d_: Pu\n}), Yu = An({\n    batchNorm3d_: Lu\n}), $u = An({\n    batchNorm4d_: Wu\n});\nvar Qu = An({\n    logicalAnd_: function(t, e) {\n        var n = mn(t, \"a\", \"logicalAnd\", \"bool\"), r = mn(e, \"b\", \"logicalAnd\", \"bool\");\n        return Ro(n.shape, r.shape), Lt.runKernelFunc(function(t) {\n            return t.logicalAnd(n, r);\n        }, {\n            a: n,\n            b: r\n        }, null, \"LogicalAnd\");\n    }\n}), Ju = An({\n    logicalNot_: function(t) {\n        var e = mn(t, \"x\", \"logicalNot\", \"bool\");\n        return Lt.runKernelFunc(function(t) {\n            return t.logicalNot(e);\n        }, {\n            $x: e\n        });\n    }\n}), Zu = An({\n    logicalOr_: function(t, e) {\n        var n = mn(t, \"a\", \"logicalOr\", \"bool\"), r = mn(e, \"b\", \"logicalOr\", \"bool\");\n        return Ro(n.shape, r.shape), Lt.runKernelFunc(function(t) {\n            return t.logicalOr(n, r);\n        }, {\n            $a: n,\n            $b: r\n        });\n    }\n}), tc = An({\n    logicalXor_: function(t, e) {\n        var n = mn(t, \"a\", \"logicalXor\", \"bool\"), r = mn(e, \"b\", \"logicalXor\", \"bool\");\n        return Ro(n.shape, r.shape), Zu(t, e).logicalAnd(Qu(t, e).logicalNot());\n    }\n}), ec = An({\n    where_: function(t, e, n) {\n        var r = mn(e, \"a\", \"where\"), o = mn(n, \"b\", \"where\"), a = mn(t, \"condition\", \"where\", \"bool\");\n        return E(r.shape, o.shape, \"Error in where: \"), 1 === a.rank ? C(a.shape[0] === r.shape[0], function() {\n            return \"The first dimension of `a` must match the size of `condition`.\";\n        }) : E(a.shape, o.shape, \"Error in where: \"), Lt.runKernelFunc(function(t, e) {\n            var n = t.select(a, r, o);\n            return e([\n                a\n            ]), n;\n        }, {\n            $condition: a,\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $condition: function() {\n                    return Xn(n).toFloat();\n                },\n                $a: function() {\n                    return t.mul(n.cast(t.dtype));\n                },\n                $b: function() {\n                    return t.mul(n.logicalNot().cast(t.dtype));\n                }\n            };\n        });\n    }\n}), nc = function(t) {\n    return n(this, void 0, void 0, function() {\n        var e, n, o;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return [\n                        4,\n                        (e = mn(t, \"condition\", \"whereAsync\", \"bool\")).data()\n                    ];\n                case 1:\n                    return n = r.sent(), o = na(e.shape, n), t !== e && e.dispose(), [\n                        2,\n                        o\n                    ];\n            }\n        });\n    });\n};\nvar rc = An({\n    add_: function(t, e) {\n        var n, r = mn(t, \"a\", \"add\"), o = mn(e, \"b\", \"add\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.add(r, o);\n        }, {\n            a: r,\n            b: o\n        }, function(t) {\n            return {\n                a: function() {\n                    var e = t, n = Eo(r.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);\n                },\n                b: function() {\n                    var e = t, n = Eo(o.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.reshape(o.shape);\n                }\n            };\n        }, \"Add\");\n    }\n}), oc = An({\n    addN_: function(t) {\n        C(Array.isArray(t), function() {\n            return \"The argument passed to tf.addN() must be a list of tensors\";\n        }), C(t.length >= 1, function() {\n            return \"Must pass at least one tensor to tf.addN(), but got \" + t.length;\n        });\n        var e = t.map(function(t, e) {\n            return mn(t, \"tensors\" + e, \"addN\");\n        }), n = e[0];\n        e.forEach(function(t) {\n            if (t.dtype !== n.dtype) throw new Error(\"All tensors passed to tf.addN() must have the same dtype\");\n        }), e.forEach(function(t) {\n            if (!S(t.shape, n.shape)) throw new Error(\"All tensors passed to tf.addN() must have the same shape\");\n        });\n        var r = e;\n        return Lt.runKernelFunc(function(t) {\n            return t.addN(e);\n        }, r, function(t) {\n            var n = {};\n            return e.forEach(function(e, r) {\n                n[r] = function() {\n                    return t.clone();\n                };\n            }), n;\n        }, \"AddN\");\n    }\n}), ac = An({\n    addStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"addStrict\"), r = mn(e, \"b\", \"addStrict\");\n        return E(n.shape, r.shape, \"Error in addStrict: \"), n.add(r);\n    }\n}), ic = An({\n    atan2_: function(t, e) {\n        var n, r = mn(t, \"a\", \"atan2\"), o = mn(e, \"b\", \"atan2\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.atan2(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                $a: function() {\n                    var e = rc(n.square(), r.square()), o = t.mul(r.div(e)), i = Eo(n.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(n.shape);\n                },\n                $b: function() {\n                    var e = rc(n.square(), r.square()), o = wu(t.mul(n.div(e))), i = Eo(r.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(r.shape);\n                }\n            };\n        });\n    }\n}), sc = An({\n    div_: function(t, e) {\n        var n, r = mn(t, \"a\", \"div\"), o = mn(e, \"b\", \"div\");\n        if (n = Nt(r, o), r = n[0], o = n[1], \"int32\" === r.dtype && \"int32\" === o.dtype) return lc(r, o);\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.realDivide(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    var e = t.div(r.toFloat()), o = Eo(n.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), o = Eo(r.shape, a);\n                    o.length > 0 && (e = e.sum(o).reshape(r.shape));\n                    var i = r.square();\n                    return e.div(i.toFloat()).neg();\n                }\n            };\n        }, \"Div\");\n    }\n}), uc = An({\n    divNoNan_: function(t, e) {\n        var n, r = mn(t, \"a\", \"div\"), o = mn(e, \"b\", \"div\");\n        r = (n = Nt(r, o))[0], o = n[1];\n        var a = sc(r, o), i = Xn(a), s = o.equal(i);\n        return ec(s, i, a);\n    }\n}), cc = An({\n    divStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"div\"), r = mn(e, \"b\", \"div\");\n        return E(n.shape, r.shape, \"Error in divideStrict: \"), n.div(r);\n    }\n}), lc = An({\n    floorDiv_: function(t, e) {\n        var n, r = mn(t, \"a\", \"floorDiv\"), o = mn(e, \"b\", \"floorDiv\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.floorDiv(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    var e = t.div(r.toFloat()), o = Eo(n.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), o = Eo(r.shape, a);\n                    o.length > 0 && (e = e.sum(o).reshape(r.shape));\n                    var i = r.square();\n                    return e.div(i.toFloat()).neg();\n                }\n            };\n        }, \"FloorDiv\");\n    }\n}), hc = An({\n    maximum_: function(t, e) {\n        var n, r = mn(t, \"a\", \"maximum\"), o = mn(e, \"b\", \"maximum\");\n        return n = Nt(r, o), r = n[0], o = n[1], \"bool\" === r.dtype && (r = r.toInt(), o = o.toInt()), Ro(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.maximum(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return t.mul(n.greaterEqual(r).toFloat());\n                },\n                b: function() {\n                    return t.mul(n.less(r).toFloat());\n                }\n            };\n        }, \"Maximum\");\n    }\n}), fc = An({\n    maximumStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"maximumStrict\"), r = mn(e, \"b\", \"maximumStrict\");\n        return E(n.shape, r.shape, \"Error in maximumStrict: \"), n.maximum(r);\n    }\n}), dc = An({\n    minimum_: function(t, e) {\n        var n, r = mn(t, \"a\", \"minimum\"), o = mn(e, \"b\", \"minimum\");\n        return n = Nt(r, o), r = n[0], o = n[1], \"bool\" === r.dtype && (r = r.toInt(), o = o.toInt()), Ro(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.minimum(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return t.mul(n.lessEqual(r).toFloat());\n                },\n                b: function() {\n                    return t.mul(n.greater(r).toFloat());\n                }\n            };\n        }, \"Minimum\");\n    }\n}), pc = An({\n    minimumStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"minimumStrict\"), r = mn(e, \"b\", \"minimumStrict\");\n        return E(n.shape, r.shape, \"Error in minimumStrict: \"), n.minimum(r);\n    }\n}), vc = An({\n    mod_: function(t, e) {\n        var n, r = mn(t, \"a\", \"mod\"), o = mn(e, \"b\", \"mod\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.mod(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                $a: function() {\n                    var e = Eo(n.shape, a);\n                    return e.length > 0 ? t.sum(e).reshape(n.shape) : t;\n                },\n                $b: function() {\n                    var e = t.mul(n.div(r).floor().neg()), o = Eo(r.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(r.shape) : e;\n                }\n            };\n        });\n    }\n}), mc = An({\n    modStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"modStrict\"), r = mn(e, \"b\", \"modStrict\");\n        return E(n.shape, r.shape, \"Error in modStrict: \"), n.mod(r);\n    }\n}), gc = An({\n    mul_: function(t, e) {\n        var n, r = mn(t, \"a\", \"mul\"), o = mn(e, \"b\", \"mul\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.multiply(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    var e = t.mul(r.toFloat()), o = Eo(n.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), o = Eo(r.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(r.shape) : e;\n                }\n            };\n        }, \"Mul\");\n    }\n}), yc = An({\n    mulStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"mul\"), r = mn(e, \"b\", \"mul\");\n        return E(n.shape, r.shape, \"Error in multiplyStrict: \"), n.mul(r);\n    }\n}), xc = An({\n    pow_: function(t, e) {\n        var n, r = mn(t, \"base\", \"pow\"), o = mn(e, \"exp\", \"pow\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape), i = [\n            r,\n            o\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.pow(r, o);\n            return e([\n                r,\n                o,\n                n\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1], o = e[2];\n            return {\n                a: function() {\n                    var e = r.toFloat(), o = t.mul(e.mul(n.pow(e.sub(On(1))))), i = Eo(n.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(n.shape);\n                },\n                b: function() {\n                    var e = n.greater(0), i = n.log().where(e, Xn(n)), s = t.mul(o.mul(i)), u = Eo(r.shape, a);\n                    return u.length > 0 && (s = s.sum(u)), s.reshape(r.shape);\n                }\n            };\n        }, \"Pow\", {}, i, [\n            !0\n        ]);\n    }\n}), bc = An({\n    powStrict_: function(t, e) {\n        return E(t.shape, e.shape, \"Error in powStrict: \"), t.pow(e);\n    }\n}), wc = An({\n    squaredDifferenceStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"squaredDifferenceStrict\"), r = mn(e, \"b\", \"squaredDifferenceStrict\");\n        return E(n.shape, r.shape, \"Error in squaredDifferenceStrict: \"), n.squaredDifference(r);\n    }\n}), Cc = An({\n    sub_: function(t, e) {\n        var n, r = mn(t, \"a\", \"sub\"), o = mn(e, \"b\", \"sub\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Ro(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.subtract(r, o);\n        }, {\n            a: r,\n            b: o\n        }, function(t) {\n            return {\n                a: function() {\n                    var e = t, n = Eo(r.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);\n                },\n                b: function() {\n                    var e = t, n = Eo(o.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.neg().reshape(o.shape);\n                }\n            };\n        }, \"Sub\");\n    }\n}), Ec = An({\n    subStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"subStrict\"), r = mn(e, \"b\", \"subStrict\");\n        return E(n.shape, r.shape, \"Error in subStrict: \"), n.sub(r);\n    }\n});\nvar Rc = An({\n    equal_: function(t, e) {\n        var n, r = mn(t, \"a\", \"equal\"), o = mn(e, \"b\", \"equal\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.equal(r, o);\n        }, {\n            $a: r,\n            $b: o\n        });\n    }\n}), Ic = An({\n    equalStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"equalStrict\"), r = mn(e, \"b\", \"equalStrict\");\n        return E(n.shape, r.shape, \"Error in equalStrict: \"), n.equal(r);\n    }\n}), kc = An({\n    greater_: function(t, e) {\n        var n, r = mn(t, \"a\", \"greater\"), o = mn(e, \"b\", \"greater\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.greater(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"Greater\");\n    }\n}), Sc = An({\n    greaterEqual_: function(t, e) {\n        var n, r = mn(t, \"a\", \"greaterEqual\"), o = mn(e, \"b\", \"greaterEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.greaterEqual(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return Xn(n);\n                },\n                b: function() {\n                    return Xn(r);\n                }\n            };\n        }, \"GreaterEqual\");\n    }\n}), Ac = An({\n    greaterEqualStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"greaterEqualStrict\"), r = mn(e, \"b\", \"greaterEqualStrict\");\n        return E(n.shape, r.shape, \"Error in greaterEqualStrict: \"), n.greaterEqual(r);\n    }\n}), Dc = An({\n    greaterStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"greaterStrict\"), r = mn(e, \"b\", \"greaterStrict\");\n        return E(n.shape, r.shape, \"Error in greaterStrict: \"), n.greater(r);\n    }\n}), Tc = An({\n    less_: function(t, e) {\n        var n, r = mn(t, \"a\", \"less\"), o = mn(e, \"b\", \"less\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.less(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"Less\");\n    }\n}), Nc = An({\n    lessEqual_: function(t, e) {\n        var n, r = mn(t, \"a\", \"lessEqual\"), o = mn(e, \"b\", \"lessEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.lessEqual(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, null, \"LessEqual\");\n    }\n}), Fc = An({\n    lessEqualStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"lessEqualStrict\"), r = mn(e, \"b\", \"lessEqualStrict\");\n        return E(n.shape, r.shape, \"Error in lessEqualStrict: \"), n.lessEqual(r);\n    }\n}), _c = An({\n    lessStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"lessStrict\"), r = mn(e, \"b\", \"lessStrict\");\n        return E(n.shape, r.shape, \"Error in lessStrict: \"), n.less(r);\n    }\n}), Oc = An({\n    notEqual_: function(t, e) {\n        var n, r = mn(t, \"a\", \"notEqual\"), o = mn(e, \"b\", \"notEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Ro(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.notEqual(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"NotEqual\");\n    }\n}), Mc = An({\n    notEqualStrict_: function(t, e) {\n        var n = mn(t, \"a\", \"notEqualStrict\"), r = mn(e, \"b\", \"notEqualStrict\");\n        return E(n.shape, r.shape, \"Error in notEqualStrict: \"), n.notEqual(r);\n    }\n});\nfunction Bc(t, e) {\n    for(var n = [], r = t; r < e; ++r)n.push(r);\n    return n;\n}\nfunction Pc(t) {\n    for(var e = [], n = 0; n < t.length; ++n)for(var r = 0; r < t[n].length; ++r)e.push(t[n][r]);\n    return e;\n}\nvar Lc = An({\n    gather_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r = mn(t, \"x\", \"gather\"), o = mn(e, \"indices\", \"gather\", \"int32\");\n        n = O(n, r.shape)[0];\n        var a = function(t, e, n) {\n            for(var r = t.shape[n], o = [], a = 1, i = 1, s = 0; s < n; s++)o.push(t.shape[s]), a *= t.shape[s];\n            for(s = 0; s < e.rank; s++)o.push(e.shape[s]);\n            for(s = n + 1; s < t.rank; s++)o.push(t.shape[s]), i *= t.shape[s];\n            return {\n                batchSize: a,\n                sliceSize: i,\n                dimSize: r,\n                outputShape: o\n            };\n        }(r, o, n);\n        return Lt.runKernelFunc(function(t, e) {\n            var a = t.gather(r, o.flatten(), n);\n            return e([\n                o\n            ]), a;\n        }, {\n            x: r,\n            indices: o\n        }, function(t, e) {\n            var o = e[0];\n            return {\n                x: function() {\n                    var e = r.shape, a = o.size, i = e.slice(0, n), s = i.length, u = e.slice(n, e.length).slice(1), c = u.length, l = Bc(0, s), h = Bc(s + 1, s + 1 + c), f = Pc([\n                        i,\n                        [\n                            a\n                        ],\n                        u\n                    ]), d = t.reshape(f), p = o.reshape([\n                        a\n                    ]), v = Pc([\n                        [\n                            s\n                        ],\n                        l,\n                        h\n                    ]), m = d.transpose(v), g = Wc(m, p, r.shape[n]), y = Rn(v);\n                    return g = g.transpose(y);\n                },\n                indices: function() {\n                    return o;\n                }\n            };\n        }, \"Gather\", {\n            axis: n\n        }).reshape(a.outputShape);\n    }\n}), Wc = An({\n    unsortedSegmentSum_: function(t, e, n) {\n        var r = mn(t, \"x\", \"unsortedSegmentSum\"), o = mn(e, \"segmentIds\", \"unsortedSegmentSum\", \"int32\");\n        return C(A(n), function() {\n            return \"numSegments must be of dtype int\";\n        }), Lt.runKernelFunc(function(t, e) {\n            var a = t.unsortedSegmentSum(r, o, n);\n            return e([\n                o\n            ]), a;\n        }, {\n            $x: r\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return function(t, e) {\n                        for(var n = hc(e, Xn(e)), r = Lc(t, n), o = Sc(e, On(0, \"int32\")), a = r.rank - o.rank, i = 0; i < a; ++i)o = wr(o, i + 1);\n                        o = Qu(o, zn(r.shape, \"bool\"));\n                        var s = Xn(r);\n                        return ec(o, r, s);\n                    }(t, n);\n                }\n            };\n        });\n    }\n});\nvar Uc = function(t, e, o) {\n    return n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f, d, p, v, m;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    for(n = mn(t, \"tensor\", \"boolMask\"), a = mn(e, \"mask\", \"boolMask\", \"bool\"), i = null == o ? 0 : o, s = a.rank, u = n.shape, C(s > 0, function() {\n                        return \"mask cannot be scalar\";\n                    }), E(u.slice(i, i + s), a.shape, \"mask's shape must match the first K dimensions of tensor's shape,\"), c = 1, l = i; l < i + s; l++)c *= u[l];\n                    return h = u.slice(0, i).concat([\n                        c\n                    ], u.slice(i + s)), f = n.reshape(h), d = a.reshape([\n                        -1\n                    ]), [\n                        4,\n                        nc(d)\n                    ];\n                case 1:\n                    return p = r.sent(), v = p.squeeze([\n                        1\n                    ]), m = Lc(f, v, i), t !== n && n.dispose(), e !== a && a.dispose(), v.dispose(), f.dispose(), d.dispose(), p.dispose(), [\n                        2,\n                        m\n                    ];\n            }\n        });\n    });\n};\nfunction Vc(t, e, n, r, o, a, i) {\n    void 0 === a && (a = \"NHWC\"), C(t.length === e.rank, function() {\n        return \"Length of inShape (\" + t.length + \") and rank of dy (\" + e.rank + \") must match\";\n    });\n    var s = t, u = e, c = !1;\n    3 === e.rank && (c = !0, u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]), s = [\n        1,\n        t[0],\n        t[1],\n        t[2]\n    ]), C(4 === s.length, function() {\n        return \"Error in conv2dDerInput: inShape must be length 4, but got length \" + s.length + \".\";\n    }), C(4 === u.rank, function() {\n        return \"Error in conv2dDerInput: dy must be rank 4, but got rank \" + u.rank;\n    }), C(4 === n.rank, function() {\n        return \"Error in conv2dDerInput: filter must be rank 4, but got rank \" + n.rank;\n    });\n    var l = \"NHWC\" === a ? s[3] : s[1], h = \"NHWC\" === a ? u.shape[3] : u.shape[1];\n    C(l === n.shape[2], function() {\n        return \"Error in conv2dDerInput: depth of input (\" + l + \") must match input depth for filter \" + n.shape[2] + \".\";\n    }), C(h === n.shape[3], function() {\n        return \"Error in conv2dDerInput: depth of output (\" + h + \") must match output depth for filter \" + n.shape[3] + \".\";\n    }), null != i && C(A(o), function() {\n        return \"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + o + \".\";\n    });\n    var f = Bo(a), d = So(s, n.shape, r, 1, o, i, !1, f), p = Lt.runKernelFunc(function(t, e) {\n        var r = t.conv2dDerInput(u, n, d);\n        return e([\n            n,\n            u\n        ]), r;\n    }, {\n        dy4D: u,\n        filter: n\n    }, function(t, e) {\n        var n = e[0], s = e[1];\n        return {\n            dy4D: function() {\n                return qc(t, n, r, o, a, 1, i);\n            },\n            filter: function() {\n                return jc(t, s, n.shape, r, o, a, i);\n            }\n        };\n    });\n    return c ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;\n}\nfunction zc(t) {\n    var e = function(t) {\n        return \"number\" == typeof t ? [\n            t,\n            t,\n            t\n        ] : 2 === t.length ? [\n            t[0],\n            t[1],\n            1\n        ] : t;\n    }(t), n = e[0], r = e[1], o = e[2];\n    return 1 === n && 1 === r && 1 === o;\n}\nfunction Gc(t, e, n, r, o) {\n    C(t.length === e.rank, function() {\n        return \"Length of inShape (\" + t.length + \") and rank of dy (\" + e.rank + \") must match\";\n    });\n    var a = t, i = e, s = !1;\n    4 === e.rank && (s = !0, i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]), a = [\n        1,\n        t[0],\n        t[1],\n        t[2],\n        t[3]\n    ]);\n    var u = a[4], c = i.shape[4];\n    C(5 === a.length, function() {\n        return \"Error in conv3dDerInput: inShape must be length 5, but got length \" + a.length + \".\";\n    }), C(5 === i.rank, function() {\n        return \"Error in conv3dDerInput: dy must be rank 5, but got rank \" + i.rank;\n    }), C(5 === n.rank, function() {\n        return \"Error in conv3dDerInput: filter must be rank 5, but got rank \" + n.rank;\n    }), C(u === n.shape[3], function() {\n        return \"Error in conv3dDerInput: depth of input (\" + u + \") must match input depth for filter \" + n.shape[3] + \".\";\n    }), C(c === n.shape[4], function() {\n        return \"Error in conv3dDerInput: depth of output (\" + c + \") must match output depth for filter \" + n.shape[4] + \".\";\n    });\n    var l = Ao(a, n.shape, r, 1, o), h = Lt.runKernelFunc(function(t) {\n        return t.conv3dDerInput(i, n, l);\n    }, {\n        dy5D: i\n    });\n    return s ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n}\nvar Hc = An({\n    conv1d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NWC\"), void 0 === a && (a = 1);\n        var s = mn(t, \"x\", \"conv1d\"), u = mn(e, \"filter\", \"conv1d\"), c = s, l = !1;\n        2 === s.rank && (l = !0, c = s.as3D(1, s.shape[0], s.shape[1])), C(3 === c.rank, function() {\n            return \"Error in conv1d: input must be rank 3, but got rank \" + c.rank + \".\";\n        }), C(3 === u.rank, function() {\n            return \"Error in conv1d: filter must be rank 3, but got rank \" + u.rank + \".\";\n        }), null != i && C(A(r), function() {\n            return \"Error in conv1d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        }), C(c.shape[2] === u.shape[1], function() {\n            return \"Error in conv1d: depth of input (\" + c.shape[2] + \") must match input depth for filter \" + u.shape[1] + \".\";\n        }), C(Mo(n, a), function() {\n            return \"Error in conv1D: Either stride or dilation must be 1. Got stride \" + n + \" and dilation '\" + a + \"'\";\n        }), C(\"NWC\" === o, function() {\n            return \"Error in conv1d: got dataFormat of \" + o + \" but only NWC is currently supported.\";\n        });\n        var h = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]), f = c.as4D(c.shape[0], 1, c.shape[1], c.shape[2]), d = qc(f, h, [\n            1,\n            n\n        ], r, \"NHWC\", [\n            1,\n            a\n        ], i);\n        return l ? d.as2D(d.shape[2], d.shape[3]) : d.as3D(d.shape[0], d.shape[2], d.shape[3]);\n    }\n}), qc = An({\n    conv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NHWC\"), void 0 === a && (a = [\n            1,\n            1\n        ]);\n        var s = mn(t, \"x\", \"conv2d\"), u = mn(e, \"filter\", \"conv2d\"), c = s, l = !1;\n        3 === s.rank && (l = !0, c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), C(4 === c.rank, function() {\n            return \"Error in conv2d: input must be rank 4, but got rank \" + c.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in conv2d: filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), null != i && C(A(r), function() {\n            return \"Error in conv2d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        });\n        var h = \"NHWC\" === o ? c.shape[3] : c.shape[1];\n        C(h === u.shape[2], function() {\n            return \"Error in conv2d: depth of input (\" + h + \") must match input depth for filter \" + u.shape[2] + \".\";\n        }), C(Mo(n, a), function() {\n            return \"Error in conv2D: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        });\n        var f = Bo(o), d = So(c.shape, u.shape, n, a, r, i, !1, f), p = [\n            u,\n            c\n        ], v = Lt.runKernelFunc(function(t, e) {\n            var n = t.conv2d(c, u, d);\n            return e([\n                u,\n                c\n            ]), n;\n        }, {\n            x: c,\n            filter: u\n        }, function(t, e) {\n            var i = e, s = i[0], u = i[1];\n            return C(Oo(a), function() {\n                return \"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + a + \"'\";\n            }), {\n                x: function() {\n                    return Xc(u.shape, t, s, n, r, o);\n                },\n                filter: function() {\n                    return jc(u, t, s.shape, n, r, o);\n                }\n            };\n        }, \"Conv2D\", d, p);\n        return l ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;\n    }\n}), Kc = An({\n    conv3d_: function(t, e, n, r, o, a) {\n        void 0 === o && (o = \"NDHWC\"), void 0 === a && (a = [\n            1,\n            1,\n            1\n        ]);\n        var i = mn(t, \"x\", \"conv3d\"), s = mn(e, \"filter\", \"conv3d\"), u = i, c = !1;\n        4 === i.rank && (c = !0, u = i.as5D(1, i.shape[0], i.shape[1], i.shape[2], i.shape[3])), C(5 === u.rank, function() {\n            return \"Error in conv3d: input must be rank 5, but got rank \" + u.rank + \".\";\n        }), C(5 === s.rank, function() {\n            return \"Error in conv3d: filter must be rank 5, but got rank \" + s.rank + \".\";\n        }), C(u.shape[4] === s.shape[3], function() {\n            return \"Error in conv3d: depth of input (\" + u.shape[4] + \") must match input depth for filter \" + s.shape[3] + \".\";\n        }), C(function(t, e) {\n            return zc(t) || zc(e);\n        }(n, a), function() {\n            return \"Error in conv3D: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        }), C(\"NDHWC\" === o, function() {\n            return \"Error in conv3d: got dataFormat of \" + o + \" but only NDHWC is currently supported.\";\n        });\n        var l = Ao(u.shape, s.shape, n, a, r), h = Lt.runKernelFunc(function(t, e) {\n            var n = t.conv3d(u, s, l);\n            return e([\n                u,\n                s\n            ]), n;\n        }, {\n            x: u,\n            $filter: s\n        }, function(t, e) {\n            C(zc(a), function() {\n                return \"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + a + \"'\";\n            });\n            var o = e[0], i = e[1];\n            return {\n                x: function() {\n                    return Gc(o.shape, t, i, n, r);\n                },\n                $filter: function() {\n                    return function(t, e, n, r, o) {\n                        var a = t;\n                        4 === t.rank && (a = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]));\n                        var i = e;\n                        4 === i.rank && (i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]));\n                        C(5 === a.rank, function() {\n                            return \"Error in conv3dDerFilter: input must be rank 5, but got shape \" + a.shape + \".\";\n                        }), C(5 === i.rank, function() {\n                            return \"Error in conv3dDerFilter: dy must be rank 5, but got shape \" + i.shape + \".\";\n                        }), C(5 === n.length, function() {\n                            return \"Error in conv3dDerFilter: filterShape must be length 5, but got \" + n + \".\";\n                        }), C(a.shape[4] === n[3], function() {\n                            return \"Error in conv3dDerFilter: depth of input \" + a.shape[4] + \") must match input depth in filter (\" + n[3] + \".\";\n                        }), C(i.shape[4] === n[4], function() {\n                            return \"Error in conv3dDerFilter: depth of dy (\" + i.shape[4] + \") must match output depth for filter (\" + n[4] + \").\";\n                        });\n                        var s = Ao(a.shape, n, r, 1, o);\n                        return Lt.runKernelFunc(function(t) {\n                            return t.conv3dDerFilter(a, i, s);\n                        }, {\n                            x5D: a,\n                            dy5D: i\n                        });\n                    }(o, t, i.shape, n, r);\n                }\n            };\n        });\n        return c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n}), jc = An({\n    conv2dDerFilter_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NHWC\");\n        var s = t;\n        3 === t.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));\n        var u = e;\n        3 === u.rank && (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), C(4 === s.rank, function() {\n            return \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + s.shape + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + u.shape + \".\";\n        }), C(4 === n.length, function() {\n            return \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + n + \".\";\n        });\n        var c = \"NHWC\" === a ? s.shape[3] : s.shape[1], l = \"NHWC\" === a ? u.shape[3] : u.shape[1];\n        C(c === n[2], function() {\n            return \"Error in conv2dDerFilter: depth of input \" + c + \") must match input depth in filter (\" + n[2] + \".\";\n        }), C(l === n[3], function() {\n            return \"Error in conv2dDerFilter: depth of dy (\" + l + \") must match output depth for filter (\" + n[3] + \").\";\n        }), null != i && C(A(o), function() {\n            return \"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + o + \".\";\n        });\n        var h = Bo(a), f = So(s.shape, n, r, 1, o, i, !1, h);\n        return Lt.runKernelFunc(function(t) {\n            return t.conv2dDerFilter(s, u, f);\n        }, {\n            x4D: s,\n            dy4D: u\n        });\n    }\n}), Xc = An({\n    conv2dDerInput_: Vc\n}), Yc = An({\n    depthwiseConv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NHWC\"), void 0 === a && (a = [\n            1,\n            1\n        ]);\n        var s = mn(t, \"x\", \"depthwiseConv2d\"), u = mn(e, \"filter\", \"depthwiseConv2d\"), c = s, l = !1;\n        3 === s.rank && (l = !0, c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), C(4 === c.rank, function() {\n            return \"Error in depthwiseConv2d: input must be rank 4, but got rank \" + c.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in depthwiseConv2d: filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(c.shape[3] === u.shape[2], function() {\n            return \"Error in depthwiseConv2d: number of input channels (\" + c.shape[3] + \") must match the inChannels dimension in filter \" + u.shape[2] + \".\";\n        }), null == a && (a = [\n            1,\n            1\n        ]), C(Mo(n, a), function() {\n            return \"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        }), null != i && C(A(r), function() {\n            return \"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        });\n        var h = So(c.shape, u.shape, n, a, r, i, !0), f = [\n            c,\n            u\n        ], d = Lt.runKernelFunc(function(t, e) {\n            var n = t.depthwiseConv2D(c, u, h);\n            return e([\n                c,\n                u\n            ]), n;\n        }, {\n            x: c,\n            filter: u\n        }, function(t, e) {\n            C(Oo(a), function() {\n                return \"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\" + a + \"'\";\n            });\n            var n = e[0], r = e[1];\n            return {\n                x: function() {\n                    return $c(n.shape, t, r, h);\n                },\n                filter: function() {\n                    return Qc(n, t, r.shape, h);\n                }\n            };\n        }, \"DepthwiseConv2dNative\", h, f);\n        return l ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;\n    }\n}), $c = An({\n    depthwiseConv2dDerInput_: function(t, e, n, r) {\n        var o = e, a = !1;\n        3 === e.rank && (a = !0, o = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));\n        var i = Lt.runKernelFunc(function(t) {\n            return t.depthwiseConv2DDerInput(o, n, r);\n        }, {\n            dy4D: o\n        });\n        return a ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;\n    }\n}), Qc = An({\n    depthwiseConv2dDerFilter_: function(t, e, n, r) {\n        var o = t;\n        3 === t.rank && (o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));\n        var a = e;\n        return 3 === a.rank && (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), Lt.runKernelFunc(function(t) {\n            return t.depthwiseConv2DDerFilter(o, a, r);\n        }, {\n            x4D: o,\n            dy4D: a\n        });\n    }\n}), Jc = An({\n    separableConv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = [\n            1,\n            1\n        ]), void 0 === i && (i = \"NHWC\");\n        var s = mn(t, \"x\", \"separableConv2d\"), u = mn(e, \"depthwiseFilter\", \"separableConv2d\"), c = mn(n, \"pointwiseFilter\", \"separableConv2d\"), l = s, h = !1;\n        if (3 === s.rank && (h = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), \"NCHW\" === i) throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");\n        C(4 === l.rank, function() {\n            return \"Error in separableConv2d: input must be rank 4, but got rank \" + l.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in separableConv2d: depthwise filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(4 === c.rank, function() {\n            return \"Error in separableConv2d: pointwise filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(1 === c.shape[0], function() {\n            return \"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got \" + c.shape[0] + \".\";\n        }), C(1 === c.shape[1], function() {\n            return \"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got \" + c.shape[1] + \".\";\n        });\n        var f = u.shape[2], d = u.shape[3];\n        C(c.shape[2] === f * d, function() {\n            return \"Error in separableConv2d: the third dimension of pointwise filter must be \" + f * d + \", but got \" + c.shape[2] + \".\";\n        });\n        var p = Yc(l, u, r, o, i, a), v = qc(p, c, 1, \"valid\", i);\n        return h ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;\n    }\n}), Zc = An({\n    conv2dTranspose_: function(t, e, n, r, o, a) {\n        return Vc(n, mn(t, \"x\", \"conv2dTranspose\"), mn(e, \"filter\", \"conv2dTranspose\"), r, o, \"NHWC\", a);\n    }\n}), tl = An({\n    conv3dTranspose_: function(t, e, n, r, o) {\n        return Gc(n, mn(t, \"x\", \"conv3dTranspose\"), mn(e, \"filter\", \"conv3dTranspose\"), r, o);\n    }\n});\nvar el = An({\n    matMul_: function(t, e, n, r) {\n        var o;\n        void 0 === n && (n = !1), void 0 === r && (r = !1);\n        var a = mn(t, \"a\", \"matMul\"), i = mn(e, \"b\", \"matMul\");\n        o = Nt(a, i), a = o[0], i = o[1];\n        var s = n ? a.shape[a.rank - 2] : a.shape[a.rank - 1], u = r ? i.shape[i.rank - 1] : i.shape[i.rank - 2], c = n ? a.shape[a.rank - 1] : a.shape[a.rank - 2], l = r ? i.shape[i.rank - 2] : i.shape[i.rank - 1], h = a.shape.slice(0, -2), f = i.shape.slice(0, -2), d = k(h), p = k(f);\n        C(a.rank >= 2 && i.rank >= 2 && a.rank === i.rank, function() {\n            return \"Error in matMul: inputs must have the same rank of at least 2, got ranks \" + a.rank + \" and \" + i.rank + \".\";\n        }), C(S(h, f), function() {\n            return \"Error in matMul: outer dimensions (\" + h + \") and (\" + f + \") of Tensors with shapes \" + a.shape + \" and \" + i.shape + \" must match.\";\n        }), C(s === u, function() {\n            return \"Error in matMul: inner shapes (\" + s + \") and (\" + u + \") of Tensors with shapes \" + a.shape + \" and \" + i.shape + \" and transposeA=\" + n + \" and transposeB=\" + r + \" must match.\";\n        });\n        var v = a.shape.slice(0, -2).concat([\n            c,\n            l\n        ]), m = n ? a.as3D(d, s, c) : a.as3D(d, c, s), g = r ? i.as3D(p, l, u) : i.as3D(p, u, l), y = {\n            transposeA: n,\n            transposeB: r\n        };\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.batchMatMul(m, g, n, r);\n            return e([\n                m,\n                g\n            ]), o;\n        }, {\n            a: m,\n            b: g\n        }, function(t, e) {\n            var o = e, a = o[0], i = o[1];\n            return n || r ? !n && r ? {\n                a: function() {\n                    return t.matMul(i, !1, !1);\n                },\n                b: function() {\n                    return t.matMul(a, !0, !1);\n                }\n            } : n && !r ? {\n                a: function() {\n                    return i.matMul(t, !1, !0);\n                },\n                b: function() {\n                    return a.matMul(t, !1, !1);\n                }\n            } : {\n                a: function() {\n                    return i.matMul(t, !0, !0);\n                },\n                b: function() {\n                    return t.matMul(a, !0, !0);\n                }\n            } : {\n                a: function() {\n                    return t.matMul(i, !1, !0);\n                },\n                b: function() {\n                    return a.matMul(t, !0, !1);\n                }\n            };\n        }, \"BatchMatMul\", y).reshape(v);\n    }\n}), nl = An({\n    dot_: function(t, e) {\n        var n = mn(t, \"t1\", \"dot\"), r = mn(e, \"t2\", \"dot\");\n        C(!(1 !== n.rank && 2 !== n.rank || 1 !== r.rank && 2 !== r.rank), function() {\n            return \"Error in dot: inputs must all be rank 1 or 2, but got ranks \" + n.rank + \" and \" + r.rank + \".\";\n        });\n        var o = 1 === n.rank ? n.size : n.shape[1], a = 1 === r.rank ? r.size : r.shape[0];\n        return C(o === a, function() {\n            return \"Error in dot: inner dimensions of inputs must match, but got \" + o + \" and \" + a + \".\";\n        }), 1 === n.rank && 1 === r.rank ? n.as2D(1, -1).matMul(r.as2D(-1, 1)).asScalar() : 1 === n.rank && 2 === r.rank ? n.as2D(1, -1).matMul(r.as2D(r.shape[0], r.shape[1])).as1D() : 2 === n.rank && 1 === r.rank ? n.matMul(r.as2D(-1, 1)).as1D() : n.matMul(r.as2D(r.shape[0], r.shape[1]));\n    }\n}), rl = An({\n    outerProduct_: function(t, e) {\n        var n = mn(t, \"v1\", \"outerProduct\"), r = mn(e, \"v2\", \"outerProduct\");\n        return C(1 === n.rank && 1 === r.rank, function() {\n            return \"Error in outerProduct: inputs must be rank 1, but got ranks \" + n.rank + \" and \" + r.rank + \".\";\n        }), n.as2D(-1, 1).matMul(r.as2D(1, -1));\n    }\n});\nvar ol = An({\n    reverse_: function(t, e) {\n        var n = mn(t, \"x\", \"reverse\");\n        if (0 === n.rank) return n.clone();\n        var r = O(e, n.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.reverse(n, r);\n        }, {\n            $x: n\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.reverse(r);\n                }\n            };\n        }).reshapeAs(n);\n    }\n}), al = An({\n    reverse1d_: function(t) {\n        var e = mn(t, \"x\", \"reverse\");\n        return C(1 === e.rank, function() {\n            return \"Error in reverse1D: x must be rank 1 but got rank \" + e.rank + \".\";\n        }), ol(e, 0);\n    }\n}), il = An({\n    reverse2d_: function(t, e) {\n        var n = mn(t, \"x\", \"reverse\");\n        return C(2 === n.rank, function() {\n            return \"Error in reverse2D: x must be rank 2 but got rank \" + n.rank + \".\";\n        }), ol(n, e);\n    }\n}), sl = An({\n    reverse3d_: function(t, e) {\n        var n = mn(t, \"x\", \"reverse\");\n        return C(3 === n.rank, function() {\n            return \"Error in reverse3D: x must be rank 3 but got rank \" + n.rank + \".\";\n        }), ol(n, e);\n    }\n}), ul = An({\n    reverse4d_: function(t, e) {\n        var n = mn(t, \"x\", \"reverse\");\n        return C(4 === n.rank, function() {\n            return \"Error in reverse4D: x must be rank 4 but got rank \" + n.rank + \".\";\n        }), ol(n, e);\n    }\n});\nfunction cl(t, e, n, r, o, a) {\n    var i = mn(t, \"x\", \"maxPool\"), s = i, u = !1;\n    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), null == r && (r = [\n        1,\n        1\n    ]), C(4 === s.rank, function() {\n        return \"Error in maxPool: input must be rank 4 but got rank \" + s.rank + \".\";\n    }), C(Mo(n, r), function() {\n        return \"Error in maxPool: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + r + \"'\";\n    }), null != a && C(A(o), function() {\n        return \"Error in maxPool: pad must be an integer when using, dimRoundingMode \" + a + \" but got pad \" + o + \".\";\n    });\n    var c = Io(s.shape, e, n, r, o, a);\n    if (1 === c.filterWidth && 1 === c.filterHeight && S(c.inShape, c.outShape)) return i.clone();\n    var l = [\n        s\n    ], h = Lt.runKernelFunc(function(t, e) {\n        var n = t.maxPool(s, c);\n        return e([\n            s,\n            n\n        ]), n;\n    }, {\n        x: s\n    }, function(t, a) {\n        var i = a[0], s = a[1];\n        return {\n            x: function() {\n                return function(t, e, n, r, o, a, i, s) {\n                    var u = mn(t, \"dy\", \"maxPoolBackprop\"), c = mn(e, \"input\", \"maxPoolBackprop\"), l = mn(n, \"output\", \"maxPoolBackprop\");\n                    C(c.rank === u.rank, function() {\n                        return \"Rank of input (\" + c.rank + \") does not match rank of dy (\" + u.rank + \")\";\n                    }), null == a && (a = [\n                        1,\n                        1\n                    ]);\n                    C(Mo(o, a), function() {\n                        return \"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides \" + o + \" and dilations '\" + a + \"'\";\n                    }), C(4 === u.rank, function() {\n                        return \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" + u.rank + \".\";\n                    }), C(4 === c.rank, function() {\n                        return \"Error in maxPoolBackprop: input must be rank 4 but got rank \" + c.rank + \".\";\n                    }), null != s && C(A(i), function() {\n                        return \"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode \" + s + \" but got pad \" + i + \".\";\n                    });\n                    var h = Io(c.shape, r, o, a, i, s);\n                    return Lt.runKernelFunc(function(t) {\n                        return t.maxPoolBackprop(u, c, l, h);\n                    }, {\n                        $dy: u,\n                        $input: c\n                    });\n                }(t, i, s, e, n, r, o);\n            }\n        };\n    }, \"MaxPool\", c, l);\n    return u ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;\n}\nfunction ll(t, e, n, r, o, a) {\n    var i = mn(t, \"x\", \"avgPool\", \"float32\");\n    null == r && (r = [\n        1,\n        1\n    ]), C(Mo(n, r), function() {\n        return \"Error in avgPool: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + r + \"'\";\n    });\n    var s = i, u = !1;\n    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), C(4 === s.rank, function() {\n        return \"Error in avgPool: x must be rank 4 but got rank \" + s.rank + \".\";\n    }), null != a && C(A(o), function() {\n        return \"Error in avgPool: pad must be an integer when using, dimRoundingMode \" + a + \" but got pad \" + o + \".\";\n    });\n    var c = Io(s.shape, e, n, r, o, a);\n    if (1 === c.filterWidth && 1 === c.filterHeight && S(c.inShape, c.outShape)) return i.clone();\n    var l = Lt.runKernelFunc(function(t) {\n        return t.avgPool(s, c);\n    }, {\n        x: s\n    }, function(t) {\n        return {\n            x: function() {\n                return function(t, e, n, r, o, a) {\n                    var i = mn(t, \"dy\", \"avgPoolBackprop\"), s = mn(e, \"input\", \"avgPoolBackprop\");\n                    C(s.rank === i.rank, function() {\n                        return \"Rank of input (\" + s.rank + \") does not match rank of dy (\" + i.rank + \")\";\n                    }), null == o && (o = [\n                        1,\n                        1\n                    ]);\n                    C(Mo(r, o), function() {\n                        return \"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + o + \"'\";\n                    });\n                    var u = s, c = i, l = !1;\n                    3 === s.rank && (l = !0, u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]), c = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]));\n                    C(4 === c.rank, function() {\n                        return \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" + c.rank + \".\";\n                    }), C(4 === u.rank, function() {\n                        return \"Error in avgPoolBackprop: input must be rank 4 but got rank \" + u.rank + \".\";\n                    });\n                    var h = Io(u.shape, n, r, o, a), f = Lt.runKernelFunc(function(t) {\n                        return t.avgPoolBackprop(c, u, h);\n                    }, {\n                        dy4D: c,\n                        input4D: u\n                    });\n                    if (l) return f.as3D(f.shape[1], f.shape[2], f.shape[3]);\n                    return f;\n                }(t, s, e, n, r, o);\n            }\n        };\n    }, \"AvgPool\", c);\n    return l = l.cast(i.dtype), u ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;\n}\nvar hl = An({\n    maxPool_: function(t, e, n, r, o) {\n        return cl(t, e, n, 1, r, o);\n    }\n}), fl = An({\n    avgPool_: function(t, e, n, r, o) {\n        return ll(t, e, n, 1, r, o);\n    }\n}), dl = An({\n    pool_: function(t, e, n, r, o, a) {\n        null == o && (o = [\n            1,\n            1\n        ]), null == a && (a = 1), 0 === r && (r = \"valid\");\n        var i = mn(t, \"x\", \"maxPool\"), s = i, u = !1;\n        3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), C(Mo(a, o), function() {\n            return \"Error in pool: Either strides or dilations must be 1. Got strides \" + a + \" and dilations '\" + o + \"'\";\n        });\n        var c, l = Io(s.shape, e, a, o, r), h = [\n            l.dilationHeight,\n            l.dilationWidth\n        ];\n        c = \"same\" === r ? function(t, e) {\n            var n = t.map(function(t, n) {\n                return t + (t - 1) * (e[n] - 1);\n            }).map(function(t) {\n                return t - 1;\n            }), r = n.map(function(t) {\n                return Math.floor(t / 2);\n            }), o = n.map(function(t, e) {\n                return t - r[e];\n            });\n            return n.map(function(t, e) {\n                return [\n                    r[e],\n                    o[e]\n                ];\n            });\n        }([\n            l.filterHeight,\n            l.filterWidth\n        ], h) : [\n            [\n                0,\n                0\n            ],\n            [\n                0,\n                0\n            ]\n        ];\n        var f = 1 === h[0] && 1 === h[1], d = function(t, e, n) {\n            var r = n.map(function(t) {\n                return t[0];\n            }), o = n.map(function(t) {\n                return t[1];\n            }), a = t.concat(r, o), i = e.map(function(t, e) {\n                return (t - a[e] % t) % t;\n            }), s = o.map(function(t, e) {\n                return t + i[e];\n            }), u = e.map(function(t, e) {\n                return [\n                    r[e],\n                    s[e]\n                ];\n            }), c = e.map(function(t, e) {\n                return [\n                    0,\n                    i[e]\n                ];\n            });\n            return [\n                u,\n                c\n            ];\n        }([\n            l.inHeight,\n            l.inWidth\n        ], h, c), p = d[0], v = d[1], m = f ? r : \"valid\", g = f ? s : Mr(s, h, p), y = (\"avg\" === n ? function() {\n            return ll(g, e, a, 1, m);\n        } : function() {\n            return cl(g, e, a, 1, m);\n        })(), x = f ? y : vr(y, h, v);\n        return u ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;\n    }\n}), pl = An({\n    maxPool3d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NDHWC\");\n        var s = mn(t, \"x\", \"maxPool3d\"), u = s, c = !1;\n        4 === s.rank && (c = !0, u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3])), null == i && (i = [\n            1,\n            1,\n            1\n        ]), C(5 === u.rank, function() {\n            return \"Error in maxPool3d: x must be rank 5 but got rank \" + u.rank + \".\";\n        }), C(\"NDHWC\" === a, function() {\n            return \"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of \" + a;\n        }), C(Mo(n, i), function() {\n            return \"Error in maxPool3d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + i + \"'\";\n        }), null != o && C(A(r), function() {\n            return \"Error in maxPool3d: pad must be an integer when using, dimRoundingMode \" + o + \" but got pad \" + r + \".\";\n        });\n        var l = ko(u.shape, e, n, i, r, o, a), h = Lt.runKernelFunc(function(t, e) {\n            var n = t.maxPool3d(u, l);\n            return e([\n                u,\n                n\n            ]), n;\n        }, {\n            x: u\n        }, function(t, a) {\n            var s = a[0], u = a[1];\n            return {\n                x: function() {\n                    return function(t, e, n, r, o, a, i, s) {\n                        var u = mn(t, \"dy\", \"maxPool3dBackprop\"), c = mn(e, \"input\", \"maxPool3dBackprop\"), l = mn(n, \"output\", \"maxPool3dBackprop\"), h = u, f = c, d = l, p = !1;\n                        4 === c.rank && (p = !0, h = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]), f = c.as5D(1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]), d = l.as5D(1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]));\n                        C(5 === h.rank, function() {\n                            return \"Error in maxPool3dBackprop: dy must be rank 5 but got rank \" + h.rank + \".\";\n                        }), C(5 === f.rank, function() {\n                            return \"Error in maxPool3dBackprop: input must be rank 5 but got rank \" + f.rank + \".\";\n                        }), C(5 === d.rank, function() {\n                            return \"Error in maxPool3dBackprop: output must be rank 5 but got rank \" + d.rank + \".\";\n                        }), null == a && (a = [\n                            1,\n                            1,\n                            1\n                        ]);\n                        C(Mo(o, a), function() {\n                            return \"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides \" + o + \" and dilations '\" + a + \"'\";\n                        }), null != s && C(A(i), function() {\n                            return \"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \" + s + \" but got pad \" + i + \".\";\n                        });\n                        var v = ko(f.shape, r, o, a, i, s), m = Lt.runKernelFunc(function(t) {\n                            return t.maxPool3dBackprop(h, f, d, v);\n                        }, {\n                            dy5D: h,\n                            input5D: f\n                        });\n                        if (p) return m.as4D(m.shape[1], m.shape[2], m.shape[3], m.shape[4]);\n                        return m;\n                    }(t, s, u, e, n, i, r, o);\n                }\n            };\n        });\n        return c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n}), vl = An({\n    avgPool3d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NDHWC\");\n        var s = mn(t, \"x\", \"avgPool3d\", \"float32\"), u = s, c = !1;\n        4 === s.rank && (c = !0, u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3])), null == i && (i = [\n            1,\n            1,\n            1\n        ]), C(5 === u.rank, function() {\n            return \"Error in avgPool3d: x must be rank 5 but got rank \" + u.rank + \".\";\n        }), C(\"NDHWC\" === a, function() {\n            return \"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of \" + a;\n        }), C(Mo(n, i), function() {\n            return \"Error in avgPool3d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + i + \"'\";\n        }), null != o && C(A(r), function() {\n            return \"Error in avgPool3d: pad must be an integer when using, dimRoundingMode \" + o + \" but got pad \" + r + \".\";\n        });\n        var l = ko(u.shape, e, n, i, r, o, a), h = Lt.runKernelFunc(function(t) {\n            return t.avgPool3d(u, l);\n        }, {\n            x: u\n        }, function(t) {\n            return {\n                x: function() {\n                    return function(t, e, n, r, o, a, i) {\n                        var s = mn(t, \"dy\", \"avgPool3dBackprop\"), u = mn(e, \"input\", \"avgPool3dBackprop\"), c = s, l = u, h = !1;\n                        4 === u.rank && (h = !0, c = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]), l = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]));\n                        C(5 === c.rank, function() {\n                            return \"Error in avgPool3dBackprop: dy must be rank 5 but got rank \" + c.rank + \".\";\n                        }), C(5 === l.rank, function() {\n                            return \"Error in avgPool3dBackprop: input must be rank 5 but got rank \" + l.rank + \".\";\n                        }), null == o && (o = [\n                            1,\n                            1,\n                            1\n                        ]);\n                        C(Mo(r, o), function() {\n                            return \"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + o + \"'\";\n                        }), null != i && C(A(a), function() {\n                            return \"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + a + \".\";\n                        });\n                        var f = ko(l.shape, n, r, o, a, i), d = Lt.runKernelFunc(function(t) {\n                            return t.avgPool3dBackprop(c, l, f);\n                        }, {\n                            dy5D: c,\n                            input5D: l\n                        });\n                        if (h) return d.as4D(d.shape[1], d.shape[2], d.shape[3], d.shape[4]);\n                        return d;\n                    }(t, u, e, n, i, r, o);\n                }\n            };\n        });\n        return h = h.cast(u.dtype), c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n});\nvar ml = An({\n    slice_: function(t, e, n) {\n        var r, o, a = mn(t, \"x\", \"slice\");\n        if (0 === a.rank) throw new Error(\"Slicing scalar is not possible\");\n        (r = \"number\" == typeof e ? [\n            e\n        ].concat(new Array(a.rank - 1).fill(0)) : e.length < a.rank ? e.concat(new Array(a.rank - e.length).fill(0)) : e.slice()).forEach(function(t) {\n            C(-1 !== t, function() {\n                return \"slice() does not support negative begin indexing.\";\n            });\n        }), o = (o = null == n ? new Array(a.rank).fill(-1) : \"number\" == typeof n ? [\n            n\n        ].concat(new Array(a.rank - 1).fill(-1)) : n.length < a.rank ? n.concat(new Array(a.rank - n.length).fill(-1)) : n).map(function(t, e) {\n            return t >= 0 ? t : (C(-1 === t, function() {\n                return \"Negative size values should be exactly -1 but got \" + t + \" for the slice() size at index \" + e + \".\";\n            }), a.shape[e] - r[e]);\n        }), eo(a, r, o);\n        var i = a.shape, s = {\n            begin: r,\n            size: o\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.slice(a, r, o);\n        }, {\n            x: a\n        }, function(t) {\n            for(var e = [], n = 0; n < t.rank; n++)e.push([\n                r[n],\n                i[n] - r[n] - o[n]\n            ]);\n            return {\n                x: function() {\n                    return t.pad(e);\n                }\n            };\n        }, \"Slice\", s);\n    }\n}), gl = An({\n    slice1d_: function(t, e, n) {\n        var r = mn(t, \"x\", \"slice1d\");\n        return C(1 === r.rank, function() {\n            return \"slice1d expects a rank-1 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), ml(r, [\n            e\n        ], [\n            n\n        ]);\n    }\n}), yl = An({\n    slice2d_: function(t, e, n) {\n        var r = mn(t, \"x\", \"slice2d\");\n        return C(2 === r.rank, function() {\n            return \"slice2d expects a rank-2 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), ml(r, e, n);\n    }\n}), xl = An({\n    slice3d_: function(t, e, n) {\n        var r = mn(t, \"x\", \"slice3d\");\n        return C(3 === r.rank, function() {\n            return \"slice3d expects a rank-3 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), ml(r, e, n);\n    }\n}), bl = An({\n    slice4d_: function(t, e, n) {\n        var r = mn(t, \"x\", \"slice4d\");\n        return C(4 === r.rank, function() {\n            return \"slice4d expects a rank-4 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), ml(r, e, n);\n    }\n});\nfunction wl(t, e, n, r, o) {\n    return e.rank < n.rank && (e = e.reshape(wn(e.shape, r))), t.rank < n.rank && (t = t.reshape(wn(t.shape, r))), {\n        x: function() {\n            var r = t.mul(n.equal(e).cast(t.dtype));\n            return null == o ? r : r.transpose(o);\n        }\n    };\n}\nvar Cl = An({\n    all_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"all\", \"bool\"), o = O(e, r.shape), a = o, i = En(a, r.rank);\n        null != i && (r = r.transpose(i), a = In(a.length, r.rank));\n        var s = Lt.runKernelFunc(function(t) {\n            return t.all(r, a);\n        }, {\n            $x: r\n        });\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), El = An({\n    any_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"any\", \"bool\"), o = O(e, r.shape), a = o, i = En(a, r.rank);\n        null != i && (r = r.transpose(i), a = In(a.length, r.rank));\n        var s = Lt.runKernelFunc(function(t) {\n            return t.any(r, a);\n        }, {\n            $x: r\n        });\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), Rl = An({\n    argMax_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = mn(t, \"x\", \"argMax\");\n        null == e && (e = 0);\n        var r = O(e, n.shape), o = En(r, n.rank);\n        null != o && (n = n.transpose(o), r = In(r.length, n.rank));\n        var a = {\n            axis: r[0]\n        }, i = [\n            n\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.argMax(n, r[0]);\n            return e([\n                n\n            ]), o;\n        }, {\n            x: n\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return Xn(n);\n                }\n            };\n        }, \"ArgMax\", a, i);\n    }\n}), Il = An({\n    argMin_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = mn(t, \"x\", \"argMin\");\n        null == e && (e = 0);\n        var r = O(e, n.shape), o = En(r, n.rank);\n        return null != o && (n = n.transpose(o), r = In(r.length, n.rank)), Lt.runKernelFunc(function(t, e) {\n            var o = t.argMin(n, r[0]);\n            return e([\n                n\n            ]), o;\n        }, {\n            $x: n\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return Xn(n);\n                }\n            };\n        });\n    }\n}), kl = An({\n    logSumExp_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"logSumExp\"), o = O(e, r.shape), a = r.max(o, !0), i = r.sub(a).exp().sum(o).log(), s = a.reshape(i.shape).add(i);\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), Sl = An({\n    max_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"max\"), o = r, a = O(e, r.shape), i = a, s = En(i, r.rank);\n        null != s && (r = r.transpose(s), i = In(i.length, r.rank));\n        var u = [\n            r\n        ], c = Lt.runKernelFunc(function(t, e) {\n            var n = t.max(r, i);\n            return e([\n                o,\n                n\n            ]), n;\n        }, {\n            x: r\n        }, function(t, e) {\n            return wl(t, e[1], e[0], a, s);\n        }, \"Max\", {\n            axes: i\n        }, u, [\n            !0\n        ]);\n        if (n) {\n            var l = wn(c.shape, a);\n            c = c.reshape(l);\n        }\n        return c;\n    }\n}), Al = An({\n    mean_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"mean\"), o = O(e, r.shape), a = k(bn(r.shape, o)[1]);\n        return vo(function(t) {\n            var r = On(a);\n            return {\n                value: (r.dtype === t.dtype ? t : t.cast(r.dtype)).div(r).sum(e, n),\n                gradFunc: function(e) {\n                    var n = t.shape.slice();\n                    return o.forEach(function(t) {\n                        n[t] = 1;\n                    }), e.reshape(n).mul(zn(t.shape, \"float32\")).div(a);\n                }\n            };\n        })(r);\n    }\n}), Dl = An({\n    min_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"min\"), o = r, a = O(e, r.shape), i = a, s = En(i, r.rank);\n        null != s && (r = r.transpose(s), i = In(i.length, r.rank));\n        var u = [\n            r\n        ], c = Lt.runKernelFunc(function(t, e) {\n            var n = t.min(r, i);\n            return e([\n                o,\n                n\n            ]), n;\n        }, {\n            x: r\n        }, function(t, e) {\n            return wl(t, e[1], e[0], a, s);\n        }, \"Min\", {\n            axes: i\n        }, u, [\n            !0\n        ]);\n        if (n) {\n            var l = wn(c.shape, a);\n            c = c.reshape(l);\n        }\n        return c;\n    }\n}), Tl = An({\n    moments_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = O(e, (t = mn(t, \"x\", \"moments\")).shape), o = t.mean(r, n), a = o.shape;\n        n || (a = wn(o.shape, r));\n        var i = t.toFloat().sub(o.reshape(a)).square();\n        return {\n            mean: o,\n            variance: i.mean(r, n)\n        };\n    }\n}), Nl = An({\n    sum_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"sum\");\n        \"bool\" === r.dtype && (r = r.toInt());\n        var o = O(e, r.shape);\n        return vo(function(t) {\n            var e = En(o, t.rank), r = o, a = t;\n            null != e && (a = t.transpose(e), r = In(r.length, t.rank));\n            var i = function(e) {\n                var n = t.shape.slice();\n                return o.forEach(function(t) {\n                    n[t] = 1;\n                }), e.reshape(n).mul(zn(t.shape, \"float32\"));\n            }, s = {\n                axes: r\n            }, u = Lt.runKernelFunc(function(t) {\n                return t.sum(a, r);\n            }, {\n                x: a\n            }, function(t) {\n                return {\n                    x: function() {\n                        return i(t);\n                    }\n                };\n            }, \"Sum\", s);\n            if (n) {\n                var c = wn(u.shape, o);\n                u = u.reshape(c);\n            }\n            return {\n                value: u,\n                gradFunc: i\n            };\n        })(r);\n    }\n}), Fl = An({\n    prod_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = mn(t, \"x\", \"prod\");\n        \"bool\" === r.dtype && (r = r.toInt());\n        var o = O(e, r.shape), a = En(o, r.rank), i = o, s = r;\n        null != a && (s = r.transpose(a), i = In(i.length, r.rank));\n        var u = Lt.runKernelFunc(function(t) {\n            return t.prod(s, i);\n        }, {\n            permutedX: s\n        });\n        if (n) {\n            var c = wn(u.shape, o);\n            u = u.reshape(c);\n        }\n        return u;\n    }\n});\nvar _l = An({\n    elu_: function(t) {\n        var e = mn(t, \"x\", \"elu\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.elu(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return Lt.runKernelFunc(function(e) {\n                        return e.eluDer(t, n);\n                    }, {\n                        dy: t,\n                        y: n\n                    });\n                }\n            };\n        });\n    }\n}), Ol = An({\n    leakyRelu_: function(t, e) {\n        void 0 === e && (e = .2);\n        var n = mn(t, \"x\", \"leakyRelu\");\n        return hc(On(e).mul(n), n);\n    }\n}), Ml = An({\n    prelu_: function(t, e) {\n        var n = mn(t, \"x\", \"prelu\"), r = mn(e, \"alpha\", \"prelu\");\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.prelu(n, r);\n            return e([\n                n,\n                r\n            ]), o;\n        }, {\n            x: n,\n            alpha: r\n        }, function(t, e) {\n            var n = e[0], r = e[1], o = n.greater(0);\n            return {\n                x: function() {\n                    return ec(o, t, t.mul(r));\n                },\n                alpha: function() {\n                    var e = ec(o, Xn(t), t.mul(n)), a = Eo(r.shape, t.shape);\n                    return a.length > 0 && (e = e.sum(a)), e.reshape(r.shape);\n                }\n            };\n        }, \"Prelu\");\n    }\n}), Bl = An({\n    relu_: function(t) {\n        var e = mn(t, \"x\", \"relu\");\n        return \"bool\" === e.dtype ? e.toInt() : Lt.runKernelFunc(function(t, n) {\n            var r = t.relu(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mulStrict(n.step().toFloat());\n                }\n            };\n        }, \"Relu\");\n    }\n}), Pl = An({\n    relu6_: function(t) {\n        var e = mn(t, \"x\", \"relu6\");\n        return \"bool\" === e.dtype ? e.toInt() : Lt.runKernelFunc(function(t, n) {\n            var r = t.relu6(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0], r = n.lessEqual(6).mul(n.step());\n            return {\n                x: function() {\n                    return t.mulStrict(r.toFloat());\n                }\n            };\n        }, \"Relu6\");\n    }\n}), Ll = An({\n    selu_: function(t) {\n        var e = mn(t, \"x\", \"selu\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.selu(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    var e = n.greater(On(0)), r = On(bs), o = On(ws), a = t.mul(o), i = t.mul(r).mul(n.toFloat().exp());\n                    return ec(e, a, i);\n                }\n            };\n        });\n    }\n});\nvar Wl = An({\n    transpose_: function(t, e) {\n        var n = mn(t, \"x\", \"transpose\");\n        if (null == e && (e = n.shape.map(function(t, e) {\n            return e;\n        }).reverse()), C(n.rank === e.length, function() {\n            return \"Error in transpose: rank of input \" + n.rank + \" must match length of perm \" + e + \".\";\n        }), e.forEach(function(t) {\n            C(t >= 0 && t < n.rank, function() {\n                return \"All entries in 'perm' must be between 0 and \" + (n.rank - 1) + \" but got \" + e;\n            });\n        }), n.rank <= 1) return n.clone();\n        var r = {\n            perm: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.transpose(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            var n = Rn(e);\n            return {\n                x: function() {\n                    return t.transpose(n);\n                }\n            };\n        }, \"Transpose\", r);\n    }\n});\nvar Ul = An({\n    localResponseNormalization_: function(t, e, n, r, o) {\n        void 0 === e && (e = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === o && (o = .5);\n        var a = mn(t, \"x\", \"localResponseNormalization\");\n        C(4 === a.rank || 3 === a.rank, function() {\n            return \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \" + a.rank + \".\";\n        }), C(A(e), function() {\n            return \"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius \" + e + \".\";\n        });\n        var i = a, s = !1;\n        3 === a.rank && (s = !0, i = a.as4D(1, a.shape[0], a.shape[1], a.shape[2]));\n        var u = Lt.runKernelFunc(function(t, a) {\n            var s = t.localResponseNormalization4D(i, e, n, r, o);\n            return a([\n                i,\n                s\n            ]), s;\n        }, {\n            x4D: i\n        }, function(t, a) {\n            var i = a[0], s = a[1];\n            return {\n                x4D: function() {\n                    return Lt.runKernelFunc(function(a) {\n                        return a.LRNGrad(t, i, s, e, n, r, o);\n                    }, {});\n                }\n            };\n        });\n        return s ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n});\nvar Vl = An({\n    norm_: function(t, e, n, r) {\n        void 0 === e && (e = \"euclidean\"), void 0 === n && (n = null), void 0 === r && (r = !1);\n        var o = function t(e, n, r) {\n            void 0 === r && (r = null);\n            if (0 === e.rank) return e.abs();\n            if (1 !== e.rank && null === r) return t(e.reshape([\n                -1\n            ]), n, r);\n            if (1 === e.rank || \"number\" == typeof r || Array.isArray(r) && 1 === r.length) {\n                if (1 === n) return e.abs().sum(r);\n                if (n === 1 / 0) return e.abs().max(r);\n                if (n === -1 / 0) return e.abs().min(r);\n                if (\"euclidean\" === n || 2 === n) return e.abs().pow(On(2, \"int32\")).sum(r).sqrt();\n                throw new Error(\"Error in norm: invalid ord value: \" + n);\n            }\n            if (Array.isArray(r) && 2 === r.length) {\n                if (1 === n) return e.abs().sum(r[0]).max(r[1] - 1);\n                if (n === 1 / 0) return e.abs().sum(r[1]).max(r[0]);\n                if (n === -1 / 0) return e.abs().sum(r[1]).min(r[0]);\n                if (\"fro\" === n || \"euclidean\" === n) return e.square().sum(r).sqrt();\n                throw new Error(\"Error in norm: invalid ord value: \" + n);\n            }\n            throw new Error(\"Error in norm: invalid axis: \" + r);\n        }(t = mn(t, \"x\", \"norm\"), e, n), a = o.shape;\n        if (r) {\n            var i = O(n, t.shape);\n            a = wn(o.shape, i);\n        }\n        return o.reshape(a);\n    }\n});\nvar zl = An({\n    basicLSTMCell_: function(t, e, n, r, o, a) {\n        var i = mn(t, \"forgetBias\", \"basicLSTMCell\"), s = mn(e, \"lstmKernel\", \"basicLSTMCell\"), u = mn(n, \"lstmBias\", \"basicLSTMCell\"), c = mn(r, \"data\", \"basicLSTMCell\"), l = mn(o, \"c\", \"basicLSTMCell\"), h = mn(a, \"h\", \"basicLSTMCell\"), f = c.concat(h, 1).matMul(s).add(u), d = f.shape[0], p = f.shape[1] / 4, v = [\n            d,\n            p\n        ], m = f.slice([\n            0,\n            0\n        ], v), g = f.slice([\n            0,\n            p\n        ], v), y = f.slice([\n            0,\n            2 * p\n        ], v), x = f.slice([\n            0,\n            3 * p\n        ], v), b = m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())), w = b.tanh().mulStrict(x.sigmoid());\n        return [\n            b,\n            w\n        ];\n    }\n}), Gl = An({\n    multiRNNCell_: function(t, e, n, r) {\n        for(var o = mn(e, \"data\", \"multiRNNCell\"), a = gn(n, \"c\", \"multiRNNCell\"), i = gn(r, \"h\", \"multiRNNCell\"), s = o, u = [], c = 0; c < t.length; c++){\n            var l = t[c](s, a[c], i[c]);\n            u.push(l[0]), u.push(l[1]), s = l[1];\n        }\n        var h = [], f = [];\n        for(c = 0; c < u.length; c += 2)h.push(u[c]), f.push(u[c + 1]);\n        return [\n            h,\n            f\n        ];\n    }\n});\nvar Hl = An({\n    movingAverage_: function(t, e, n, r, o) {\n        void 0 === o && (o = !0);\n        var a = mn(t, \"v\", \"movingAverage\"), i = mn(e, \"x\", \"movingAverage\"), s = mn(n, \"decay\", \"movingAverage\");\n        Ft(a, i), C(S(a.shape, i.shape), function() {\n            return \"Shape mismatch in v and x\";\n        });\n        var u = On(1), c = u.sub(s), l = i.sub(a).mul(c);\n        if (o) {\n            C(null != r, function() {\n                return \"When using zeroDebias: true, step is required.\";\n            });\n            var h = mn(r, \"step\", \"movingAverage\");\n            l = l.div(u.sub(xc(s, h)));\n        }\n        return a.add(l);\n    }\n});\nvar ql = An({\n    stridedSlice_: function(t, e, n, r, o, a, i, s, u) {\n        if (void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), null == r && (r = new Array(e.length)), 0 !== i) throw new Error(\"ellipsis mask is not yet supported\");\n        var c = mn(t, \"x\", \"stridedSlice\"), l = no(s), h = c.shape.slice();\n        l.forEach(function(t) {\n            e[t] = 0, n[t] = 1, h.splice(t, 0, 1);\n        }), c = c.reshape(h);\n        for(var f = 0; f < c.rank; f++)e[f] = oo(o, e, r, c.shape, f), n[f] = ao(a, n, r, c.shape, f), r[f] = r[f] || 1;\n        var d = no(u);\n        d.forEach(function(t) {\n            n[t] = e[t] + 1, r[t] = 1;\n        });\n        var p = ro(e, n, r), v = p.filter(function(t, e) {\n            return -1 === d.indexOf(e);\n        });\n        return r.every(function(t) {\n            return 1 === t;\n        }) ? ml(c, e, p).reshape(v) : Lt.runKernelFunc(function(t) {\n            return t.stridedSlice(c, e, n, r);\n        }, {\n            $x: c\n        }).reshape(v);\n    }\n});\nvar Kl = An({\n    topk_: function(t, e, n) {\n        void 0 === e && (e = 1), void 0 === n && (n = !0);\n        var r = mn(t, \"x\", \"topk\");\n        if (0 === r.rank) throw new Error(\"topk() expects the input to be of rank 1 or higher\");\n        var o = r.shape[r.shape.length - 1];\n        if (e > o) throw new Error(\"'k' passed to topk() must be <= the last dimension (\" + o + \") but got \" + e);\n        var a = Lt.runKernelFunc(function(t) {\n            return t.topk(r, e, n);\n        }, {\n            $x: r\n        });\n        return {\n            values: a[0],\n            indices: a[1]\n        };\n    }\n});\nvar jl = An({\n    scatterND_: function(t, e, n) {\n        var r = mn(t, \"indices\", \"scatterND\", \"int32\"), o = mn(e, \"updates\", \"scatterND\");\n        return Jr(o, r, n), Lt.runKernelFunc(function(t) {\n            return t.scatterND(r, o, n);\n        }, {\n            indices: r,\n            updates: o\n        }, null, \"ScatterNd\", {\n            shape: n\n        });\n    }\n});\nvar Xl = An({\n    fft_: function(t) {\n        C(\"complex64\" === t.dtype, function() {\n            return \"The dtype for tf.spectral.fft() must be complex64 but got \" + t.dtype + \".\";\n        });\n        var e = t.shape[t.shape.length - 1], n = t.size / e, r = t.as2D(n, e);\n        return Lt.runKernelFunc(function(t) {\n            return t.fft(r);\n        }, {\n            input: t\n        }).reshape(t.shape);\n    }\n}), Yl = An({\n    ifft_: function(t) {\n        C(\"complex64\" === t.dtype, function() {\n            return \"The dtype for tf.spectral.ifft() must be complex64 but got \" + t.dtype + \".\";\n        });\n        var e = t.shape[t.shape.length - 1], n = t.size / e, r = t.as2D(n, e);\n        return Lt.runKernelFunc(function(t) {\n            return t.ifft(r);\n        }, {\n            input: t\n        }).reshape(t.shape);\n    }\n}), $l = An({\n    rfft_: function(t, e) {\n        C(\"float32\" === t.dtype, function() {\n            return \"The dtype for rfft() must be real value but got \" + t.dtype;\n        });\n        var n, r = t.shape[t.shape.length - 1], o = t.size / r;\n        if (null != e && e < r) {\n            var a = t.shape.map(function(t) {\n                return 0;\n            }), i = t.shape.map(function(t) {\n                return t;\n            });\n            i[t.shape.length - 1] = e, n = t.slice(a, i), r = e;\n        } else if (null != e && e > r) {\n            var s = t.shape.map(function(t) {\n                return t;\n            });\n            s[t.shape.length - 1] = e - r, n = t.concat(Gn(s), t.shape.length - 1), r = e;\n        } else n = t;\n        var u = n.zerosLike(), c = Dn(n, u).as2D(o, r), l = Xl(c), h = Math.floor(r / 2) + 1, f = Tn(l), d = Nn(l), p = f.split([\n            h,\n            r - h\n        ], f.shape.length - 1), v = d.split([\n            h,\n            r - h\n        ], d.shape.length - 1), m = n.shape.slice();\n        return m[n.shape.length - 1] = h, Dn(p[0], v[0]).reshape(m);\n    }\n}), Ql = An({\n    irfft_: function(t) {\n        var e = t.shape[t.shape.length - 1], n = t.size / e;\n        if (e <= 2) {\n            var r = t.as2D(n, e), o = Yl(r);\n            return Tn(o);\n        }\n        var a = [\n            n,\n            2 * (e - 1)\n        ], i = Tn(t).as2D(n, e), s = Nn(t).as2D(n, e), u = i.slice([\n            0,\n            1\n        ], [\n            n,\n            e - 2\n        ]).reverse(1), c = s.slice([\n            0,\n            1\n        ], [\n            n,\n            e - 2\n        ]).reverse(1).mul(On(-1)), l = i.concat(u, 1), h = s.concat(c, 1);\n        return r = Dn(l, h).as2D(a[0], a[1]), o = Yl(r), Tn(o);\n    }\n}), Jl = Object.freeze({\n    fft: Xl,\n    ifft: Yl,\n    rfft: $l,\n    irfft: Ql\n});\nvar Zl = An({\n    sparseToDense_: function(t, e, n, r) {\n        void 0 === r && (r = 0);\n        var o = mn(t, \"sparseIndices\", \"sparseToDense\", \"int32\"), a = mn(e, \"sparseValues\", \"sparseToDense\"), i = mn(r, \"defaultValue\", \"sparseToDense\", a.dtype);\n        return function(t, e, n, r) {\n            if (\"int32\" !== t.dtype) throw new Error(\"tf.sparseToDense() expects the indices to be int32 type, but the dtype was \" + t.dtype + \".\");\n            if (t.rank > 2) throw new Error(\"sparseIndices should be a scalar, vector, or matrix, but got shape \" + t.shape + \".\");\n            var o = t.rank > 0 ? t.shape[0] : 1, a = t.rank > 1 ? t.shape[1] : 1;\n            if (n.length !== a) throw new Error(\"outputShape has incorrect number of elements:, \" + n.length + \", should be: \" + a + \".\");\n            var i = e.size;\n            if (0 !== e.rank && (1 !== e.rank || i !== o)) throw new Error(\"sparseValues has incorrect shape \" + e.shape + \", should be [] or [\" + o + \"]\");\n            if (e.dtype !== r.dtype) throw new Error(\"sparseValues.dtype must match defaultValues.dtype\");\n        }(o, a, n, i), Lt.runKernelFunc(function(t) {\n            return t.sparseToDense(o, a, n, i);\n        }, {\n            $sparseIndices: o,\n            $sparseValues: a,\n            $defaultValue: i\n        });\n    }\n});\nvar th = An({\n    gatherND_: function(t, e) {\n        var n = mn(e, \"indices\", \"gatherND\", \"int32\"), r = mn(t, \"x\", \"gatherND\");\n        return Lt.runKernelFunc(function(t) {\n            return t.gatherND(r, n);\n        }, {\n            x: r,\n            indices: n\n        }, null, \"GatherNd\");\n    }\n});\nvar eh = An({\n    diag_: function(t) {\n        var e = mn(t, \"x\", \"diag\").flatten(), n = t.shape.concat(t.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.diag(e);\n        }, {\n            $x: e\n        }).reshape(n);\n    }\n});\nvar nh = An({\n    dropout_: function(t, e, n, r) {\n        var o = mn(t, \"x\", \"dropout\");\n        if (C(\"float32\" === o.dtype, function() {\n            return \"x has to be a floating point tensor since it's going to be scaled, but got a \" + o.dtype + \" tensor instead.\";\n        }), C(e >= 0 && e < 1, function() {\n            return \"rate must be a float in the range [0, 1), but got \" + e + \".\";\n        }), 0 === e) return t instanceof wt ? o.clone() : o;\n        var a = function(t, e) {\n            if (null == e) return t.shape.slice();\n            if (S(t.shape, e)) return e;\n            if (t.shape.length === e.length) {\n                for(var n = [], r = 0; r < t.shape.length; r++)null == e[r] && null != t.shape[r] ? n.push(t.shape[r]) : n.push(e[r]);\n                return n;\n            }\n            return e;\n        }(o, n), i = 1 - e, s = _r(a, 0, 1, \"float32\", r).add(i).floor().div(i);\n        return o.mul(s);\n    }\n});\nfunction rh(t, e, n) {\n    for(var r = 1 - t % 2, o = new Float32Array(t), a = 0; a < t; ++a){\n        var i = 2 * Math.PI * a / (t + r - 1);\n        o[a] = e - n * Math.cos(i);\n    }\n    return Mn(o, \"float32\");\n}\nvar oh = An({\n    hannWindow_: function(t) {\n        return rh(t, .5, .5);\n    }\n}), ah = An({\n    hammingWindow_: function(t) {\n        return rh(t, .54, .46);\n    }\n}), ih = An({\n    frame_: function(t, e, n, r, o) {\n        void 0 === r && (r = !1), void 0 === o && (o = 0);\n        for(var a = 0, i = []; a + e <= t.size;)i.push(ml(t, a, e)), a += n;\n        if (r) for(; a < t.size;){\n            var s = a + e - t.size, u = Yn([\n                ml(t, a, e - s),\n                Hn([\n                    s\n                ], o)\n            ]);\n            i.push(u), a += n;\n        }\n        return 0 === i.length ? Bn([], [\n            0,\n            e\n        ]) : Yn(i).as2D(i.length, e);\n    }\n}), sh = An({\n    stft_: function(t, e, n, r, o) {\n        var a;\n        void 0 === o && (o = oh), null == r && (a = e, r = Math.floor(Math.pow(2, Math.ceil(Math.log(a) / Math.log(2)))));\n        for(var i = ih(t, e, n), s = gc(i, o(e)), u = [], c = 0; c < i.shape[0]; c++)u.push($l(s.slice([\n            c,\n            0\n        ], [\n            1,\n            e\n        ]), r));\n        return Yn(u);\n    }\n}), uh = Object.freeze({\n    hannWindow: oh,\n    hammingWindow: ah,\n    frame: ih,\n    stft: sh\n});\nvar ch, lh = function(t, e, o) {\n    return void 0 === o && (o = 1), n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f, d, p, v, m, g;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = mn(t, \"predictions\", \"inTopK\"), a = mn(e, \"targets\", \"inTopK\"), C(n.rank > 1, function() {\n                        return \"inTopK() expects the predictions to be of rank 2 or higher, but got \" + n.rank;\n                    }), C(n.rank - 1 === a.rank, function() {\n                        return \"predictions rank should be 1 larger than targets rank, but got predictions rank \" + n.rank + \" and targets rank \" + a.rank;\n                    }), E(n.shape.slice(0, n.shape.length - 1), a.shape, \"predictions's shape should be align with the targets' shape, except the last dimension.\"), i = n.shape[n.shape.length - 1], C(o > 0 && o <= i, function() {\n                        return \"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (\" + i + \"), but got \" + o;\n                    }), [\n                        4,\n                        n.data()\n                    ];\n                case 1:\n                    return s = r.sent(), [\n                        4,\n                        a.data()\n                    ];\n                case 2:\n                    for(u = r.sent(), c = [\n                        s.length / i,\n                        i\n                    ], h = c[1], f = B(\"bool\", l = c[0]), d = 0; d < l; d++){\n                        for(p = d * h, v = s.subarray(p, p + h), m = [], g = 0; g < v.length; g++)m.push({\n                            value: v[g],\n                            index: g\n                        });\n                        for(m.sort(function(t, e) {\n                            return e.value - t.value;\n                        }), f[d] = 0, g = 0; g < o; g++)if (m[g].index === u[d]) {\n                            f[d] = 1;\n                            break;\n                        }\n                    }\n                    return t !== n && n.dispose(), e !== a && a.dispose(), [\n                        2,\n                        Fn(f, a.shape, \"bool\")\n                    ];\n            }\n        });\n    });\n};\n!function(t) {\n    t[t.NONE = 0] = \"NONE\", t[t.MEAN = 1] = \"MEAN\", t[t.SUM = 2] = \"SUM\", t[t.SUM_BY_NONZERO_WEIGHTS = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n}(ch || (ch = {}));\nvar hh = An({\n    absoluteDifference_: function(t, e, n, r) {\n        void 0 === r && (r = ch.SUM_BY_NONZERO_WEIGHTS);\n        var o = mn(t, \"labels\", \"absoluteDifference\"), a = mn(e, \"predictions\", \"absoluteDifference\"), i = null;\n        null != n && (i = mn(n, \"weights\", \"absoluteDifference\")), E(o.shape, a.shape, \"Error in absoluteDifference: \");\n        var s = o.sub(a).abs();\n        return fh(s, i, r);\n    }\n}), fh = An({\n    computeWeightedLoss_: function(t, e, n) {\n        void 0 === n && (n = ch.SUM_BY_NONZERO_WEIGHTS);\n        var r = mn(t, \"losses\", \"computeWeightedLoss\"), o = null;\n        null != e && (o = mn(e, \"weights\", \"computeWeightedLoss\"));\n        var a = null == o ? r : r.mul(o);\n        if (n === ch.NONE) return a;\n        if (n === ch.SUM) return a.sum();\n        if (n === ch.MEAN) {\n            if (null == o) return a.mean();\n            var i = r.size / o.size, s = a.sum().div(o.sum());\n            return i > 1 ? s.div(On(i)) : s;\n        }\n        if (n === ch.SUM_BY_NONZERO_WEIGHTS) {\n            if (null == o) return a.sum().div(On(r.size));\n            var u = o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();\n            return a.sum().div(u);\n        }\n        throw Error(\"Unknown reduction: \" + n);\n    }\n}), dh = An({\n    cosineDistance_: function(t, e, n, r, o) {\n        void 0 === o && (o = ch.SUM_BY_NONZERO_WEIGHTS);\n        var a = mn(t, \"labels\", \"cosineDistance\"), i = mn(e, \"predictions\", \"cosineDistance\"), s = null;\n        null != r && (s = mn(r, \"weights\", \"cosineDistance\")), E(a.shape, i.shape, \"Error in cosineDistance: \");\n        var u = On(1).sub(a.mul(i).sum(n, !0));\n        return fh(u, s, o);\n    }\n}), ph = An({\n    hingeLoss_: function(t, e, n, r) {\n        void 0 === r && (r = ch.SUM_BY_NONZERO_WEIGHTS);\n        var o = mn(t, \"labels\", \"hingeLoss\"), a = mn(e, \"predictions\", \"hingeLoss\"), i = null;\n        null != n && (i = mn(n, \"weights\", \"hingeLoss\")), E(o.shape, a.shape, \"Error in hingeLoss: \");\n        var s = On(1);\n        o = On(2).mul(o).sub(s);\n        var u = s.sub(o.mul(a)).relu();\n        return fh(u, i, r);\n    }\n}), vh = An({\n    huberLoss_: function(t, e, n, r, o) {\n        void 0 === r && (r = 1), void 0 === o && (o = ch.SUM_BY_NONZERO_WEIGHTS);\n        var a = mn(t, \"labels\", \"huberLoss\"), i = mn(e, \"predictions\", \"huberLoss\"), s = null;\n        null != n && (s = mn(n, \"weights\", \"huberLoss\")), E(a.shape, i.shape, \"Error in huberLoss: \");\n        var u = On(r), c = i.sub(a).abs(), l = dc(c, u), h = c.sub(l), f = On(.5).mul(l.square()).add(u.mul(h));\n        return fh(f, s, o);\n    }\n}), mh = An({\n    logLoss_: function(t, e, n, r, o) {\n        void 0 === r && (r = 1e-7), void 0 === o && (o = ch.SUM_BY_NONZERO_WEIGHTS);\n        var a = mn(t, \"labels\", \"logLoss\"), i = mn(e, \"predictions\", \"logLoss\"), s = null;\n        null != n && (s = mn(n, \"weights\", \"logLoss\")), E(a.shape, i.shape, \"Error in logLoss: \");\n        var u = On(1), c = On(r), l = a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));\n        return fh(l, s, o);\n    }\n}), gh = An({\n    meanSquaredError_: function(t, e, n, r) {\n        void 0 === r && (r = ch.SUM_BY_NONZERO_WEIGHTS);\n        var o = mn(t, \"labels\", \"meanSquaredError\"), a = mn(e, \"predictions\", \"meanSquaredError\"), i = null;\n        null != n && (i = mn(n, \"weights\", \"meanSquaredError\")), E(o.shape, a.shape, \"Error in meanSquaredError: \");\n        var s = o.squaredDifference(a);\n        return fh(s, i, r);\n    }\n}), yh = An({\n    sigmoidCrossEntropy_: function(t, e, n, r, o) {\n        void 0 === r && (r = 0), void 0 === o && (o = ch.SUM_BY_NONZERO_WEIGHTS);\n        var a = mn(t, \"multiClassLabels\", \"sigmoidCrossEntropy\"), i = mn(e, \"logits\", \"sigmoidCrossEntropy\"), s = null;\n        if (null != n && (s = mn(n, \"weights\", \"sigmoidCrossEntropy\")), E(a.shape, i.shape, \"Error in sigmoidCrossEntropy: \"), r > 0) {\n            var u = On(r), c = On(1), l = On(.5);\n            a = a.mul(c.sub(u)).add(l.mul(u));\n        }\n        var h = function(t, e) {\n            var n = mn(t, \"labels\", \"sigmoidCrossEntropyWithLogits\"), r = mn(e, \"logits\", \"sigmoidCrossEntropyWithLogits\");\n            E(n.shape, r.shape, \"Error in sigmoidCrossEntropyWithLogits: \");\n            var o = r.relu(), a = r.mul(n), i = r.abs().neg().exp().log1p();\n            return o.sub(a).add(i);\n        }(a, i);\n        return fh(h, s, o);\n    }\n}), xh = An({\n    softmaxCrossEntropy_: function(t, e, n, r, o) {\n        void 0 === r && (r = 0), void 0 === o && (o = ch.SUM_BY_NONZERO_WEIGHTS);\n        var a = mn(t, \"onehotLabels\", \"softmaxCrossEntropy\"), i = mn(e, \"logits\", \"softmaxCrossEntropy\"), s = null;\n        if (null != n && (s = mn(n, \"weights\", \"softmaxCrossEntropy\")), E(a.shape, i.shape, \"Error in softmaxCrossEntropy: \"), r > 0) {\n            var u = On(r), c = On(1), l = On(a.shape[1]);\n            a = a.mul(c.sub(u)).add(u.div(l));\n        }\n        var h = function(t, e, n) {\n            if (void 0 === n && (n = -1), -1 === n && (n = e.rank - 1), n !== e.rank - 1) throw Error(\"Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank \" + e.rank + \" and dim was \" + n);\n            return vo(function(t, e, r) {\n                var o = e.logSumExp([\n                    n\n                ], !0), a = e.toFloat().sub(o);\n                r([\n                    t,\n                    a\n                ]);\n                return {\n                    value: a.mul(t).neg().sum([\n                        n\n                    ]),\n                    gradFunc: function(t, e) {\n                        var r = e[0], o = e[1], a = wn(t.shape, [\n                            n\n                        ]);\n                        return [\n                            t.reshape(a).mul(r.toFloat().sub(o.exp())),\n                            t.reshape(a).mul(o.exp().sub(r.toFloat()))\n                        ];\n                    }\n                };\n            })(t, e);\n        }(a, i);\n        return fh(h, s, o);\n    }\n}), bh = Object.freeze({\n    get Reduction () {\n        return ch;\n    },\n    absoluteDifference: hh,\n    computeWeightedLoss: fh,\n    cosineDistance: dh,\n    hingeLoss: ph,\n    huberLoss: vh,\n    logLoss: mh,\n    meanSquaredError: gh,\n    sigmoidCrossEntropy: yh,\n    softmaxCrossEntropy: xh\n});\nfunction wh(t, e) {\n    return void 0 === e && (e = !1), Lt.tidy(function() {\n        if (2 !== t.shape.length) throw new Error(\"qr2d() requires a 2D Tensor, but got a \" + t.shape.length + \"D Tensor.\");\n        for(var n = t.shape[0], r = t.shape[1], o = Cr(n), a = t.clone(), i = Bn([\n            [\n                1\n            ]\n        ], [\n            1,\n            1\n        ]), s = i.clone(), u = n >= r ? r : n, c = function(t) {\n            var e, u = a, c = s, l = o;\n            e = Lt.tidy(function() {\n                var e = a.slice([\n                    t,\n                    t\n                ], [\n                    n - t,\n                    1\n                ]), u = e.norm(), c = a.slice([\n                    t,\n                    t\n                ], [\n                    1,\n                    1\n                ]), l = Bn([\n                    [\n                        -1\n                    ]\n                ]).where(c.greater(0), Bn([\n                    [\n                        1\n                    ]\n                ])), h = c.sub(l.mul(u)), f = e.div(h);\n                s = 1 === f.shape[0] ? i.clone() : i.concat(f.slice([\n                    1,\n                    0\n                ], [\n                    f.shape[0] - 1,\n                    f.shape[1]\n                ]), 0);\n                var d = l.matMul(h).div(u).neg(), p = a.slice([\n                    t,\n                    0\n                ], [\n                    n - t,\n                    r\n                ]), v = d.mul(s);\n                if (0 === t) a = p.sub(v.matMul(s.transpose().matMul(p)));\n                else {\n                    var m = p.sub(v.matMul(s.transpose().matMul(p)));\n                    a = a.slice([\n                        0,\n                        0\n                    ], [\n                        t,\n                        r\n                    ]).concat(m, 0);\n                }\n                var g = o.slice([\n                    0,\n                    t\n                ], [\n                    n,\n                    o.shape[1] - t\n                ]);\n                if (0 === t) o = g.sub(g.matMul(s).matMul(v.transpose()));\n                else {\n                    var y = g.sub(g.matMul(s).matMul(v.transpose()));\n                    o = o.slice([\n                        0,\n                        0\n                    ], [\n                        n,\n                        t\n                    ]).concat(y, 1);\n                }\n                return [\n                    s,\n                    a,\n                    o\n                ];\n            }), s = e[0], a = e[1], o = e[2], tn([\n                u,\n                c,\n                l\n            ]);\n        }, l = 0; l < u; ++l)c(l);\n        return !e && n > r && (o = o.slice([\n            0,\n            0\n        ], [\n            n,\n            r\n        ]), a = a.slice([\n            0,\n            0\n        ], [\n            r,\n            r\n        ])), [\n            o,\n            a\n        ];\n    });\n}\nvar Ch = An({\n    bandPart_: function(t, e, n) {\n        if (e % 1 != 0) throw new Error(\"bandPart(): numLower must be an integer, got \" + e + \".\");\n        if (n % 1 != 0) throw new Error(\"bandPart(): numUpper must be an integer, got \" + n + \".\");\n        var r = mn(t, \"a\", \"bandPart\");\n        if (r.rank < 2) throw new Error(\"bandPart(): Rank must be at least 2, got \" + r.rank + \".\");\n        var o = r.shape, a = r.shape.slice(-2), i = a[0], s = a[1];\n        if (!(e <= i)) throw new Error(\"bandPart(): numLower (\" + e + \") must not be greater than the number of rows (\" + i + \").\");\n        if (!(n <= s)) throw new Error(\"bandPart(): numUpper (\" + n + \") must not be greater than the number of columns (\" + s + \").\");\n        e < 0 && (e = i), n < 0 && (n = s);\n        var u = Kn(0, i, 1, \"int32\").reshape([\n            -1,\n            1\n        ]), c = Kn(0, s, 1, \"int32\"), l = Cc(u, c), h = Qu(l.lessEqual(On(+e, \"int32\")), l.greaterEqual(On(-n, \"int32\"))), f = Gn([\n            i,\n            s\n        ], r.dtype);\n        return Pr(Ur(r.reshape([\n            -1,\n            i,\n            s\n        ])).map(function(t) {\n            return ec(h, t, f);\n        })).reshape(o);\n    }\n}), Eh = An({\n    gramSchmidt_: function(t) {\n        var e;\n        if (Array.isArray(t)) {\n            e = !1, C(null != t && t.length > 0, function() {\n                return \"Gram-Schmidt process: input must not be null, undefined, or empty\";\n            });\n            for(var n = t[0].shape[0], r = function(e) {\n                C(t[e].shape[0] === n, function() {\n                    return \"Gram-Schmidt: Non-unique lengths found in the input vectors: (\" + t[e].shape[0] + \" vs. \" + n + \")\";\n                });\n            }, o = 1; o < t.length; ++o)r(o);\n        } else e = !0, t = tr(t, t.shape[0], 0).map(function(t) {\n            return Br(t, [\n                0\n            ]);\n        });\n        C(t.length <= t[0].shape[0], function() {\n            return \"Gram-Schmidt: Number of vectors (\" + t.length + \") exceeds number of dimensions (\" + t[0].shape[0] + \").\";\n        });\n        var a = [], i = t, s = function(t) {\n            a.push(Lt.tidy(function() {\n                var e = i[t];\n                if (t > 0) for(var n = 0; n < t; ++n){\n                    var r = Nl(a[n].mulStrict(e)).mul(a[n]);\n                    e = e.sub(r);\n                }\n                return e.div(Vl(e, \"euclidean\"));\n            }));\n        };\n        for(o = 0; o < t.length; ++o)s(o);\n        return e ? Pr(a, 0) : a;\n    }\n}), Rh = An({\n    qr_: function(t, e) {\n        if (void 0 === e && (e = !1), t.rank < 2) throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \" + t.rank);\n        if (2 === t.rank) return wh(t, e);\n        var n = t.shape.slice(0, t.shape.length - 2).reduce(function(t, e) {\n            return t * e;\n        }), r = Ur(t.reshape([\n            n,\n            t.shape[t.shape.length - 2],\n            t.shape[t.shape.length - 1]\n        ]), 0), o = [], a = [];\n        return r.forEach(function(t) {\n            var n = wh(t, e), r = n[0], i = n[1];\n            o.push(r), a.push(i);\n        }), [\n            Pr(o, 0).reshape(t.shape),\n            Pr(a, 0).reshape(t.shape)\n        ];\n    }\n}), Ih = Object.freeze({\n    bandPart: Ch,\n    gramSchmidt: Eh,\n    qr: Rh\n});\nfunction kh(t, e, n, r, o, a) {\n    null == r && (r = .5), null == o && (o = Number.NEGATIVE_INFINITY), null == a && (a = 0);\n    var i = t.shape[0];\n    return n = Math.min(n, i), C(0 <= r && r <= 1, function() {\n        return \"iouThreshold must be in [0, 1], but was '\" + r + \"'\";\n    }), C(2 === t.rank, function() {\n        return \"boxes must be a 2D tensor, but was of rank '\" + t.rank + \"'\";\n    }), C(4 === t.shape[1], function() {\n        return \"boxes must have 4 columns, but 2nd dimension was \" + t.shape[1];\n    }), C(1 === e.rank, function() {\n        return \"scores must be a 1D tensor\";\n    }), C(e.shape[0] === i, function() {\n        return \"scores has incompatible shape with boxes. Expected \" + i + \", but was \" + e.shape[0];\n    }), C(0 <= a && a <= 1, function() {\n        return \"softNmsSigma must be in [0, 1], but was '\" + a + \"'\";\n    }), {\n        maxOutputSize: n,\n        iouThreshold: r,\n        scoreThreshold: o,\n        softNmsSigma: a\n    };\n}\nvar Sh = An({\n    resizeBilinear_: function(t, e, n) {\n        void 0 === n && (n = !1);\n        var r = mn(t, \"images\", \"resizeBilinear\");\n        C(3 === r.rank || 4 === r.rank, function() {\n            return \"Error in resizeBilinear: x must be rank 3 or 4, but got rank \" + r.rank + \".\";\n        }), C(2 === e.length, function() {\n            return \"Error in resizeBilinear: new shape must 2D, but got shape \" + e + \".\";\n        });\n        var o = r, a = !1;\n        3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));\n        var i = e[0], s = e[1], u = Lt.runKernelFunc(function(t, e) {\n            return e([\n                o\n            ]), t.resizeBilinear(o, i, s, n);\n        }, {\n            x: o\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return Lt.runKernelFunc(function(r) {\n                        return r.resizeBilinearBackprop(t, e[0], n);\n                    }, {});\n                }\n            };\n        }, \"ResizeBilinear\", {\n            alignCorners: n,\n            newHeight: i,\n            newWidth: s\n        });\n        return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n}), Ah = An({\n    resizeNearestNeighbor_: function(t, e, n) {\n        void 0 === n && (n = !1);\n        var r = mn(t, \"images\", \"resizeNearestNeighbor\");\n        C(3 === r.rank || 4 === r.rank, function() {\n            return \"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank \" + r.rank + \".\";\n        }), C(2 === e.length, function() {\n            return \"Error in resizeNearestNeighbor: new shape must 2D, but got shape \" + e + \".\";\n        }), C(\"float32\" === r.dtype || \"int32\" === r.dtype, function() {\n            return \"`images` must have `int32` or `float32` as dtype\";\n        });\n        var o = r, a = !1;\n        3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));\n        var i = e[0], s = e[1], u = Lt.runKernelFunc(function(t, e) {\n            return e([\n                o\n            ]), t.resizeNearestNeighbor(o, i, s, n);\n        }, {\n            batchImages: o\n        }, function(t, e) {\n            return {\n                batchImages: function() {\n                    return Lt.runKernelFunc(function(r) {\n                        return r.resizeNearestNeighborBackprop(t, e[0], n);\n                    }, {});\n                }\n            };\n        });\n        return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n}), Dh = An({\n    nonMaxSuppression_: function(t, e, n, r, o) {\n        void 0 === r && (r = .5), void 0 === o && (o = Number.NEGATIVE_INFINITY);\n        var a = mn(t, \"boxes\", \"nonMaxSuppression\"), i = mn(e, \"scores\", \"nonMaxSuppression\"), s = kh(a, i, n, r, o);\n        n = s.maxOutputSize, r = s.iouThreshold, o = s.scoreThreshold;\n        var u = {\n            maxOutputSize: n,\n            iouThreshold: r,\n            scoreThreshold: o\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.nonMaxSuppression(a, i, n, r, o);\n        }, {\n            boxes: a,\n            scores: i\n        }, null, \"NonMaxSuppressionV3\", u);\n    }\n}), Th = function(t, e, o, a, i) {\n    return void 0 === a && (a = .5), void 0 === i && (i = Number.NEGATIVE_INFINITY), n(this, void 0, void 0, function() {\n        var n, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = mn(t, \"boxes\", \"nonMaxSuppressionAsync\"), s = mn(e, \"scores\", \"nonMaxSuppressionAsync\"), u = kh(n, s, o, a, i), o = u.maxOutputSize, a = u.iouThreshold, i = u.scoreThreshold, [\n                        4,\n                        Promise.all([\n                            n.data(),\n                            s.data()\n                        ])\n                    ];\n                case 1:\n                    return c = r.sent(), l = c[0], h = c[1], f = jo(l, h, o, a, i), n !== t && n.dispose(), s !== e && s.dispose(), [\n                        2,\n                        f\n                    ];\n            }\n        });\n    });\n}, Nh = An({\n    nonMaxSuppressionWithScore_: function(t, e, n, r, o, a) {\n        void 0 === r && (r = .5), void 0 === o && (o = Number.NEGATIVE_INFINITY), void 0 === a && (a = 0);\n        var i = mn(t, \"boxes\", \"nonMaxSuppression\"), s = mn(e, \"scores\", \"nonMaxSuppression\"), u = kh(i, s, n, r, o, a), c = {\n            maxOutputSize: n = u.maxOutputSize,\n            iouThreshold: r = u.iouThreshold,\n            scoreThreshold: o = u.scoreThreshold,\n            softNmsSigma: a = u.softNmsSigma\n        }, l = Lt.runKernel(\"NonMaxSuppressionV5\", {\n            boxes: i,\n            scores: s\n        }, c);\n        return {\n            selectedIndices: l[0],\n            selectedScores: l[1]\n        };\n    }\n}), Fh = function(t, e, o, a, i, s) {\n    return void 0 === a && (a = .5), void 0 === i && (i = Number.NEGATIVE_INFINITY), void 0 === s && (s = 0), n(this, void 0, void 0, function() {\n        var n, u, c, l, h, f, d;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = mn(t, \"boxes\", \"nonMaxSuppressionAsync\"), u = mn(e, \"scores\", \"nonMaxSuppressionAsync\"), c = kh(n, u, o, a, i, s), o = c.maxOutputSize, a = c.iouThreshold, i = c.scoreThreshold, s = c.softNmsSigma, [\n                        4,\n                        Promise.all([\n                            n.data(),\n                            u.data()\n                        ])\n                    ];\n                case 1:\n                    return l = r.sent(), h = l[0], f = l[1], d = Xo(h, f, o, a, i, s), n !== t && n.dispose(), u !== e && u.dispose(), [\n                        2,\n                        d\n                    ];\n            }\n        });\n    });\n}, _h = An({\n    cropAndResize_: function(t, e, n, r, o, a) {\n        var i = mn(t, \"image\", \"cropAndResize\"), s = mn(e, \"boxes\", \"cropAndResize\", \"float32\"), u = mn(n, \"boxInd\", \"cropAndResize\", \"int32\");\n        o = o || \"bilinear\", a = a || 0;\n        var c = s.shape[0];\n        return C(4 === i.rank, function() {\n            return \"Error in cropAndResize: image must be rank 4,but got rank \" + i.rank + \".\";\n        }), C(2 === s.rank && 4 === s.shape[1], function() {\n            return \"Error in cropAndResize: boxes must be have size [\" + c + \",4] but had shape \" + s.shape + \".\";\n        }), C(1 === u.rank && u.shape[0] === c, function() {\n            return \"Error in cropAndResize: boxInd must be have size [\" + c + \"] but had shape \" + s.shape + \".\";\n        }), C(2 === r.length, function() {\n            return \"Error in cropAndResize: cropSize must be of length 2, but got length \" + r.length + \".\";\n        }), C(r[0] >= 1 && r[1] >= 1, function() {\n            return \"cropSize must be atleast [1,1], but was \" + r;\n        }), C(\"bilinear\" === o || \"nearest\" === o, function() {\n            return \"method must be bilinear or nearest, but was \" + o;\n        }), Lt.runKernelFunc(function(t, e) {\n            return t.cropAndResize(i, s, u, r, o, a);\n        }, {\n            images: i,\n            boxes: s,\n            boxInd: u\n        }, null, \"CropAndResize\", {\n            method: o,\n            extrapolationValue: a,\n            cropSize: r\n        });\n    }\n}), Oh = Object.freeze({\n    resizeBilinear: Sh,\n    resizeNearestNeighbor: Ah,\n    nonMaxSuppression: Dh,\n    nonMaxSuppressionAsync: Th,\n    nonMaxSuppressionWithScore: Nh,\n    nonMaxSuppressionWithScoreAsync: Fh,\n    cropAndResize: _h\n}), Mh = function(t, e) {\n    return !(t > 0) || \"linear\" === e;\n}, Bh = function(t, e, n) {\n    if (null == n || \"linear\" === n) return t;\n    if (\"relu\" === n) return t.mul(e.step());\n    throw new Error(\"Gradient for activation \" + n + \" has not been implemented yet.\");\n}, Ph = function(t, e) {\n    var n = e, r = Eo(t.shape, e.shape);\n    return r.length > 0 && (n = n.sum(r)), n.reshape(t.shape);\n}, Lh = function(t, e, n) {\n    if (\"linear\" === e) return t;\n    if (\"relu\" === e) return Bl(t);\n    if (\"elu\" === e) return _l(t);\n    if (\"relu6\" === e) return Pl(t);\n    if (\"prelu\" === e) return Ml(t, n);\n    throw new Error(\"Unknown fused activation \" + e + \".\");\n};\nvar Wh = An({\n    fusedMatMul_: function(t) {\n        var e, n = t.a, r = t.b, o = t.transposeA, a = void 0 !== o && o, i = t.transposeB, s = void 0 !== i && i, u = t.bias, c = t.activation, l = void 0 === c ? \"linear\" : c, h = t.preluActivationWeights;\n        if (!1 === Mh(Lt.state.gradientDepth, l)) {\n            var f = el(n, r, a, s);\n            return null != u && (f = rc(f, u)), Lh(f, l, h);\n        }\n        var d = mn(n, \"a\", \"fused matMul\"), p = mn(r, \"b\", \"fused matMul\");\n        e = Nt(d, p), d = e[0], p = e[1];\n        var v = a ? d.shape[d.rank - 2] : d.shape[d.rank - 1], m = s ? p.shape[p.rank - 1] : p.shape[p.rank - 2], g = a ? d.shape[d.rank - 1] : d.shape[d.rank - 2], y = s ? p.shape[p.rank - 2] : p.shape[p.rank - 1], x = d.shape.slice(0, -2), b = p.shape.slice(0, -2), w = k(x), E = k(b);\n        C(d.rank >= 2 && p.rank >= 2 && d.rank === p.rank, function() {\n            return \"Error in fused matMul: inputs must have the same rank of at least 2, got ranks \" + d.rank + \" and \" + p.rank + \".\";\n        }), C(S(x, b), function() {\n            return \"Error in fused matMul: outer dimensions (\" + x + \") and (\" + b + \") of Tensors with shapes \" + d.shape + \" and \" + p.shape + \" must match.\";\n        }), C(v === m, function() {\n            return \"Error in fused matMul: inner shapes (\" + v + \") and (\" + m + \") of Tensors with shapes \" + d.shape + \" and \" + p.shape + \" and transposeA=\" + a + \" and transposeB=\" + s + \" must match.\";\n        });\n        var R, I, A = d.shape.slice(0, -2).concat([\n            g,\n            y\n        ]), D = a ? d.as3D(w, v, g) : d.as3D(w, g, v), T = s ? p.as3D(E, y, m) : p.as3D(E, m, y);\n        null != u && Ro(A, (R = Nt(R = mn(u, \"bias\", \"fused matMul\"), d)[0]).shape), null != h && (I = mn(h, \"prelu weights\", \"fused matMul\"));\n        var N = {\n            a: D,\n            b: T\n        };\n        null != u && (N.bias = R), null != h && (N.preluActivationWeights = I);\n        var F = [\n            D,\n            T\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedBatchMatMul({\n                a: D,\n                b: T,\n                transposeA: a,\n                transposeB: s,\n                bias: R,\n                activation: l,\n                preluActivationWeights: I\n            });\n            return e([\n                D,\n                T,\n                n\n            ]), n;\n        }, N, function(t, e) {\n            var n = e[0], r = e[1], o = e[2], i = Bh(t, o, l), c = {};\n            return null != u && (c = {\n                bias: function() {\n                    return Ph(R, i);\n                }\n            }), a || s ? !a && s ? Object.assign({\n                a: function() {\n                    return i.matMul(r, !1, !1);\n                },\n                b: function() {\n                    return i.matMul(n, !0, !1);\n                }\n            }, c) : a && !s ? Object.assign({\n                a: function() {\n                    return r.matMul(i, !1, !0);\n                },\n                b: function() {\n                    return n.matMul(i, !1, !1);\n                }\n            }, c) : Object.assign({\n                a: function() {\n                    return r.matMul(i, !0, !0);\n                },\n                b: function() {\n                    return i.matMul(n, !0, !0);\n                }\n            }, c) : Object.assign({\n                a: function() {\n                    return i.matMul(r, !1, !0);\n                },\n                b: function() {\n                    return n.matMul(i, !0, !1);\n                }\n            }, c);\n        }, \"_FusedMatMul\", {\n            transposeA: a,\n            transposeB: s,\n            activation: l\n        }, F, [\n            !0\n        ]).reshape(A);\n    }\n}), Uh = An({\n    fusedConv2d_: function(t) {\n        var e = t.x, n = t.filter, r = t.strides, o = t.pad, a = t.dataFormat, i = void 0 === a ? \"NHWC\" : a, s = t.dilations, u = void 0 === s ? [\n            1,\n            1\n        ] : s, c = t.dimRoundingMode, l = t.bias, h = t.activation, f = void 0 === h ? \"linear\" : h, d = t.preluActivationWeights;\n        if (f = f || \"linear\", !1 === Mh(Lt.state.gradientDepth, f)) {\n            var p = qc(e, n, r, o, i, u, c);\n            return null != l && (p = rc(p, l)), Lh(p, f, d);\n        }\n        var v = mn(e, \"x\", \"conv2d\"), m = mn(n, \"filter\", \"conv2d\"), g = v, y = !1;\n        3 === v.rank && (y = !0, g = v.as4D(1, v.shape[0], v.shape[1], v.shape[2])), C(4 === g.rank, function() {\n            return \"Error in fused conv2d: input must be rank 4, but got rank \" + g.rank + \".\";\n        }), C(4 === m.rank, function() {\n            return \"Error in fused conv2d: filter must be rank 4, but got rank \" + m.rank + \".\";\n        }), null != c && C(A(o), function() {\n            return \"Error in fused conv2d: pad must be an integer when using, dimRoundingMode \" + c + \" but got pad \" + o + \".\";\n        }), C(g.shape[3] === m.shape[2], function() {\n            return \"Error in conv2d: depth of input (\" + g.shape[3] + \") must match input depth for filter \" + m.shape[2] + \".\";\n        }), C(Mo(r, u), function() {\n            return \"Error in conv2D: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + u + \"'\";\n        }), C(\"NHWC\" === i, function() {\n            return \"Error in conv2d: got dataFormat of \" + i + \" but only NHWC is currently supported.\";\n        });\n        var x, b, w = So(g.shape, m.shape, r, u, o, c);\n        null != l && (x = Nt(x = mn(l, \"bias\", \"fused conv2d\"), v)[0], Ro(w.outShape, x.shape)), null != d && (b = mn(d, \"prelu weights\", \"fused conv2d\"));\n        var E = {\n            x: g,\n            filter: m\n        };\n        null != l && (E.bias = x), null != d && (E.preluActivationWeights = b);\n        var R = [\n            m,\n            g\n        ], I = Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedConv2d({\n                input: g,\n                filter: m,\n                convInfo: w,\n                bias: x,\n                activation: f,\n                preluActivationWeights: b\n            });\n            return e([\n                m,\n                g,\n                n\n            ]), n;\n        }, E, function(t, e) {\n            var n = e, a = n[0], i = n[1], s = n[2], c = Bh(t, s, f);\n            C(Oo(u), function() {\n                return \"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + u + \"'\";\n            });\n            var h = {};\n            return null != l && (h = {\n                bias: function() {\n                    return Ph(x, c);\n                }\n            }), Object.assign({\n                x: function() {\n                    return Xc(i.shape, c, a, r, o);\n                },\n                filter: function() {\n                    return jc(i, c, a.shape, r, o);\n                }\n            }, h);\n        }, \"FusedConv2D\", {\n            convInfo: w,\n            activation: f\n        }, R, [\n            !0\n        ]);\n        return y ? I.as3D(I.shape[1], I.shape[2], I.shape[3]) : I;\n    }\n}), Vh = An({\n    fusedDepthwiseConv2d_: function(t) {\n        var e = t.x, n = t.filter, r = t.strides, o = t.pad, a = t.dataFormat, i = void 0 === a ? \"NHWC\" : a, s = t.dilations, u = void 0 === s ? [\n            1,\n            1\n        ] : s, c = t.dimRoundingMode, l = t.bias, h = t.activation, f = void 0 === h ? \"linear\" : h, d = t.preluActivationWeights;\n        if (!1 === Mh(Lt.state.gradientDepth, f)) {\n            var p = Yc(e, n, r, o, i, u, c);\n            return null != l && (p = rc(p, l)), Lh(p, f, d);\n        }\n        var v = mn(e, \"x\", \"depthwiseConv2d\"), m = mn(n, \"filter\", \"depthwiseConv2d\"), g = v, y = !1;\n        3 === v.rank && (y = !0, g = v.as4D(1, v.shape[0], v.shape[1], v.shape[2])), C(4 === g.rank, function() {\n            return \"Error in fused depthwiseConv2d: input must be rank 4, but got rank \" + g.rank + \".\";\n        }), C(4 === m.rank, function() {\n            return \"Error in fused depthwiseConv2d: filter must be rank 4, but got rank \" + m.rank + \".\";\n        }), C(g.shape[3] === m.shape[2], function() {\n            return \"Error in fused depthwiseConv2d: number of input channels (\" + g.shape[3] + \") must match the inChannels dimension in filter \" + m.shape[2] + \".\";\n        }), null == u && (u = [\n            1,\n            1\n        ]), C(Mo(r, u), function() {\n            return \"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + u + \"'\";\n        }), null != c && C(A(o), function() {\n            return \"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode \" + c + \" but got pad \" + o + \".\";\n        });\n        var x, b, w = So(g.shape, m.shape, r, u, o, c, !0);\n        null != l && (x = Nt(x = mn(l, \"bias\", \"fused conv2d\"), v)[0], Ro(w.outShape, x.shape)), null != d && (b = mn(d, \"prelu weights\", \"fused depthwiseConv2d\"));\n        var E = {\n            x: g,\n            filter: m\n        };\n        null != l && (E.bias = x), null != d && (E.preluActivationWeights = b);\n        var R = [\n            m,\n            g\n        ], I = Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedDepthwiseConv2D({\n                input: g,\n                filter: m,\n                convInfo: w,\n                bias: x,\n                activation: f,\n                preluActivationWeights: b\n            });\n            return e([\n                m,\n                g,\n                n\n            ]), n;\n        }, E, function(t, e) {\n            C(Oo(u), function() {\n                return \"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\" + u + \"'\";\n            });\n            var n = e[0], r = e[1], o = e[2], a = Bh(t, o, f), i = {};\n            return null != l && (i = {\n                bias: function() {\n                    return Ph(x, a);\n                }\n            }), Object.assign({\n                x: function() {\n                    return $c(r.shape, a, n, w);\n                },\n                filter: function() {\n                    return Qc(r, a, n.shape, w);\n                }\n            }, i);\n        }, \"FusedDepthwiseConv2D\", {\n            convInfo: w,\n            activation: f\n        }, R, [\n            !0\n        ]);\n        return y ? I.as3D(I.shape[1], I.shape[2], I.shape[3]) : I;\n    }\n}), zh = Object.freeze({\n    matMul: Wh,\n    conv2d: Uh,\n    depthwiseConv2d: Vh\n}), Gh = Object.freeze({\n    image: Oh,\n    linalg: Ih,\n    losses: bh,\n    spectral: Jl,\n    fused: zh,\n    signal: uh,\n    square: tu,\n    squaredDifference: nu,\n    conv1d: Hc,\n    conv2d: qc,\n    conv3d: Kc,\n    depthwiseConv2d: Yc,\n    separableConv2d: Jc,\n    conv2dTranspose: Zc,\n    conv3dTranspose: tl,\n    op: An,\n    batchNormalization2d: Gu,\n    batchNormalization3d: Hu,\n    batchNormalization4d: qu,\n    batchNormalization: Ku,\n    batchNorm: ju,\n    batchNorm2d: Xu,\n    batchNorm3d: Yu,\n    batchNorm4d: $u,\n    booleanMaskAsync: Uc,\n    complex: Dn,\n    real: Tn,\n    imag: Nn,\n    concat: Yn,\n    concat1d: $n,\n    concat2d: Qn,\n    concat3d: Jn,\n    concat4d: Zn,\n    split: tr,\n    matMul: el,\n    dot: nl,\n    outerProduct: rl,\n    reverse: ol,\n    reverse1d: al,\n    reverse2d: il,\n    reverse3d: sl,\n    reverse4d: ul,\n    maxPool: hl,\n    avgPool: fl,\n    pool: dl,\n    maxPool3d: pl,\n    avgPool3d: vl,\n    slice: ml,\n    slice1d: gl,\n    slice2d: yl,\n    slice3d: xl,\n    slice4d: bl,\n    abs: ru,\n    acos: ou,\n    acosh: au,\n    asin: iu,\n    asinh: su,\n    atan: uu,\n    atanh: cu,\n    ceil: lu,\n    clipByValue: hu,\n    cos: fu,\n    cosh: du,\n    erf: pu,\n    exp: vu,\n    expm1: mu,\n    floor: gu,\n    log: yu,\n    log1p: xu,\n    logSigmoid: bu,\n    neg: wu,\n    reciprocal: Cu,\n    round: Eu,\n    rsqrt: Ru,\n    sigmoid: Iu,\n    sign: ku,\n    isNaN: Su,\n    isInf: Au,\n    isFinite: Du,\n    sin: Tu,\n    sinh: Nu,\n    softplus: Fu,\n    sqrt: _u,\n    step: Ou,\n    tan: Mu,\n    tanh: Bu,\n    all: Cl,\n    any: El,\n    argMax: Rl,\n    argMin: Il,\n    logSumExp: kl,\n    max: Sl,\n    mean: Al,\n    min: Dl,\n    moments: Tl,\n    sum: Nl,\n    prod: Fl,\n    equal: Rc,\n    equalStrict: Ic,\n    greater: kc,\n    greaterEqual: Sc,\n    greaterEqualStrict: Ac,\n    greaterStrict: Dc,\n    less: Tc,\n    lessEqual: Nc,\n    lessEqualStrict: Fc,\n    lessStrict: _c,\n    notEqual: Oc,\n    notEqualStrict: Mc,\n    add: rc,\n    addN: oc,\n    addStrict: ac,\n    atan2: ic,\n    div: sc,\n    divNoNan: uc,\n    divStrict: cc,\n    floorDiv: lc,\n    maximum: hc,\n    maximumStrict: fc,\n    minimum: dc,\n    minimumStrict: pc,\n    mod: vc,\n    modStrict: mc,\n    mul: gc,\n    mulStrict: yc,\n    pow: xc,\n    powStrict: bc,\n    squaredDifferenceStrict: wc,\n    sub: Cc,\n    subStrict: Ec,\n    elu: _l,\n    leakyRelu: Ol,\n    prelu: Ml,\n    relu: Bl,\n    relu6: Pl,\n    selu: Ll,\n    logicalAnd: Qu,\n    logicalNot: Ju,\n    logicalOr: Zu,\n    logicalXor: tc,\n    where: ec,\n    whereAsync: nc,\n    buffer: dr,\n    print: pr,\n    batchToSpaceND: vr,\n    broadcastTo: mr,\n    cast: gr,\n    clone: yr,\n    cumsum: xr,\n    depthToSpace: br,\n    expandDims: wr,\n    eye: Cr,\n    multinomial: Er,\n    oneHot: Rr,\n    pad: Ir,\n    pad1d: kr,\n    pad2d: Sr,\n    pad3d: Ar,\n    pad4d: Dr,\n    rand: Tr,\n    randomNormal: Nr,\n    randomGamma: Fr,\n    randomUniform: _r,\n    reshape: Or,\n    spaceToBatchND: Mr,\n    squeeze: Br,\n    stack: Pr,\n    tile: Lr,\n    truncatedNormal: Wr,\n    unstack: Ur,\n    setdiff1dAsync: Vr,\n    fill: Hn,\n    linspace: qn,\n    ones: zn,\n    range: Kn,\n    scalar: On,\n    tensor: Fn,\n    tensor1d: Mn,\n    tensor2d: Bn,\n    tensor3d: Pn,\n    tensor4d: Ln,\n    tensor5d: Wn,\n    tensor6d: Un,\n    variable: Vn,\n    zeros: Gn,\n    onesLike: jn,\n    zerosLike: Xn,\n    transpose: Wl,\n    softmax: go,\n    logSoftmax: yo,\n    localResponseNormalization: Ul,\n    norm: Vl,\n    gather: Lc,\n    unsortedSegmentSum: Wc,\n    basicLSTMCell: zl,\n    multiRNNCell: Gl,\n    movingAverage: Hl,\n    stridedSlice: ql,\n    topk: Kl,\n    scatterND: jl,\n    fft: Xl,\n    ifft: Yl,\n    rfft: $l,\n    irfft: Ql,\n    sparseToDense: Zl,\n    gatherND: th,\n    diag: eh,\n    dropout: nh,\n    hannWindow: oh,\n    hammingWindow: ah,\n    frame: ih,\n    stft: sh,\n    inTopKAsync: lh\n});\nfunction Hh(t, e) {\n    Array.isArray(t) || (t = [\n        t\n    ]), t.forEach(function(t) {\n        null != t && C(\"complex64\" !== t.dtype, function() {\n            return e + \" does not support complex64 tensors.\";\n        });\n    });\n}\nfunction qh(t, e, n, r) {\n    if (\"linear\" === n) return t.linear(e);\n    if (\"relu\" === n) return t.relu(e);\n    if (\"elu\" === n) return t.elu(e);\n    if (\"relu6\" === n) return t.relu6(e);\n    if (\"prelu\" === n) return t.prelu(e, r);\n    throw new Error(\"Activation \" + n + \" has not been implemented for the CPU backend.\");\n}\nvar Kh = function(t) {\n    function o() {\n        var e = t.call(this) || this;\n        return e.blockSize = 48, e.firstUse = !0, e.data = new xo(e, Lt), e;\n    }\n    return e(o, t), o.prototype.write = function(t, e, n) {\n        this.firstUse && (this.firstUse = !1, i().get(\"IS_NODE\") && dn(\"\\n============================\\nHi there \\uD83D\\uDC4B. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));\n        var r = {};\n        return this.data.set(r, {\n            values: t,\n            dtype: n\n        }), r;\n    }, o.prototype.move = function(t, e, n, r) {\n        this.data.set(t, {\n            values: e,\n            dtype: r\n        });\n    }, o.prototype.numDataIds = function() {\n        return this.data.numDataIds();\n    }, o.prototype.read = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                return [\n                    2,\n                    this.readSync(t)\n                ];\n            });\n        });\n    }, o.prototype.readSync = function(t) {\n        var e = this.data.get(t), n = e.dtype, r = e.complexTensors;\n        return \"complex64\" === n ? Vo(this.readSync(r.real.dataId), this.readSync(r.imag.dataId)) : this.data.get(t).values;\n    }, o.prototype.bufferSync = function(t) {\n        var e = this.readSync(t.dataId), n = e;\n        if (\"string\" === t.dtype) try {\n            n = e.map(function(t) {\n                return ot(t);\n            });\n        } catch (t) {\n            throw new Error(\"Failed to decode encoded string bytes into utf-8\");\n        }\n        return dr(t.shape, t.dtype, n);\n    }, o.prototype.makeOutput = function(t, e, n) {\n        var r = this.write(t, e, n);\n        return Lt.makeTensorFromDataId(r, e, n, this);\n    }, o.prototype.disposeData = function(t) {\n        if (this.data.has(t)) {\n            var e = this.data.get(t).complexTensors;\n            null != e && (e.real.dispose(), e.imag.dispose()), this.data.delete(t);\n        }\n    }, o.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return e = et(), t(), [\n                    2,\n                    {\n                        kernelMs: et() - e\n                    }\n                ];\n            });\n        });\n    }, o.prototype.memory = function() {\n        return {\n            unreliable: !0,\n            reasons: [\n                \"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"\n            ]\n        };\n    }, o.prototype.complex = function(t, e) {\n        var n = this.makeOutput(null, t.shape, \"complex64\");\n        return this.data.get(n.dataId).complexTensors = {\n            real: Lt.keep(t.clone()),\n            imag: Lt.keep(e.clone())\n        }, n;\n    }, o.prototype.real = function(t) {\n        return this.data.get(t.dataId).complexTensors.real.clone();\n    }, o.prototype.imag = function(t) {\n        return this.data.get(t.dataId).complexTensors.imag.clone();\n    }, o.prototype.slice = function(t, e, n) {\n        if (Hh(t, \"slice\"), io(t.shape, e, n)) {\n            var r = so(e, t.strides), o = k(n);\n            return Fn(this.readSync(t.dataId).subarray(r, r + o), n, t.dtype);\n        }\n        for(var a = dr(n, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s){\n            var u = a.indexToLoc(s).map(function(t, n) {\n                return t + e[n];\n            });\n            a.values[s] = i.get.apply(i, u);\n        }\n        return a.toTensor();\n    }, o.prototype.stridedSlice = function(t, e, n, r) {\n        Hh(t, \"stridedSlice\");\n        var o = ro(e, n, r);\n        if (o.some(function(t) {\n            return 0 === t;\n        })) return Fn([], o);\n        for(var a = dr(o, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; s++){\n            for(var u = a.indexToLoc(s), c = new Array(u.length), l = 0; l < c.length; l++)c[l] = u[l] * r[l] + e[l];\n            a.set.apply(a, [\n                i.get.apply(i, c)\n            ].concat(u));\n        }\n        return a.toTensor();\n    }, o.prototype.diag = function(t) {\n        for(var e = this.readSync(t.dataId), n = dr([\n            t.size,\n            t.size\n        ], t.dtype), r = n.values, o = 0; o < e.length; o++)r[o * t.size + o] = e[o];\n        return n.toTensor();\n    }, o.prototype.unstack = function(t, e) {\n        for(var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++)a !== e && (r[o++] = t.shape[a]);\n        var i = new Array(t.rank).fill(0), s = t.shape.slice();\n        s[e] = 1;\n        var u = new Array(n);\n        for(a = 0; a < u.length; a++)i[e] = a, u[a] = this.slice(t, i, s).reshape(r);\n        return u;\n    }, o.prototype.reverse = function(t, e) {\n        Hh(t, \"reverse\");\n        for(var n = dr(t.shape, t.dtype), r = this.bufferSync(t), o = function(o) {\n            var a = n.indexToLoc(o), i = a.slice();\n            e.forEach(function(e) {\n                return i[e] = t.shape[e] - 1 - i[e];\n            }), n.set.apply(n, [\n                r.get.apply(r, i)\n            ].concat(a));\n        }, a = 0; a < n.size; a++)o(a);\n        return n.toTensor();\n    }, o.prototype.concat = function(t, e) {\n        var n = this;\n        if (\"complex64\" === t[0].dtype) {\n            var r = t.map(function(t) {\n                return Tn(t);\n            }), o = t.map(function(t) {\n                return Nn(t);\n            });\n            return Dn(this.concat(r, e), this.concat(o, e));\n        }\n        var a = t.map(function(t) {\n            var n = k(t.shape.slice(e));\n            return t.as2D(-1, n);\n        }), i = Sn(a.map(function(t) {\n            return t.shape;\n        }), 1), s = dr(i, t[0].dtype).values;\n        if (1 === a[0].shape[0]) {\n            var u = 0;\n            a.forEach(function(t) {\n                s.set(n.readSync(t.dataId), u), u += t.size;\n            });\n        } else {\n            var c = 0;\n            a.forEach(function(t) {\n                for(var e = n.readSync(t.dataId), r = 0, o = 0; o < t.shape[0]; ++o)for(var a = o * i[1] + c, u = 0; u < t.shape[1]; ++u)s[a + u] = e[r++];\n                c += t.shape[1];\n            });\n        }\n        var l = Sn(t.map(function(t) {\n            return t.shape;\n        }), e);\n        return Fn(s, l, t[0].dtype);\n    }, o.prototype.neg = function(t) {\n        return Hh(t, \"neg\"), this.multiply(On(-1), t);\n    }, o.prototype.add = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t + n,\n                imag: e + r\n            };\n        }) : this.broadcastedBinaryOp(t, e, Dt(t.dtype, e.dtype), function(t, e) {\n            return t + e;\n        });\n    }, o.prototype.addN = function(t) {\n        var e = this;\n        Hh(t, \"addN\");\n        for(var n = t.map(function(t) {\n            return e.readSync(t.dataId);\n        }), r = dr(t[0].shape, t[0].dtype), o = r.values, a = 0; a < t.length; a++)for(var i = n[a], s = 0; s < o.length; s++)o[s] += i[s];\n        return r.toTensor();\n    }, o.prototype.softmax = function(t, e) {\n        var n = O([\n            e\n        ], t.shape), r = this.max(t, n), o = wn(r.shape, n), a = this.subtract(t, r.reshape(o)), i = this.exp(a), s = this.sum(i, n).reshape(o);\n        return this.realDivide(i, s);\n    }, o.prototype.subtract = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t - n,\n                imag: e - r\n            };\n        }) : this.broadcastedBinaryOp(t, e, Dt(t.dtype, e.dtype), function(t, e) {\n            return t - e;\n        });\n    }, o.prototype.pow = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"pow\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.pow(t, e);\n        });\n    }, o.prototype.batchMatMul = function(t, e, n, r) {\n        Hh([\n            t,\n            e\n        ], \"matMul\");\n        for(var o = n ? t.shape[1] : t.shape[2], a = n ? t.shape[2] : t.shape[1], i = r ? e.shape[1] : e.shape[2], s = t.shape[0], u = this.readSync(t.dataId), c = this.readSync(e.dataId), l = n ? [\n            t.strides[0],\n            1,\n            t.strides[1]\n        ] : [\n            t.strides[0],\n            t.strides[1],\n            1\n        ], h = l[0], f = l[1], d = l[2], p = r ? [\n            1,\n            e.strides[1],\n            e.strides[0]\n        ] : [\n            e.strides[1],\n            1,\n            e.strides[0]\n        ], v = p[0], m = p[1], g = p[2], y = a * i, x = dr([\n            s,\n            a,\n            i\n        ], t.dtype), b = x.values, w = this.blockSize, C = 0; C < s; C++)for(var E = 0; E < a; E += w)for(var R = 0; R < i; R += w)for(var I = 0; I < o; I += w)for(var k = Math.min(E + w, a), S = Math.min(R + w, i), A = Math.min(I + w, o), D = E; D < k; D++)for(var T = R; T < S; T++){\n            for(var N = 0, F = I; F < A; F++)N += u[C * h + D * f + F * d] * c[F * v + T * m + C * g];\n            b[C * y + (D * i + T)] += N;\n        }\n        return x.toTensor();\n    }, o.prototype.fusedBatchMatMul = function(t) {\n        var e = t.a, n = t.b, r = t.transposeA, o = t.transposeB, a = t.bias, i = t.activation, s = t.preluActivationWeights, u = this.batchMatMul(e, n, r, o);\n        return a && (u = this.add(u, a)), i && (u = qh(this, u, i, s)), u;\n    }, o.prototype.multiply = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t * n - e * r,\n                imag: t * r + e * n\n            };\n        }) : this.broadcastedBinaryOp(t, e, Dt(t.dtype, e.dtype), function(t, e) {\n            return t * e;\n        });\n    }, o.prototype.realDivide = function(t, e) {\n        Hh([\n            t,\n            e\n        ], \"realDivide\");\n        return this.broadcastedBinaryOp(t, e, \"float32\", function(t, e) {\n            return t / e;\n        });\n    }, o.prototype.floorDiv = function(t, e) {\n        Hh([\n            t,\n            e\n        ], \"floorDiv\");\n        return this.broadcastedBinaryOp(t, e, \"int32\", function(t, e) {\n            return Math.floor(t / e);\n        });\n    }, o.prototype.sum = function(t, e) {\n        Hh(t, \"sum\"), Cn(\"sum\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, Dt(t.dtype, \"int32\")), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = 0, f = 0; f < i; ++f)h += u[l + f];\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.prod = function(t, e) {\n        Hh(t, \"sum\");\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, Dt(t.dtype, \"int32\")), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = 1, f = 0; f < i; ++f)h *= u[l + f];\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.unsortedSegmentSum = function(t, e, n) {\n        Hh(t, \"unsortedSegmentSum\");\n        for(var r = [], o = t.rank - e.rank, a = 0; a < o; ++a)e = e.expandDims(a + 1);\n        for(a = 0; a < n; ++a){\n            var i = On(a, \"int32\"), s = Rc(i, e).asType(\"float32\").mul(t).sum(0);\n            r.push(s);\n        }\n        return Pr(r);\n    }, o.prototype.argMin = function(t, e) {\n        Hh(t, \"argMin\");\n        var n = [\n            e\n        ];\n        Cn(\"argMin\", n, t.rank);\n        for(var r = bn(t.shape, n), o = r[0], a = r[1], i = Gn(o, \"int32\"), s = k(a), u = this.readSync(i.dataId), c = this.readSync(t.dataId), l = 0; l < u.length; ++l){\n            for(var h = l * s, f = c[h], d = 0, p = 0; p < s; ++p){\n                var v = c[h + p];\n                v < f && (f = v, d = p);\n            }\n            u[l] = d;\n        }\n        return i;\n    }, o.prototype.argMax = function(t, e) {\n        Hh(t, \"argMax\");\n        var n = [\n            e\n        ];\n        Cn(\"argMax\", n, t.rank);\n        for(var r = bn(t.shape, n), o = r[0], a = r[1], i = Gn(o, \"int32\"), s = k(a), u = this.readSync(i.dataId), c = this.readSync(t.dataId), l = 0; l < u.length; ++l){\n            for(var h = l * s, f = c[h], d = 0, p = 0; p < s; ++p){\n                var v = c[h + p];\n                v > f && (f = v, d = p);\n            }\n            u[l] = d;\n        }\n        return i;\n    }, o.prototype.cumsum = function(t, e, n, r) {\n        if (Hh(t, \"cumsum\"), e !== t.rank - 1) throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\" + (t.rank - 1) + \" but got axis=\" + e);\n        for(var o = Dt(t.dtype, \"int32\"), a = Gn(t.shape, o), i = this.readSync(a.dataId), s = this.readSync(t.dataId), u = t.shape[t.rank - 1], c = r ? function(t, e) {\n            return t + u - e - 1;\n        } : function(t, e) {\n            return t + e;\n        }, l = 0; l < s.length; l += u)for(var h = 0; h < u; h++){\n            var f = c(l, h);\n            if (0 === h) i[f] = n ? 0 : s[f];\n            else {\n                var d = c(l, h - 1);\n                i[f] = n ? s[d] + i[d] : s[f] + i[d];\n            }\n        }\n        return a;\n    }, o.prototype.equal = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"equal\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t === e ? 1 : 0;\n        });\n    }, o.prototype.notEqual = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"notEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t !== e ? 1 : 0;\n        });\n    }, o.prototype.less = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"less\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t < e ? 1 : 0;\n        });\n    }, o.prototype.lessEqual = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"lessEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t <= e ? 1 : 0;\n        });\n    }, o.prototype.greater = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"greater\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t > e ? 1 : 0;\n        });\n    }, o.prototype.greaterEqual = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"greaterEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t >= e ? 1 : 0;\n        });\n    }, o.prototype.logicalNot = function(t) {\n        Hh(t, \"logicalNot\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)n[r] = e[r] ? 0 : 1;\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.logicalAnd = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"logicalAnd\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t && e;\n        });\n    }, o.prototype.logicalOr = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"logicalOr\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t || e;\n        });\n    }, o.prototype.select = function(t, e, n) {\n        Hh([\n            t,\n            e,\n            n\n        ], \"select\");\n        for(var r = this.readSync(t.dataId), o = this.readSync(e.dataId), a = this.readSync(n.dataId), i = Gn(e.shape, Dt(e.dtype, n.dtype)), s = this.readSync(i.dataId), u = 0, c = 0 === t.rank || t.rank > 1 || 1 === e.rank ? 1 : k(e.shape.slice(1)), l = 0; l < r.length; l++)for(var h = 0; h < c; h++)1 === r[l] ? s[u++] = o[l] : s[u++] = a[l];\n        return i;\n    }, o.prototype.where = function(t) {\n        Hh([\n            t\n        ], \"where\");\n        var e = this.readSync(t.dataId);\n        return na(t.shape, e);\n    }, o.prototype.topk = function(t, e, n) {\n        return Hh(t, \"topk\"), ea(this.readSync(t.dataId), t.shape, t.dtype, e);\n    }, o.prototype.min = function(t, e) {\n        Hh(t, \"min\"), Cn(\"min\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                d < h && (h = d);\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.minimum = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"minimum\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.min(t, e);\n        });\n    }, o.prototype.mod = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"mod\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            var n = t % e;\n            return t < 0 && e < 0 || t >= 0 && e >= 0 ? n : (n + e) % e;\n        });\n    }, o.prototype.max = function(t, e) {\n        Hh(t, \"max\"), Cn(\"max\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                d > h && (h = d);\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.maximum = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"maximum\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.max(t, e);\n        });\n    }, o.prototype.all = function(t, e) {\n        Hh(t, \"all\"), Cn(\"all\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                h = h && d;\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.any = function(t, e) {\n        Hh(t, \"any\"), Cn(\"any\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                h = h || d;\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.squaredDifference = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"squaredDifference\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            var n = t - e;\n            return n * n;\n        });\n    }, o.prototype.ceil = function(t) {\n        Hh(t, \"ceil\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.ceil(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.floor = function(t) {\n        Hh(t, \"floor\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.floor(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sign = function(t) {\n        Hh(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)e[r] < 0 ? n[r] = -1 : e[r] > 0 ? n[r] = 1 : n[r] = 0;\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.isNaN = function(t) {\n        Hh(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Number.isNaN(e[r]) && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.isInf = function(t) {\n        Hh(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Math.abs(e[r]) === 1 / 0 && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.isFinite = function(t) {\n        Hh(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Number.isFinite(e[r]) && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.round = function(t) {\n        Hh(t, \"round\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = Math.floor(e[r]);\n            e[r] - o < .5 ? n[r] = Math.floor(e[r]) : e[r] - o > .5 ? n[r] = Math.ceil(e[r]) : n[r] = o % 2 == 0 ? o : o + 1;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.exp = function(t) {\n        Hh(t, \"exp\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.exp(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.expm1 = function(t) {\n        Hh(t, \"expm1\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.expm1(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.log = function(t) {\n        Hh(t, \"log\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.log(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.log1p = function(t) {\n        Hh(t, \"log1p\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.log1p(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sqrt = function(t) {\n        Hh(t, \"sqrt\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.sqrt(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.rsqrt = function(t) {\n        Hh(t, \"rsqrt\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = 1 / Math.sqrt(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.reciprocal = function(t) {\n        Hh(t, \"reciprocal\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = 1 / e[r];\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.linear = function(t) {\n        return t;\n    }, o.prototype.relu = function(t) {\n        Hh(t, \"relu\");\n        for(var e = Gn(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o)n[o] = Math.max(0, r[o]);\n        return e;\n    }, o.prototype.relu6 = function(t) {\n        Hh(t, \"relu\");\n        for(var e = Gn(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o)n[o] = Math.min(Math.max(0, r[o]), 6);\n        return e;\n    }, o.prototype.prelu = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"prelu\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return t < 0 ? e * t : t;\n        });\n    }, o.prototype.elu = function(t) {\n        Hh(t, \"elu\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r){\n            var o = n[r];\n            e[r] = o >= 0 ? o : Math.exp(o) - 1;\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.eluDer = function(t, e) {\n        Hh([\n            t,\n            e\n        ], \"eluDer\");\n        for(var n = new Float32Array(e.size), r = this.readSync(e.dataId), o = this.readSync(t.dataId), a = 0; a < r.length; ++a){\n            var i = r[a];\n            n[a] = i >= 1 ? o[a] : o[a] * (i + 1);\n        }\n        return this.makeOutput(n, e.shape, \"float32\");\n    }, o.prototype.selu = function(t) {\n        Hh(t, \"selu\");\n        for(var e = bs, n = ws, r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a){\n            var i = o[a];\n            r[a] = i >= 0 ? n * i : e * (Math.exp(i) - 1);\n        }\n        return this.makeOutput(r, t.shape, \"float32\");\n    }, o.prototype.clip = function(t, e, n) {\n        Hh(t, \"clip\");\n        for(var r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a){\n            var i = o[a];\n            r[a] = i > n ? n : i < e ? e : i;\n        }\n        return this.makeOutput(r, t.shape, \"float32\");\n    }, o.prototype.abs = function(t) {\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.abs(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.complexAbs = function(t) {\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < t.size; ++r){\n            var o = n[2 * r], a = n[2 * r + 1];\n            e[r] = Math.hypot(o, a);\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.int = function(t) {\n        Hh(t, \"int\");\n        for(var e = new Int32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = n[r];\n        return this.makeOutput(e, t.shape, \"int32\");\n    }, o.prototype.sigmoid = function(t) {\n        Hh(t, \"sigmoid\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = 1 / (1 + Math.exp(-n[r]));\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.softplus = function(t) {\n        Hh(t, \"softplus\");\n        for(var e = Math.log(1.1920928955078125e-7) + 2, n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o){\n            var a = r[o] > -e, i = r[o] < e, s = Math.exp(r[o]), u = void 0;\n            u = i ? s : a ? r[o] : Math.log(1 + s), n[o] = u;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sin = function(t) {\n        Hh(t, \"sin\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.sin(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.cos = function(t) {\n        Hh(t, \"cos\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.cos(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.tan = function(t) {\n        Hh(t, \"tan\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.tan(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.asin = function(t) {\n        Hh(t, \"asin\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.asin(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.acos = function(t) {\n        Hh(t, \"acos\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.acos(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atan = function(t) {\n        Hh(t, \"atan\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.atan(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atan2 = function(t, e) {\n        return Hh([\n            t,\n            e\n        ], \"atan2\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.atan2(t, e);\n        });\n    }, o.prototype.sinh = function(t) {\n        Hh(t, \"sinh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.sinh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.cosh = function(t) {\n        Hh(t, \"cosh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.cosh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.tanh = function(t) {\n        Hh(t, \"tanh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = D(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.asinh = function(t) {\n        Hh(t, \"asinh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.asinh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.acosh = function(t) {\n        Hh(t, \"acosh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.acosh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atanh = function(t) {\n        Hh(t, \"atanh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.atanh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.erf = function(t) {\n        Hh(t, \"erf\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r){\n            var o = Math.sign(n[r]), a = Math.abs(n[r]), i = 1 / (1 + .3275911 * a);\n            e[r] = o * (1 - ((((1.061405429 * i - 1.453152027) * i + 1.421413741) * i - .284496736) * i + .254829592) * i * Math.exp(-a * a));\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.step = function(t, e) {\n        void 0 === e && (e = 0), Hh(t, \"step\");\n        for(var n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o){\n            var a = r[o];\n            isNaN(a) ? n[o] = NaN : n[o] = a > 0 ? 1 : e;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.fusedConv2d = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, i = t.preluActivationWeights, s = this.conv2d(e, n, r);\n        return o && (s = this.add(s, o)), a && (s = qh(this, s, a, i)), s;\n    }, o.prototype.conv2d = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"conv2d\");\n        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, c = \"channelsLast\" === n.dataFormat, l = dr(n.outShape, t.dtype), h = t.strides[0], f = c ? t.strides[1] : t.strides[2], d = c ? t.strides[2] : 1, p = c ? 1 : t.strides[1], v = l.strides[0], m = c ? l.strides[1] : l.strides[2], g = c ? l.strides[2] : 1, y = c ? 1 : l.strides[1], x = this.readSync(t.dataId), b = this.readSync(e.dataId), w = l.values, C = 0; C < n.batchSize; ++C)for(var E = C * h, R = C * v, I = 0; I < n.outHeight; ++I)for(var k = R + I * m, S = I * n.strideHeight - u, A = 0; A < r; A++){\n            var D = S + A * a;\n            if (!(D < 0 || D >= n.inHeight)) for(var T = A * e.strides[0], N = E + D * f, F = 0; F < n.outWidth; ++F)for(var _ = k + F * g, O = F * n.strideWidth - s, M = 0; M < o; M++){\n                var B = O + M * i;\n                if (!(B < 0 || B >= n.inWidth)) for(var P = N + B * d, L = T + M * e.strides[1], W = 0; W < n.inChannels; ++W){\n                    for(var U = x[P + W * p], V = 0; V < n.outChannels; ++V)w[_ + V * y] += U * b[L + V];\n                    L += n.outChannels;\n                }\n            }\n        }\n        return l.toTensor();\n    }, o.prototype.conv3d = function(t, e, n) {\n        for(var r = n.filterDepth, o = n.filterHeight, a = n.filterWidth, i = n.dilationDepth, s = n.dilationHeight, u = n.dilationWidth, c = n.padInfo.front, l = n.padInfo.left, h = n.padInfo.top, f = dr(n.outShape, t.dtype), d = this.readSync(t.dataId), p = this.readSync(e.dataId), v = f.values, m = 0; m < n.batchSize; ++m)for(var g = m * t.strides[0], y = m * f.strides[0], x = 0; x < n.outDepth; ++x)for(var b = y + x * f.strides[1], w = x * n.strideDepth - c, C = 0; C < r; C++){\n            var E = w + C * i;\n            if (!(E < 0 || E >= n.inDepth)) for(var R = C * e.strides[0], I = g + E * t.strides[1], k = 0; k < n.outHeight; ++k)for(var S = b + k * f.strides[2], A = k * n.strideHeight - h, D = 0; D < o; D++){\n                var T = A + D * s;\n                if (!(T < 0 || T >= n.inHeight)) for(var N = R + D * e.strides[1], F = I + T * t.strides[2], _ = 0; _ < n.outWidth; ++_)for(var O = S + _ * n.outChannels, M = _ * n.strideWidth - l, B = 0; B < a; B++){\n                    var P = M + B * u;\n                    if (!(P < 0 || P >= n.inWidth)) for(var L = N + B * e.strides[2], W = F + P * n.inChannels, U = L, V = 0; V < n.inChannels; ++V){\n                        for(var z = d[W + V], G = 0; G < n.outChannels; ++G)v[O + G] += z * p[U + G];\n                        U += n.outChannels;\n                    }\n                }\n            }\n        }\n        return f.toTensor();\n    }, o.prototype.conv2dDerInput = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"conv2dDerInput\");\n        for(var r = dr(n.inShape, \"float32\"), o = r.values, a = this.readSync(t.dataId), i = this.readSync(e.dataId), s = e.strides, u = s[0], c = s[1], l = s[2], h = n.batchSize, f = n.filterHeight, d = n.filterWidth, p = n.inChannels, v = n.inHeight, m = n.inWidth, g = n.outChannels, y = n.outHeight, x = n.outWidth, b = n.strideHeight, w = n.strideWidth, C = n.dataFormat, E = f - 1 - n.padInfo.top, R = d - 1 - n.padInfo.left, I = \"channelsLast\" === C, k = r.strides[0], S = I ? r.strides[1] : r.strides[2], A = I ? r.strides[2] : 1, D = I ? 1 : r.strides[1], T = t.strides[0], N = I ? t.strides[1] : t.strides[2], F = I ? t.strides[2] : 1, _ = I ? 1 : t.strides[1], O = 0; O < h; ++O)for(var M = 0; M < p; ++M)for(var B = 0; B < v; ++B)for(var P = B - E, L = Math.max(0, Math.ceil(P / b)), W = Math.min(y, (f + P) / b), U = 0; U < m; ++U){\n            for(var V = U - R, z = Math.max(0, Math.ceil(V / w)), G = Math.min(x, (d + V) / w), H = 0, q = L; q < W; ++q)for(var K = q * b - P, j = z; j < G; ++j)for(var X = T * O + N * q + F * j, Y = u * (f - 1 - K) + c * (d - 1 - (j * w - V)) + l * M, $ = 0; $ < g; ++$){\n                H += a[X + _ * $] * i[Y + $];\n            }\n            o[k * O + S * B + A * U + D * M] = H;\n        }\n        return r.toTensor();\n    }, o.prototype.conv3dDerInput = function(t, e, n) {\n        for(var r = dr(n.inShape, \"float32\"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], c = a[3], l = this.readSync(t.dataId), h = t.strides, f = h[0], d = h[1], p = h[2], v = h[3], m = this.readSync(e.dataId), g = e.strides, y = g[0], x = g[1], b = g[2], w = g[3], C = n.batchSize, E = n.filterDepth, R = n.filterHeight, I = n.filterWidth, k = n.inChannels, S = n.inDepth, A = n.inHeight, D = n.inWidth, T = n.outChannels, N = n.outDepth, F = n.outHeight, _ = n.outWidth, O = n.strideDepth, M = n.strideHeight, B = n.strideWidth, P = E - 1 - n.padInfo.front, L = R - 1 - n.padInfo.top, W = I - 1 - n.padInfo.left, U = 0; U < C; ++U)for(var V = 0; V < k; ++V)for(var z = 0; z < S; ++z)for(var G = z - P, H = Math.max(0, Math.ceil(G / O)), q = Math.min(N, (E + G) / O), K = 0; K < A; ++K)for(var j = K - L, X = Math.max(0, Math.ceil(j / M)), Y = Math.min(F, (R + j) / M), $ = 0; $ < D; ++$){\n            for(var Q = $ - W, J = Math.max(0, Math.ceil(Q / B)), Z = Math.min(_, (I + Q) / B), tt = 0, et = H; et < q; ++et)for(var nt = et * O - G, rt = X; rt < Y; ++rt)for(var ot = rt * M - j, at = J; at < Z; ++at)for(var it = f * U + d * et + p * rt + v * at, st = y * (E - 1 - nt) + x * (R - 1 - ot) + b * (I - 1 - (at * B - Q)) + w * V, ut = 0; ut < T; ++ut){\n                tt += l[it + ut] * m[st + ut];\n            }\n            o[i * U + s * z + u * K + c * $ + V] = tt;\n        }\n        return r.toTensor();\n    }, o.prototype.conv2dDerFilter = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"conv2dDerFilter\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = \"channelsLast\" === n.dataFormat, u = dr(n.filterShape, \"float32\"), c = n.padInfo.left, l = n.padInfo.top, h = this.bufferSync(t), f = this.bufferSync(e), d = 0; d < a; ++d)for(var p = Math.max(0, Math.ceil((l - d) / r)), v = Math.min(n.outHeight, (n.inHeight + l - d) / r), m = 0; m < i; ++m)for(var g = Math.max(0, Math.ceil((c - m) / o)), y = Math.min(n.outWidth, (n.inWidth + c - m) / o), x = 0; x < n.inChannels; ++x)for(var b = 0; b < n.outChannels; ++b){\n            for(var w = 0, C = 0; C < n.batchSize; ++C)for(var E = p; E < v; ++E)for(var R = d + E * r - l, I = g; I < y; ++I){\n                var k = m + I * o - c;\n                w += s ? h.get(C, R, k, x) * f.get(C, E, I, b) : h.get(C, x, R, k) * f.get(C, b, E, I);\n            }\n            u.set(w, d, m, x, b);\n        }\n        return u.toTensor();\n    }, o.prototype.conv3dDerFilter = function(t, e, n) {\n        for(var r = n.strideDepth, o = n.strideHeight, a = n.strideWidth, i = n.filterDepth, s = n.filterHeight, u = n.filterWidth, c = dr(n.filterShape, \"float32\"), l = c.values, h = c.strides, f = h[0], d = h[1], p = h[2], v = h[3], m = this.readSync(e.dataId), g = e.strides, y = g[0], x = g[1], b = g[2], w = g[3], C = this.readSync(t.dataId), E = t.strides, R = E[0], I = E[1], k = E[2], S = E[3], A = n.padInfo.front, D = n.padInfo.left, T = n.padInfo.top, N = 0; N < i; ++N)for(var F = Math.max(0, Math.ceil((A - N) / r)), _ = Math.min(n.outDepth, (n.inDepth + A - N) / r), O = N * f, M = 0; M < s; ++M)for(var B = Math.max(0, Math.ceil((T - M) / o)), P = Math.min(n.outHeight, (n.inHeight + T - M) / o), L = M * d + O, W = 0; W < u; ++W)for(var U = Math.max(0, Math.ceil((D - W) / a)), V = Math.min(n.outWidth, (n.inWidth + D - W) / a), z = W * p + L, G = 0; G < n.inChannels; ++G)for(var H = G * v + z, q = 0; q < n.outChannels; ++q){\n            for(var K = 0, j = 0; j < n.batchSize; ++j)for(var X = j * R, Y = j * y, $ = F; $ < _; ++$)for(var Q = (N + $ * r - A) * I + X, J = $ * x + Y, Z = B; Z < P; ++Z)for(var tt = (M + Z * o - T) * k + Q, et = Z * b + J, nt = U; nt < V; ++nt){\n                var rt = nt * w + et;\n                K += C[(W + nt * a - D) * S + tt + G] * m[rt + q];\n            }\n            l[H + q] = K;\n        }\n        return c.toTensor();\n    }, o.prototype.fusedDepthwiseConv2D = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, i = t.preluActivationWeights, s = this.depthwiseConv2D(e, n, r);\n        return o && (s = this.add(s, o)), a && (s = qh(this, s, a, i)), s;\n    }, o.prototype.depthwiseConv2D = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"depthwiseConv2D\");\n        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, c = n.outChannels / n.inChannels, l = dr(n.outShape, t.dtype), h = this.readSync(t.dataId), f = this.readSync(e.dataId), d = l.values, p = 0; p < n.batchSize; ++p)for(var v = p * t.strides[0], m = p * l.strides[0], g = 0; g < n.outHeight; ++g)for(var y = m + g * l.strides[1], x = g * n.strideHeight - s, b = 0; b < r; ++b){\n            var w = x + b * a;\n            if (!(w < 0 || w >= n.inHeight)) for(var C = b * e.strides[0], E = v + w * t.strides[1], R = 0; R < n.outWidth; ++R)for(var I = y + R * l.strides[2], k = R * n.strideWidth - u, S = 0; S < o; ++S){\n                var A = k + S * i;\n                if (!(A < 0 || A >= n.inWidth)) for(var D = C + S * e.strides[1], T = E + A * n.inChannels, N = I, F = D, _ = 0; _ < n.inChannels; ++_){\n                    for(var O = h[T + _], M = 0; M < c; ++M)d[N + M] += O * f[F + M];\n                    N += c, F += c;\n                }\n            }\n        }\n        return l.toTensor();\n    }, o.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"depthwiseConv2DDerInput\");\n        for(var r = dr(n.inShape, \"float32\"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], c = this.readSync(t.dataId), l = t.strides, h = l[0], f = l[1], d = l[2], p = this.readSync(e.dataId), v = e.strides, m = v[0], g = v[1], y = v[2], x = n.batchSize, b = n.filterHeight, w = n.filterWidth, C = n.inChannels, E = n.inHeight, R = n.inWidth, I = n.outChannels, k = n.outHeight, S = n.outWidth, A = n.strideHeight, D = n.strideWidth, T = b - 1 - n.padInfo.top, N = w - 1 - n.padInfo.left, F = I / C, _ = 0; _ < x; ++_)for(var O = 0; O < C; ++O)for(var M = 0; M < E; ++M)for(var B = M - T, P = Math.max(0, Math.ceil(B / A)), L = Math.min(k, (b + B) / A), W = 0; W < R; ++W){\n            for(var U = W - N, V = Math.max(0, Math.ceil(U / D)), z = Math.min(S, (w + U) / D), G = 0, H = P; H < L; ++H)for(var q = H * A - B, K = V; K < z; ++K)for(var j = h * _ + f * H + d * K, X = m * (b - 1 - q) + g * (w - 1 - (K * D - U)) + y * O, Y = 0; Y < F; ++Y){\n                G += c[j + (O * F + Y)] * p[X + Y];\n            }\n            o[i * _ + s * M + u * W + O] = G;\n        }\n        return r.toTensor();\n    }, o.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"depthwiseConv2DDerFilter\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = dr(n.filterShape, \"float32\"), u = n.padInfo.left, c = n.padInfo.top, l = n.outChannels / n.inChannels, h = this.bufferSync(t), f = this.bufferSync(e), d = 0; d < a; ++d)for(var p = Math.max(0, Math.ceil((c - d) / r)), v = Math.min(n.outHeight, (n.inHeight + c - d) / r), m = 0; m < i; ++m)for(var g = Math.max(0, Math.ceil((u - m) / o)), y = Math.min(n.outWidth, (n.inWidth + u - m) / o), x = 0; x < n.outChannels; ++x){\n            for(var b = Math.trunc(x / l), w = x % l, C = 0, E = 0; E < n.batchSize; ++E)for(var R = p; R < v; ++R)for(var I = d + R * r - c, k = g; k < y; ++k){\n                var S = m + k * o - u;\n                C += h.get(E, I, S, b) * f.get(E, R, k, x);\n            }\n            s.set(C, d, m, b, w);\n        }\n        return s.toTensor();\n    }, o.prototype.tile = function(t, e) {\n        return Hh(t, \"tile\"), ta(this.bufferSync(t), e);\n    }, o.prototype.pad = function(t, e, n) {\n        Hh(t, \"pad\");\n        var r = e.map(function(e, n) {\n            return e[0] + t.shape[n] + e[1];\n        }), o = e.map(function(t) {\n            return t[0];\n        }), a = this.bufferSync(t), i = dr(r, t.dtype);\n        0 !== n && i.values.fill(n);\n        for(var s = 0; s < t.size; s++){\n            var u = a.indexToLoc(s), c = u.map(function(t, e) {\n                return t + o[e];\n            });\n            i.set.apply(i, [\n                a.get.apply(a, u)\n            ].concat(c));\n        }\n        return i.toTensor();\n    }, o.prototype.transpose = function(t, e) {\n        Hh(t, \"transpose\");\n        for(var n = new Array(t.rank), r = 0; r < n.length; r++)n[r] = t.shape[e[r]];\n        var o = this.readSync(t.dataId), a = dr(n, t.dtype), i = this.bufferSync(t);\n        for(r = 0; r < t.size; ++r){\n            for(var s = i.indexToLoc(r), u = new Array(s.length), c = 0; c < u.length; c++)u[c] = s[e[c]];\n            var l = a.locToIndex(u);\n            a.values[l] = o[r];\n        }\n        return a.toTensor();\n    }, o.prototype.gather = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"gather\");\n        var r = t.shape.slice(), o = this.readSync(e.dataId);\n        r[n] = o.length;\n        for(var a = dr(r, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s){\n            var u = a.indexToLoc(s), c = u.slice();\n            c[n] = o[u[n]];\n            var l = i.locToIndex(c);\n            a.values[s] = i.values[l];\n        }\n        return a.toTensor();\n    }, o.prototype.batchToSpaceND = function(t, e, n) {\n        Hh([\n            t\n        ], \"batchToSpaceND\");\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = zr(t.shape, e, r), a = Gr(o.length, e.length), i = Hr(t.shape, e, r), s = qr(n, e.length), u = Kr(i, n, e.length);\n        return t.reshape(o).transpose(a).reshape(i).slice(s, u);\n    }, o.prototype.spaceToBatchND = function(t, e, n) {\n        Hh([\n            t\n        ], \"spaceToBatchND\");\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = [\n            [\n                0,\n                0\n            ]\n        ];\n        o.push.apply(o, n);\n        for(var a = 1 + e.length; a < t.shape.length; ++a)o.push([\n            0,\n            0\n        ]);\n        var i = t.pad(o), s = zr(i.shape, e, r, !1), u = Gr(s.length, e.length, !1), c = Hr(i.shape, e, r, !1);\n        return i.reshape(s).transpose(u).reshape(c);\n    }, o.prototype.pool = function(t, e, n) {\n        Hh(t, \"pool\");\n        for(var r = e.strideHeight, o = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, s = e.effectiveFilterHeight, u = e.effectiveFilterWidth, c = e.padInfo.top, l = e.padInfo.left, h = \"max\" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, f = this.readSync(t.dataId), d = dr(e.outShape, t.dtype), p = d.values, v = e.outShape[1] * e.outShape[2] * e.outShape[3], m = e.outShape[2] * e.outShape[3], g = e.outShape[3], y = 0; y < e.batchSize; ++y)for(var x = y * v, b = y * t.strides[0], w = 0; w < e.inChannels; ++w)for(var C = 0; C < e.outHeight; ++C)for(var E = C * r - c, R = Math.max(0, E), I = Math.min(e.inHeight, s + E), k = x + C * m, S = 0; S < e.outWidth; ++S){\n            for(var A = S * o - l, D = Math.max(0, A), T = Math.min(e.inWidth, u + A), N = h, F = 0, _ = 0, O = R; O < I; O += a){\n                for(var M = b + O * t.strides[1], B = D; B < T; B += i){\n                    var P = f[M + B * t.strides[2] + w];\n                    \"max\" === n && P > N ? N = P : \"avg\" === n && (F += P, _++);\n                }\n                if (isNaN(N)) break;\n            }\n            p[k + S * g + w] = \"avg\" === n ? F / _ : N;\n        }\n        return d.toTensor();\n    }, o.prototype.maxPool = function(t, e) {\n        return this.pool(t, e, \"max\");\n    }, o.prototype.maxPoolPositions = function(t, e) {\n        for(var n = dr(e.outShape, \"int32\"), r = e.strideHeight, o = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, s = e.effectiveFilterHeight, u = e.effectiveFilterWidth, c = e.padInfo.top, l = e.padInfo.left, h = this.bufferSync(t), f = 0; f < e.batchSize; ++f)for(var d = 0; d < e.inChannels; ++d)for(var p = 0; p < e.outHeight; ++p){\n            for(var v = p * r - c, m = v; m < 0;)m += a;\n            for(var g = Math.min(e.inHeight, s + v), y = 0; y < e.outWidth; ++y){\n                for(var x = y * o - l, b = x; b < 0;)b += i;\n                for(var w = Math.min(e.inWidth, u + x), C = Number.NEGATIVE_INFINITY, E = -1, R = m; R < g; R += a)for(var I = R - v, k = b; k < w; k += i){\n                    var S = k - x, A = h.get(f, R, k, d);\n                    A > C && (C = A, E = I * u + S);\n                }\n                n.set(E, f, p, y, d);\n            }\n        }\n        return n.toTensor();\n    }, o.prototype.maxPoolBackprop = function(t, e, n, r) {\n        Hh([\n            e,\n            n\n        ], \"maxPoolBackprop\");\n        for(var o = this.maxPoolPositions(e, r), a = r.strideHeight, i = r.strideWidth, s = r.dilationHeight, u = r.dilationWidth, c = r.effectiveFilterHeight, l = r.effectiveFilterWidth, h = l - 1 - r.padInfo.left, f = c - 1 - r.padInfo.top, d = dr(e.shape, \"float32\"), p = this.bufferSync(o), v = this.bufferSync(t), m = 0; m < r.batchSize; ++m)for(var g = 0; g < r.inChannels; ++g)for(var y = 0; y < r.inHeight; ++y)for(var x = 0; x < r.inWidth; ++x){\n            for(var b = y - f, w = x - h, C = 0, E = 0; E < c; E += s){\n                var R = (b + E) / a;\n                if (!(R < 0 || R >= r.outHeight || Math.floor(R) !== R)) for(var I = 0; I < l; I += u){\n                    var k = (w + I) / i;\n                    if (!(k < 0 || k >= r.outWidth || Math.floor(k) !== k)) {\n                        var S = c * l - 1 - p.get(m, R, k, g) === E * l + I ? 1 : 0;\n                        if (0 !== S) C += v.get(m, R, k, g) * S;\n                    }\n                }\n            }\n            d.set(C, m, y, x, g);\n        }\n        return d.toTensor();\n    }, o.prototype.avgPoolBackprop = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"avgPoolBackprop\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = n.dilationHeight, u = n.dilationWidth, c = n.effectiveFilterHeight, l = n.effectiveFilterWidth, h = l - 1 - n.padInfo.left, f = c - 1 - n.padInfo.top, d = dr(e.shape, \"float32\"), p = 1 / (a * i), v = this.bufferSync(t), m = 0; m < n.batchSize; ++m)for(var g = 0; g < n.inChannels; ++g)for(var y = 0; y < n.inHeight; ++y)for(var x = 0; x < n.inWidth; ++x){\n            for(var b = y - f, w = x - h, C = 0, E = 0; E < c; E += s){\n                var R = (b + E) / r;\n                if (!(R < 0 || R >= n.outHeight || Math.floor(R) !== R)) for(var I = 0; I < l; I += u){\n                    var k = (w + I) / o;\n                    if (!(k < 0 || k >= n.outWidth || Math.floor(k) !== k)) C += v.get(m, R, k, g);\n                }\n            }\n            d.set(C * p, m, y, x, g);\n        }\n        return d.toTensor();\n    }, o.prototype.pool3d = function(t, e, n) {\n        Hh(t, \"pool3d\");\n        for(var r = e.strideDepth, o = e.strideHeight, a = e.strideWidth, i = e.dilationDepth, s = e.dilationHeight, u = e.dilationWidth, c = e.effectiveFilterDepth, l = e.effectiveFilterHeight, h = e.effectiveFilterWidth, f = e.padInfo.front, d = e.padInfo.top, p = e.padInfo.left, v = \"max\" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = this.readSync(t.dataId), g = dr(e.outShape, t.dtype), y = g.values, x = e.outShape[1] * e.outShape[2] * e.outShape[3] * e.outShape[4], b = e.outShape[2] * e.outShape[3] * e.outShape[4], w = e.outShape[3] * e.outShape[4], C = e.outShape[4], E = 0; E < e.batchSize; ++E)for(var R = E * x, I = E * t.strides[0], k = 0; k < e.inChannels; ++k)for(var S = 0; S < e.outDepth; ++S){\n            for(var A = S * r - f, D = A; D < 0;)D += i;\n            for(var T = Math.min(e.inDepth, c + A), N = R + S * b, F = 0; F < e.outHeight; ++F){\n                for(var _ = F * o - d, O = _; O < 0;)O += s;\n                for(var M = Math.min(e.inHeight, l + _), B = N + F * w, P = 0; P < e.outWidth; ++P){\n                    for(var L = P * a - p, W = L; W < 0;)W += u;\n                    for(var U = Math.min(e.inWidth, h + L), V = B + P * C, z = v, G = 0, H = 0, q = D; q < T; q += i){\n                        for(var K = I + q * t.strides[1], j = O; j < M; j += s){\n                            for(var X = K + j * t.strides[2], Y = W; Y < U; Y += u){\n                                var $ = m[X + Y * t.strides[3] + k];\n                                if (\"max\" === n && $ > z ? z = $ : \"avg\" === n && (G += $, H++), isNaN(z)) break;\n                            }\n                            if (isNaN(z)) break;\n                        }\n                        if (isNaN(z)) break;\n                    }\n                    y[V + k] = \"avg\" === n ? G / H : z;\n                }\n            }\n        }\n        return g.toTensor();\n    }, o.prototype.avgPool3d = function(t, e) {\n        return Hh(t, \"avgPool3d\"), this.pool3d(t, e, \"avg\").toFloat();\n    }, o.prototype.avgPool3dBackprop = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"avgPool3dBackprop\");\n        for(var r = n.strideDepth, o = n.strideHeight, a = n.strideWidth, i = n.filterDepth, s = n.filterHeight, u = n.filterWidth, c = n.dilationDepth, l = n.dilationHeight, h = n.dilationWidth, f = n.effectiveFilterDepth, d = n.effectiveFilterHeight, p = n.effectiveFilterWidth, v = f - 1 - n.padInfo.front, m = p - 1 - n.padInfo.left, g = d - 1 - n.padInfo.top, y = dr(e.shape, \"float32\"), x = 1 / (i * s * u), b = this.bufferSync(t), w = 0; w < n.batchSize; ++w)for(var C = 0; C < n.inChannels; ++C)for(var E = 0; E < n.inDepth; ++E)for(var R = 0; R < n.inHeight; ++R)for(var I = 0; I < n.inWidth; ++I){\n            for(var k = E - v, S = R - g, A = I - m, D = 0, T = 0; T < f; T += c){\n                var N = (k + T) / r;\n                if (!(N < 0 || N >= n.outDepth || Math.floor(N) !== N)) for(var F = 0; F < d; F += l){\n                    var _ = (S + F) / o;\n                    if (!(_ < 0 || _ >= n.outHeight || Math.floor(_) !== _)) for(var O = 0; O < p; O += h){\n                        var M = (A + O) / a;\n                        if (!(M < 0 || M >= n.outWidth || Math.floor(M) !== M)) D += b.get(w, N, _, M, C);\n                    }\n                }\n            }\n            y.set(D * x, w, E, R, I, C);\n        }\n        return y.toTensor();\n    }, o.prototype.maxPool3d = function(t, e) {\n        return Hh(t, \"maxPool3d\"), this.pool3d(t, e, \"max\").toFloat();\n    }, o.prototype.maxPool3dPositions = function(t, e) {\n        for(var n = dr(e.outShape, \"int32\"), r = e.strideDepth, o = e.strideHeight, a = e.strideWidth, i = e.dilationDepth, s = e.dilationHeight, u = e.dilationWidth, c = e.effectiveFilterDepth, l = e.effectiveFilterHeight, h = e.effectiveFilterWidth, f = e.padInfo.front, d = e.padInfo.top, p = e.padInfo.left, v = this.bufferSync(t), m = 0; m < e.batchSize; ++m)for(var g = 0; g < e.inChannels; ++g)for(var y = 0; y < e.outDepth; ++y){\n            for(var x = y * r - f, b = x; b < 0;)b += i;\n            for(var w = Math.min(e.inDepth, c + x), C = 0; C < e.outHeight; ++C){\n                for(var E = C * o - d, R = E; R < 0;)R += s;\n                for(var I = Math.min(e.inHeight, l + E), k = 0; k < e.outWidth; ++k){\n                    for(var S = k * a - p, A = S; A < 0;)A += u;\n                    for(var D = Math.min(e.inWidth, h + S), T = Number.NEGATIVE_INFINITY, N = -1, F = b; F < w; F += i)for(var _ = F - x, O = R; O < I; O += s)for(var M = O - E, B = A; B < D; B += u){\n                        var P = B - S, L = v.get(m, F, O, B, g);\n                        L >= T && (T = L, N = _ * l * h + M * l + P);\n                    }\n                    n.set(N, m, y, C, k, g);\n                }\n            }\n        }\n        return n.toTensor();\n    }, o.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        Hh([\n            e,\n            n\n        ], \"maxPool3dBackprop\");\n        for(var o = this.maxPool3dPositions(e, r), a = r.strideDepth, i = r.strideHeight, s = r.strideWidth, u = r.dilationDepth, c = r.dilationHeight, l = r.dilationWidth, h = r.effectiveFilterDepth, f = r.effectiveFilterHeight, d = r.effectiveFilterWidth, p = h - 1 - r.padInfo.front, v = d - 1 - r.padInfo.left, m = f - 1 - r.padInfo.top, g = dr(e.shape, \"float32\"), y = this.bufferSync(o), x = this.bufferSync(t), b = 0; b < r.batchSize; ++b)for(var w = 0; w < r.inChannels; ++w)for(var C = 0; C < r.inDepth; ++C)for(var E = 0; E < r.inHeight; ++E)for(var R = 0; R < r.inWidth; ++R){\n            for(var I = C - p, k = E - m, S = R - v, A = 0, D = 0; D < h; D += u){\n                var T = (I + D) / a;\n                if (!(T < 0 || T >= r.outDepth || Math.floor(T) !== T)) for(var N = 0; N < f; N += c){\n                    var F = (k + N) / i;\n                    if (!(F < 0 || F >= r.outHeight || Math.floor(F) !== F)) for(var _ = 0; _ < d; _ += l){\n                        var O = (S + _) / s;\n                        if (!(O < 0 || O >= r.outWidth || Math.floor(O) !== O)) {\n                            var M = h * f * d - 1 - y.get(b, T, F, O, w) === D * f * d + N * d + _ ? 1 : 0;\n                            if (0 !== M) A += x.get(b, T, F, O, w) * M;\n                        }\n                    }\n                }\n            }\n            g.set(A, b, C, E, R, w);\n        }\n        return g.toTensor();\n    }, o.prototype.cast = function(t, e) {\n        return Po(t, e, this);\n    }, o.prototype.reshape = function(t, e) {\n        return Lo(t, e);\n    }, o.prototype.avgPool = function(t, e) {\n        return Hh(t, \"avgPool\"), this.pool(t, e, \"avg\").toFloat();\n    }, o.prototype.resizeBilinear = function(t, e, n, r) {\n        Hh(t, \"resizeBilinear\");\n        for(var o = t.shape, a = o[0], i = o[1], s = o[2], u = o[3], c = this.readSync(t.dataId), l = new Float32Array(k([\n            a,\n            e,\n            n,\n            u\n        ])), h = [\n            r && e > 1 ? i - 1 : i,\n            r && n > 1 ? s - 1 : s\n        ], f = [\n            r && e > 1 ? e - 1 : e,\n            r && n > 1 ? n - 1 : n\n        ], d = 0, p = h[0] / f[0], v = h[1] / f[1], m = 0; m < a; m++)for(var g = 0; g < e; g++)for(var y = p * g, x = Math.floor(y), b = y - x, w = Math.min(i - 1, Math.ceil(y)), C = m * t.strides[0] + x * t.strides[1], E = m * t.strides[0] + w * t.strides[1], R = 0; R < n; R++)for(var I = v * R, S = Math.floor(I), A = I - S, D = Math.min(s - 1, Math.ceil(I)), T = C + S * t.strides[2], N = E + S * t.strides[2], F = C + D * t.strides[2], _ = E + D * t.strides[2], O = 0; O < u; O++){\n            var M = c[T + O], B = c[N + O], P = M + (c[F + O] - M) * A, L = P + (B + (c[_ + O] - B) * A - P) * b;\n            l[d++] = L;\n        }\n        return Fn(l, [\n            a,\n            e,\n            n,\n            u\n        ]);\n    }, o.prototype.resizeBilinearBackprop = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"resizeBilinearBackprop\");\n        for(var r = e.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = t.shape, c = u[1], l = u[2], h = new Float32Array(o * a * i * s), f = [\n            n && c > 1 ? a - 1 : a,\n            n && l > 1 ? i - 1 : i\n        ], d = [\n            n && c > 1 ? c - 1 : c,\n            n && l > 1 ? l - 1 : l\n        ], p = f[0] / d[0], v = f[1] / d[1], m = this.readSync(t.dataId), g = 0, y = 0; y < o; y++)for(var x = y * e.strides[0], b = 0; b < c; b++)for(var w = b * p, C = Math.floor(w), E = Math.min(Math.ceil(w), a - 1), R = x + C * e.strides[1], I = x + E * e.strides[1], k = w - C, S = 1 - k, A = 0; A < l; A++)for(var D = A * v, T = Math.floor(D), N = Math.min(Math.ceil(D), i - 1), F = D - T, _ = 1 - F, O = R + T * e.strides[2], M = R + N * e.strides[2], B = I + T * e.strides[2], P = I + N * e.strides[2], L = S * _, W = S * F, U = k * _, V = k * F, z = 0; z < s; z++){\n            var G = m[g++];\n            h[O + z] += G * L, h[M + z] += G * W, h[B + z] += G * U, h[P + z] += G * V;\n        }\n        return Ln(h, [\n            o,\n            i,\n            a,\n            s\n        ], e.dtype);\n    }, o.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        Hh(t, \"resizeNearestNeighbor\");\n        for(var o = t.shape, a = o[0], i = o[1], s = o[2], u = o[3], c = this.readSync(t.dataId), l = new Float32Array(a * e * n * u), h = [\n            r && e > 1 ? i - 1 : i,\n            r && n > 1 ? s - 1 : s\n        ], f = [\n            r && e > 1 ? e - 1 : e,\n            r && n > 1 ? n - 1 : n\n        ], d = h[0] / f[0], p = h[1] / f[1], v = 0, m = 0; m < a; m++)for(var g = m * t.strides[0], y = 0; y < e; y++)for(var x = d * y, b = g + Math.min(i - 1, r ? Math.round(x) : Math.floor(x)) * t.strides[1], w = 0; w < n; w++)for(var C = p * w, E = b + Math.min(s - 1, r ? Math.round(C) : Math.floor(C)) * t.strides[2], R = 0; R < u; R++){\n            var I = c[E + R];\n            l[v++] = I;\n        }\n        return Fn(l, [\n            a,\n            e,\n            n,\n            u\n        ], t.dtype);\n    }, o.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        Hh([\n            t,\n            e\n        ], \"resizeNearestNeighborBackprop\");\n        for(var r = e.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = t.shape, c = u[1], l = u[2], h = new Float32Array(o * a * i * s), f = this.readSync(t.dataId), d = [\n            n && c > 1 ? a - 1 : a,\n            n && l > 1 ? i - 1 : i\n        ], p = [\n            n && c > 1 ? c - 1 : c,\n            n && l > 1 ? l - 1 : l\n        ], v = d[0] / p[0], m = d[1] / p[1], g = 1 / v, y = 1 / m, x = 2 * Math.ceil(g) + 2, b = 2 * Math.ceil(y) + 2, w = 0; w < o; w++)for(var C = w * e.strides[0], E = 0; E < a; E++)for(var R = C + E * e.strides[1], I = Math.floor(E * g), k = Math.floor(I - x / 2), S = 0; S < i; S++)for(var A = R + S * e.strides[2], D = Math.floor(S * y), T = Math.floor(D - b / 2), N = 0; N < s; N++){\n            for(var F = 0, _ = 0; _ < x; _++){\n                var O = _ + k;\n                if (!(O < 0 || O >= c)) {\n                    var M = C + O * t.strides[1], B = O * v;\n                    if (E === Math.min(a - 1, n ? Math.round(B) : Math.floor(B))) for(var P = 0; P < b; P++){\n                        var L = P + T;\n                        if (!(L < 0 || L >= l)) {\n                            var W = M + L * t.strides[2], U = L * m;\n                            S === Math.min(i - 1, n ? Math.round(U) : Math.floor(U)) && (F += f[W + N]);\n                        }\n                    }\n                }\n            }\n            h[A + N] = F;\n        }\n        return Ln(h, e.shape, e.dtype);\n    }, o.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        Hh([\n            t,\n            e,\n            n,\n            o,\n            a\n        ], \"batchNorm\");\n        for(var i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = this.readSync(n.dataId), c = o ? this.readSync(o.dataId) : new Float32Array([\n            1\n        ]), l = a ? this.readSync(a.dataId) : new Float32Array([\n            0\n        ]), h = new Float32Array(i.length), f = l.length, d = c.length, p = u.length, v = s.length, m = 0, g = 0, y = 0, x = 0, b = 0; b < i.length; ++b)h[b] = l[m++] + (i[b] - s[g++]) * c[y++] / Math.sqrt(u[x++] + r), m >= f && (m = 0), g >= v && (g = 0), y >= d && (y = 0), x >= p && (x = 0);\n        return Ln(h, t.shape);\n    }, o.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        Hh(t, \"localResponseNormalization4D\");\n        var a = t.shape[3], i = a - 1, s = this.readSync(t.dataId), u = t.size, c = new Float32Array(u);\n        function l(t) {\n            for(var n = t % a, r = t - n + Math.max(0, n - e), o = t - n + Math.min(n + e, i), u = 0; r <= o; r++){\n                var c = s[r];\n                u += c * c;\n            }\n            return u;\n        }\n        for(var h = 0; h < u; h++){\n            var f = l(h), d = s[h] * Math.pow(n + r * f, -o);\n            c[h] = d;\n        }\n        return Ln(c, t.shape);\n    }, o.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        Hh(t, \"LRNGrad\");\n        for(var s = t.shape[3], u = this.readSync(t.dataId), c = this.readSync(e.dataId), l = this.readSync(n.dataId), h = new Float32Array(t.size), f = t.size, d = 0; d < f; d++){\n            for(var p = d % s, v = d - p + Math.max(0, p - r), m = d - p + Math.min(s, p + r + 1), g = 0, y = v; y < m; y++)g += Math.pow(c[y], 2);\n            g = a * g + o;\n            for(y = v; y < m; y++){\n                var x = -2 * a * i * c[y] * l[d] / g;\n                d === y && (x += Math.pow(g, -i)), x *= u[d], h[y] += x;\n            }\n        }\n        return Ln(h, t.shape);\n    }, o.prototype.multinomial = function(t, e, n, r) {\n        Hh(t, \"multinomial\");\n        for(var o = e ? t : go(t), a = o.shape[0], i = o.shape[1], s = Gn([\n            a,\n            n\n        ], \"int32\"), u = this.readSync(s.dataId), c = this.readSync(o.dataId), l = 0; l < a; ++l){\n            var h = l * i, f = new Float32Array(i - 1);\n            f[0] = c[h];\n            for(var d = 1; d < f.length; ++d)f[d] = f[d - 1] + c[h + d];\n            for(var p = cr(r.toString()), v = l * n, m = 0; m < n; ++m){\n                var g = p();\n                u[v + m] = f.length;\n                for(var y = 0; y < f.length; y++)if (g < f[y]) {\n                    u[v + m] = y;\n                    break;\n                }\n            }\n        }\n        return s;\n    }, o.prototype.oneHot = function(t, e, n, r) {\n        Hh(t, \"oneHot\");\n        var o = new Float32Array(t.size * e);\n        o.fill(r);\n        for(var a = this.readSync(t.dataId), i = 0; i < t.size; ++i)a[i] >= 0 && a[i] < e && (o[i * e + a[i]] = n);\n        return Bn(o, [\n            t.size,\n            e\n        ], \"int32\");\n    }, o.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return Hh(t, \"nonMaxSuppression\"), jo(this.readSync(t.dataId), this.readSync(e.dataId), n, r, o);\n    }, o.prototype.fft = function(t) {\n        return this.fftBatch(t, !1);\n    }, o.prototype.ifft = function(t) {\n        return this.fftBatch(t, !0);\n    }, o.prototype.fftBatch = function(t, e) {\n        for(var n = t.shape[0], r = t.shape[1], o = dr(t.shape, \"float32\"), a = dr(t.shape, \"float32\"), i = Tn(t).as2D(n, r), s = Nn(t).as2D(n, r), u = 0; u < n; u++)for(var c = i.slice([\n            u,\n            0\n        ], [\n            1,\n            r\n        ]), l = s.slice([\n            u,\n            0\n        ], [\n            1,\n            r\n        ]), h = Dn(c, l), f = this.readSync(this.fftImpl(h, e).dataId), d = 0; d < r; d++){\n            var p = zo(f, d);\n            o.values[u * r + d] = p.real, a.values[u * r + d] = p.imag;\n        }\n        return Dn(o.toTensor(), a.toTensor()).as2D(n, r);\n    }, o.prototype.fftImpl = function(t, e) {\n        var n = t.as1D(), r = n.size;\n        if (this.isExponentOf2(r)) {\n            var o = this.fftRadix2(n, r, e).as2D(t.shape[0], t.shape[1]);\n            return e && (o = Dn(Tn(o).div(On(r)), Nn(o).div(On(r)))), o;\n        }\n        var a = this.readSync(t.dataId), i = function(t) {\n            for(var e = new Float32Array(t.length / 2), n = new Float32Array(t.length / 2), r = 0; r < t.length; r += 2)e[r / 2] = t[r], n[r / 2] = t[r + 1];\n            return {\n                real: e,\n                imag: n\n            };\n        }(this.fourierTransformByMatmul(a, r, e));\n        return Dn(i.real, i.imag).as2D(t.shape[0], t.shape[1]);\n    }, o.prototype.isExponentOf2 = function(t) {\n        return 0 == (t & t - 1);\n    }, o.prototype.fftRadix2 = function(t, e, n) {\n        if (1 === e) return t;\n        var r = this.readSync(t.dataId), o = e / 2, a = function(t) {\n            for(var e = Math.ceil(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 0; o < t.length; o += 4)n[Math.floor(o / 4)] = t[o], r[Math.floor(o / 4)] = t[o + 1];\n            return {\n                real: n,\n                imag: r\n            };\n        }(r), i = Dn(a.real, a.imag).as1D(), s = function(t) {\n            for(var e = Math.floor(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 2; o < t.length; o += 4)n[Math.floor(o / 4)] = t[o], r[Math.floor(o / 4)] = t[o + 1];\n            return {\n                real: n,\n                imag: r\n            };\n        }(r), u = Dn(s.real, s.imag).as1D();\n        i = this.fftRadix2(i, o, n), u = this.fftRadix2(u, o, n);\n        var c = function(t, e) {\n            for(var n = new Float32Array(t / 2), r = new Float32Array(t / 2), o = 0; o < Math.ceil(t / 2); o++){\n                var a = (e ? 2 : -2) * Math.PI * (o / t);\n                n[o] = Math.cos(a), r[o] = Math.sin(a);\n            }\n            return {\n                real: n,\n                imag: r\n            };\n        }(e, n), l = Dn(c.real, c.imag).mul(u), h = i.add(l), f = i.sub(l), d = Tn(h).concat(Tn(f)), p = Nn(h).concat(Nn(f));\n        return Dn(d, p).as1D();\n    }, o.prototype.fourierTransformByMatmul = function(t, e, n) {\n        for(var r = new Float32Array(2 * e), o = 0; o < e; o++){\n            for(var a = 0, i = 0, s = 0; s < e; s++){\n                var u = Ho(o * s, e, n), c = zo(t, s);\n                a += c.real * u.real - c.imag * u.imag, i += c.real * u.imag + c.imag * u.real;\n            }\n            n && (a /= e, i /= e), Go(r, a, i, o);\n        }\n        return r;\n    }, o.prototype.depthToSpace = function(t, e, n) {\n        C(\"NHWC\" === n, function() {\n            return \"Only NHWC dataFormat supported on CPU for depthToSpace. Got \" + n;\n        }), C(e > 1, function() {\n            return \"blockSize should be > 1 for depthToSpace, but was: \" + e;\n        });\n        for(var r = t.shape[0], o = t.shape[1], a = t.shape[2], i = t.shape[3], s = o * e, u = a * e, c = i / (e * e), l = this.readSync(t.dataId), h = new Float32Array(r * s * u * c), f = 0, d = 0; d < r; ++d)for(var p = 0; p < s; ++p)for(var v = Math.floor(p / e), m = p % e, g = 0; g < u; ++g)for(var y = Math.floor(g / e), x = (m * e + g % e) * c, b = 0; b < c; ++b){\n            var w = b + x + i * (y + a * (v + o * d));\n            h[f++] = l[w];\n        }\n        return Ln(h, [\n            r,\n            s,\n            u,\n            c\n        ]);\n    }, o.prototype.broadcastedBinaryOp = function(t, e, n, r) {\n        var o = Ro(t.shape, e.shape), a = dr(o, n), i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = Co(t.shape, o), c = Co(e.shape, o), l = a.values;\n        if (u.length + c.length === 0) for(var h = 0; h < l.length; ++h)l[h] = r(i[h % i.length], s[h % s.length]);\n        else {\n            var f = this.bufferSync(t), d = this.bufferSync(e), p = function(n) {\n                var o = a.indexToLoc(n), h = o.slice(-t.rank);\n                u.forEach(function(t) {\n                    return h[t] = 0;\n                });\n                var p = f.locToIndex(h), v = o.slice(-e.rank);\n                c.forEach(function(t) {\n                    return v[t] = 0;\n                });\n                var m = d.locToIndex(v);\n                l[n] = r(i[p], s[m]);\n            };\n            for(h = 0; h < l.length; ++h)p(h);\n        }\n        return a.toTensor();\n    }, o.prototype.broadcastedBinaryComplexOp = function(t, e, n) {\n        var r = Ro(t.shape, e.shape), o = dr(r, \"float32\"), a = dr(r, \"float32\"), i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = Co(t.shape, r), c = Co(e.shape, r), l = o.values, h = a.values;\n        if (u.length + c.length === 0) for(var f = 0; f < l.length; f++){\n            var d = f % i.length, p = f % s.length, v = n(i[2 * d], i[2 * d + 1], s[2 * p], s[2 * p + 1]);\n            l[f] = v.real, h[f] = v.imag;\n        }\n        else {\n            var m = this.bufferSync(this.data.get(t.dataId).complexTensors.real), g = this.bufferSync(this.data.get(e.dataId).complexTensors.real), y = function(r) {\n                var a = o.indexToLoc(r), f = a.slice(-t.rank);\n                u.forEach(function(t) {\n                    return f[t] = 0;\n                });\n                var d = m.locToIndex(f), p = a.slice(-e.rank);\n                c.forEach(function(t) {\n                    return p[t] = 0;\n                });\n                var v = g.locToIndex(p), y = n(i[2 * d], i[2 * d + 1], s[2 * v], s[2 * v + 1]);\n                l[r] = y.real, h[r] = y.imag;\n            };\n            for(f = 0; f < l.length; f++)y(f);\n        }\n        return this.complex(o.toTensor(), a.toTensor());\n    }, o.prototype.split = function(t, e, n) {\n        return Zo(t, e, n);\n    }, o.prototype.dispose = function() {}, o.prototype.floatPrecision = function() {\n        return 32;\n    }, o.prototype.epsilon = function() {\n        return 1e-7;\n    }, o.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        for(var i = t.shape, s = i[0], u = i[1], c = i[2], l = i[3], h = e.shape[0], f = r[0], d = r[1], p = dr([\n            h,\n            f,\n            d,\n            l\n        ], \"float32\"), v = this.readSync(e.dataId), m = this.readSync(n.dataId), g = this.readSync(t.dataId), y = t.strides, x = p.strides, b = 0; b < h; b++){\n            var w = 4 * b, C = v[w], E = v[w + 1], R = v[w + 2], I = v[w + 3], k = m[b];\n            if (!(k >= s)) for(var S = f > 1 ? (R - C) * (u - 1) / (f - 1) : 0, A = d > 1 ? (I - E) * (c - 1) / (d - 1) : 0, D = 0; D < f; D++){\n                var T = f > 1 ? C * (u - 1) + D * S : .5 * (C + R) * (u - 1);\n                if (T < 0 || T > u - 1) for(var N = 0; N < d; N++)for(var F = 0; F < l; F++){\n                    var _ = F + N * x[2] + D * x[1] + b * x[0];\n                    p.values[_] = a;\n                }\n                else if (\"bilinear\" === o) {\n                    var O = Math.floor(T), M = Math.ceil(T), B = T - O;\n                    for(N = 0; N < d; N++){\n                        if ((q = d > 1 ? E * (c - 1) + N * A : .5 * (E + I) * (c - 1)) < 0 || q > c - 1) for(F = 0; F < l; F++){\n                            _ = F + N * x[2] + D * x[1] + b * x[0];\n                            p.values[_] = a;\n                        }\n                        else {\n                            var P = Math.floor(q), L = Math.ceil(q), W = q - P;\n                            for(F = 0; F < l; F++){\n                                var U = g[_ = F + P * y[2] + O * y[1] + k * y[0]], V = g[_ = F + L * y[2] + O * y[1] + k * y[0]], z = g[_ = F + P * y[2] + M * y[1] + k * y[0]], G = U + (V - U) * W, H = z + (g[_ = F + L * y[2] + M * y[1] + k * y[0]] - z) * W;\n                                _ = F + N * x[2] + D * x[1] + b * x[0], p.values[_] = G + (H - G) * B;\n                            }\n                        }\n                    }\n                } else for(N = 0; N < d; ++N){\n                    var q;\n                    if ((q = d > 1 ? E * (c - 1) + N * A : .5 * (E + I) * (c - 1)) < 0 || q > c - 1) for(F = 0; F < l; F++){\n                        _ = F + N * x[2] + D * x[1] + b * x[0];\n                        p.values[_] = a;\n                    }\n                    else {\n                        var K = Math.round(q), j = Math.round(T);\n                        for(F = 0; F < l; F++){\n                            var X = F + K * y[2] + j * y[1] + k * y[0], Y = F + N * x[2] + D * x[1] + b * x[0];\n                            p.values[Y] = g[X];\n                        }\n                    }\n                }\n            }\n        }\n        return p.toTensor();\n    }, o.prototype.sparseToDense = function(t, e, n, r) {\n        var o = Zr(0, t, n), a = o.sliceRank, i = o.numUpdates, s = o.sliceSize, u = o.strides, c = o.outputSize;\n        return this.scatter(t, e, n, c, s, i, a, u, r, !1);\n    }, o.prototype.gatherND = function(t, e) {\n        var n = e.shape, r = n[n.length - 1], o = jr(t, e), a = o[0], i = o[1], s = o[2], u = o[3];\n        if (0 === i) return Fn([], a, t.dtype);\n        for(var c = new gt([\n            i,\n            s\n        ], t.dtype), l = this.readSync(e.dataId), h = this.readSync(t.dataId), f = 0; f < i; f++){\n            for(var d = [], p = 0, v = 0; v < r; v++){\n                var m = l[f * r + v];\n                p += m * u[v], d.push(m);\n            }\n            if (p < 0 || p >= t.size / s) throw new Error(\"Invalid indices: \" + d + \" does not index into \" + t.shape);\n            for(var g = 0; g < s; g++)c.values[f * s + g] = h[p * s + g];\n        }\n        return c.toTensor().reshape(a);\n    }, o.prototype.scatterND = function(t, e, n) {\n        var r = Zr(0, t, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, c = On(0);\n        return this.scatter(t, e, n, u, i, a, o, s, c, !0);\n    }, o.prototype.fill = function(t, e, n) {\n        var r = P(n = n || j(e), k(t));\n        return r.fill(e), Lt.makeTensor(r, t, n, this);\n    }, o.prototype.onesLike = function(t) {\n        if (\"string\" === t.dtype) throw new Error(\"onesLike is not supported for string tensors\");\n        return this.fill(t.shape, 1, t.dtype);\n    }, o.prototype.zerosLike = function(t) {\n        var e = P(t.dtype, k(t.shape));\n        return this.makeOutput(e, t.shape, t.dtype);\n    }, o.prototype.linspace = function(t, e, n) {\n        return Wo(t, e, n);\n    }, o.prototype.scatter = function(t, e, n, r, o, a, i, s, u, c) {\n        var l = [\n            r / o,\n            o\n        ], h = this.readSync(t.dataId), f = this.readSync(e.dataId);\n        if (0 === r) return Fn([], n, e.dtype);\n        var d = new gt(l, e.dtype);\n        d.values.fill(this.readSync(u.dataId)[0]);\n        for(var p = 0; p < a; p++){\n            for(var v = [], m = 0, g = 0; g < i; g++){\n                var y = h[p * i + g];\n                v.push(y), m += y * s[g];\n            }\n            if (m < 0 || m >= r / o) throw new Error(\"Invalid indices: \" + v + \" does not index into \" + n);\n            for(var x = 0; x < o; x++)c ? d.values[m * o + x] += f[p * o + x] : d.values[m * o + x] = 0 === e.rank ? f[0] : f[p * o + x];\n        }\n        return d.toTensor().reshape(n);\n    }, o;\n}(bo);\nLt.registerBackend(\"cpu\", function() {\n    return new Kh;\n}, 1);\nfor(var jh = 0, Xh = [\n    {\n        kernelName: \"NonMaxSuppressionV5\",\n        backendName: \"cpu\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = t.attrs, o = e, a = o.boxes, i = o.scores, s = r, u = s.maxOutputSize, c = s.iouThreshold, l = s.scoreThreshold, h = s.softNmsSigma, f = n;\n            Hh(a, \"NonMaxSuppressionWithScore\");\n            var d = Xo(f.data.get(a.dataId).values, f.data.get(i.dataId).values, u, c, l, h);\n            return [\n                d.selectedIndices,\n                d.selectedScores\n            ];\n        }\n    },\n    {\n        kernelName: \"Square\",\n        backendName: \"cpu\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e.x, o = n;\n            Hh(r, \"square\");\n            for(var a = o.data.get(r.dataId).values, i = new Float32Array(a.length), s = 0; s < a.length; ++s){\n                var u = a[s];\n                i[s] = u * u;\n            }\n            return {\n                dataId: o.write(i, r.shape, r.dtype),\n                shape: r.shape,\n                dtype: r.dtype\n            };\n        }\n    },\n    {\n        kernelName: eu,\n        backendName: \"cpu\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e, o = r.a, a = r.b, i = n;\n            Hh([\n                o,\n                a\n            ], eu);\n            var s = i.data.get(o.dataId).values, u = i.data.get(a.dataId).values, c = function(t, e, n, r, o, a) {\n                var i = Ro(t, e), s = i.length, u = $(i), c = B(o, k(i)), l = t.length, h = e.length, f = $(t), d = $(e), p = Co(t, i), v = Co(e, i);\n                if (p.length + v.length === 0) for(var m = 0; m < c.length; ++m)c[m] = a(n[m % n.length], r[m % r.length]);\n                else {\n                    var g = function(t) {\n                        var e = it(t, s, u), o = e.slice(-l);\n                        p.forEach(function(t) {\n                            return o[t] = 0;\n                        });\n                        var i = at(o, l, f), m = e.slice(-h);\n                        v.forEach(function(t) {\n                            return m[t] = 0;\n                        });\n                        var g = at(m, h, d);\n                        c[t] = a(n[i], r[g]);\n                    };\n                    for(m = 0; m < c.length; ++m)g(m);\n                }\n                return [\n                    c,\n                    i\n                ];\n            }(o.shape, a.shape, s, u, o.dtype, function(t, e) {\n                var n = t - e;\n                return n * n;\n            }), l = c[0], h = c[1];\n            return {\n                dataId: i.write(l, h, o.dtype),\n                shape: h,\n                dtype: o.dtype\n            };\n        }\n    }\n]; jh < Xh.length; jh++){\n    d(Xh[jh]);\n}\nvar Yh, $h = function(t) {\n    this.variableNames = [\n        \"A\"\n    ];\n    var e = ua(), n = t[0], r = t[1];\n    this.outputShape = t, this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + r + \".0, \" + n + \".0);\\n\\n        vec4 values = \" + e.texture2D + \"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \";\n}, Qh = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0;\n    var e = ua(), n = t[0], r = t[1];\n    this.outputShape = t, this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\" + r + \".0, \" + n + \".0);\\n            vec4 values = \" + e.texture2D + \"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \" + e.output + \" = result;\\n      }\\n    \";\n};\nfor(var Jh = 0, Zh = [\n    {\n        kernelName: \"FromPixels\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = t.attrs, o = e.pixels, a = r.numChannels, s = \"undefined\" != typeof HTMLVideoElement && o instanceof HTMLVideoElement, u = \"undefined\" != typeof HTMLImageElement && o instanceof HTMLImageElement, c = s ? [\n                o.videoWidth,\n                o.videoHeight\n            ] : [\n                o.width,\n                o.height\n            ], l = c[0], h = c[1], f = [\n                h,\n                l\n            ], d = [\n                h,\n                l,\n                a\n            ];\n            (u || s) && (null == Yh && (Yh = document.createElement(\"canvas\").getContext(\"2d\")), Yh.canvas.width = l, Yh.canvas.height = h, Yh.drawImage(o, 0, 0, l, h), o = Yh.canvas);\n            var p = n.makeTensorInfo(f, \"int32\");\n            n.texData.get(p.dataId).usage = zt.PIXELS, n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId), o);\n            var v = i().getBool(\"WEBGL_PACK\") ? new Qh(d) : new $h(d), m = n.runWebGLProgram(v, [\n                p\n            ], \"int32\");\n            return n.disposeData(p.dataId), m;\n        }\n    },\n    {\n        kernelName: \"NonMaxSuppressionV5\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = t.attrs;\n            dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");\n            var o = e, a = o.boxes, i = o.scores, s = r, u = s.maxOutputSize, c = s.iouThreshold, l = s.scoreThreshold, h = s.softNmsSigma, f = n, d = Xo(f.readSync(a.dataId), f.readSync(i.dataId), u, c, l, h);\n            return [\n                d.selectedIndices,\n                d.selectedScores\n            ];\n        }\n    },\n    {\n        kernelName: \"Square\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e.x, o = n, a = new Cs(r.shape, \"return x * x;\");\n            return o.runWebGLProgram(a, [\n                r\n            ], r.dtype);\n        }\n    },\n    {\n        kernelName: eu,\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e, o = r.a, a = r.b, s = n, u = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new La(\"return (a - b) * (a - b);\", o.shape, a.shape) : new Ba(\"return (a - b) * (a - b);\", o.shape, a.shape);\n            return s.compileAndRun(u, [\n                o,\n                a\n            ]);\n        }\n    }\n]; Jh < Zh.length; Jh++){\n    d(Zh[Jh]);\n}\nfor(var tf = 0, ef = [\n    {\n        kernelName: \"Square\",\n        gradFunc: function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.toFloat().mul(2));\n                }\n            };\n        }\n    },\n    {\n        kernelName: eu,\n        gradFunc: function(t, e) {\n            var n = e[0], r = e[1], o = On(2);\n            return {\n                a: function() {\n                    return gc(t, gc(o, Cc(n, r)));\n                },\n                b: function() {\n                    return gc(t, gc(o, Cc(r, n)));\n                }\n            };\n        }\n    }\n]; tf < ef.length; tf++){\n    p(ef[tf]);\n}\nvar nf = function() {\n    function t() {}\n    return t.prototype.fetch = function(t, e) {\n        return fetch(t, e);\n    }, t.prototype.now = function() {\n        return performance.now();\n    }, t.prototype.encode = function(t, e) {\n        if (\"utf-8\" !== e && \"utf8\" !== e) throw new Error(\"Browser's encoder only supports utf-8, but got \" + e);\n        return null == this.textEncoder && (this.textEncoder = new TextEncoder), this.textEncoder.encode(t);\n    }, t.prototype.decode = function(t, e) {\n        return new TextDecoder(e).decode(t);\n    }, t;\n}();\ni().get(\"IS_BROWSER\") && i().setPlatform(\"browser\", new nf);\nvar rf, of = function() {\n    return __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.es.js\");\n}, af = function() {\n    function t() {\n        this.util = __webpack_require__(/*! util */ \"util\"), this.textEncoder = new this.util.TextEncoder;\n    }\n    return t.prototype.fetch = function(t, e) {\n        return null != i().global.fetch ? i().global.fetch(t, e) : (null == rf && (rf = of()), rf(t, e));\n    }, t.prototype.now = function() {\n        var t = process.hrtime();\n        return 1e3 * t[0] + t[1] / 1e6;\n    }, t.prototype.encode = function(t, e) {\n        if (\"utf-8\" !== e && \"utf8\" !== e) throw new Error(\"Node built-in encoder only supports utf-8, but got \" + e);\n        return this.textEncoder.encode(t);\n    }, t.prototype.decode = function(t, e) {\n        return 0 === t.length ? \"\" : new this.util.TextDecoder(e).decode(t);\n    }, t;\n}();\ni().get(\"IS_NODE\") && i().setPlatform(\"node\", new af);\nvar sf = {\n    float32: 4,\n    int32: 4,\n    uint16: 2,\n    uint8: 1,\n    bool: 1\n}, uf = 4;\nfunction cf(t, e) {\n    for(var n = {}, r = 0, o = function(e) {\n        var o = e.name, a = e.dtype, i = e.shape, s = k(i), u = void 0;\n        if ((\"quantization\" in e)) {\n            var c = e.quantization;\n            if (\"uint8\" !== c.dtype && \"uint16\" !== c.dtype) throw new Error(\"Weight \" + e.name + \" has unknown quantization dtype \" + c.dtype + \". Supported quantization dtypes are: 'uint8' and 'uint16'.\");\n            var l = sf[c.dtype], h = t.slice(r, r + s * l), f = \"uint8\" === c.dtype ? new Uint8Array(h) : new Uint16Array(h);\n            if (\"float32\" === a) u = Float32Array.from(f, function(t) {\n                return t * c.scale + c.min;\n            });\n            else {\n                if (\"int32\" !== a) throw new Error(\"Unsupported dtype in weight '\" + o + \"': \" + a);\n                u = Int32Array.from(f, function(t) {\n                    return Math.round(t * c.scale + c.min);\n                });\n            }\n            r += s * l;\n        } else if (\"string\" === a) {\n            var d = k(e.shape);\n            u = [];\n            for(var p = 0; p < d; p++){\n                var v = new Uint32Array(t.slice(r, r + uf))[0];\n                r += uf;\n                var m = new Uint8Array(t.slice(r, r + v));\n                u.push(m), r += v;\n            }\n        } else {\n            var g = sf[a];\n            h = t.slice(r, r + s * g);\n            if (\"float32\" === a) u = new Float32Array(h);\n            else if (\"int32\" === a) u = new Int32Array(h);\n            else {\n                if (\"bool\" !== a) throw new Error(\"Unsupported dtype in weight '\" + o + \"': \" + a);\n                u = new Uint8Array(h);\n            }\n            r += s * g;\n        }\n        n[o] = Fn(u, i, a);\n    }, a = 0, i = e; a < i.length; a++){\n        o(i[a]);\n    }\n    return n;\n}\nfunction lf(t) {\n    if (null === t) throw new Error(\"Invalid input value: \" + JSON.stringify(t));\n    var e = 0, n = [];\n    t.forEach(function(t) {\n        if (e += t.byteLength, n.push(t.byteLength === t.buffer.byteLength ? t : new t.constructor(t)), !(t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array)) throw new Error(\"Unsupported TypedArray subtype: \" + t.constructor.name);\n    });\n    var r = new Uint8Array(e), o = 0;\n    return n.forEach(function(t) {\n        r.set(new Uint8Array(t.buffer), o), o += t.byteLength;\n    }), r.buffer;\n}\nvar hf = \"undefined\" != typeof Buffer && (\"undefined\" == typeof Blob || \"undefined\" == typeof atob || \"undefined\" == typeof btoa);\nfunction ff(t) {\n    return hf ? Buffer.byteLength(t) : new Blob([\n        t\n    ]).size;\n}\nfunction df(t) {\n    var e = 0;\n    t.forEach(function(t) {\n        e += t.byteLength;\n    });\n    var n = new Uint8Array(e), r = 0;\n    return t.forEach(function(t) {\n        n.set(new Uint8Array(t), r), r += t.byteLength;\n    }), n.buffer;\n}\nfunction pf(t) {\n    for(t = t.trim(); t.endsWith(\"/\");)t = t.slice(0, t.length - 1);\n    var e = t.split(\"/\");\n    return e[e.length - 1];\n}\nfunction vf(t) {\n    if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");\n    return {\n        dateSaved: new Date,\n        modelTopologyType: \"JSON\",\n        modelTopologyBytes: null == t.modelTopology ? 0 : ff(JSON.stringify(t.modelTopology)),\n        weightSpecsBytes: null == t.weightSpecs ? 0 : ff(JSON.stringify(t.weightSpecs)),\n        weightDataBytes: null == t.weightData ? 0 : t.weightData.byteLength\n    };\n}\nvar mf = function() {\n    function t() {\n        this.saveRouters = [], this.loadRouters = [];\n    }\n    return t.getInstance = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.registerSaveRouter = function(e) {\n        t.getInstance().saveRouters.push(e);\n    }, t.registerLoadRouter = function(e) {\n        t.getInstance().loadRouters.push(e);\n    }, t.getSaveHandlers = function(e) {\n        return t.getHandlers(e, \"save\");\n    }, t.getLoadHandlers = function(e, n) {\n        return t.getHandlers(e, \"load\", n);\n    }, t.getHandlers = function(e, n, r) {\n        var o = [];\n        return (\"load\" === n ? t.getInstance().loadRouters : t.getInstance().saveRouters).forEach(function(t) {\n            var n = t(e, r);\n            null !== n && o.push(n);\n        }), o;\n    }, t;\n}(), gf = \"://\", yf = function() {\n    function t() {\n        this.managers = {};\n    }\n    return t.getInstance = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.registerManager = function(e, n) {\n        C(null != e, function() {\n            return \"scheme must not be undefined or null.\";\n        }), e.endsWith(gf) && (e = e.slice(0, e.indexOf(gf))), C(e.length > 0, function() {\n            return \"scheme must not be an empty string.\";\n        });\n        var r = t.getInstance();\n        C(null == r.managers[e], function() {\n            return \"A model store manager is already registered for scheme '\" + e + \"'.\";\n        }), r.managers[e] = n;\n    }, t.getManager = function(t) {\n        var e = this.getInstance().managers[t];\n        if (null == e) throw new Error(\"Cannot find model manager for scheme '\" + t + \"'\");\n        return e;\n    }, t.getSchemes = function() {\n        return Object.keys(this.getInstance().managers);\n    }, t;\n}();\nfunction xf(t) {\n    if (-1 === t.indexOf(gf)) throw new Error(\"The url string provided does not contain a scheme. Supported schemes are: \" + yf.getSchemes().join(\",\"));\n    return {\n        scheme: t.split(gf)[0],\n        path: t.split(gf)[1]\n    };\n}\nfunction bf(t, e, o) {\n    return void 0 === o && (o = !1), n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return C(t !== e, function() {\n                        return \"Old path and new path are the same: '\" + t + \"'\";\n                    }), C((n = mf.getLoadHandlers(t)).length > 0, function() {\n                        return \"Copying failed because no load handler is found for source URL \" + t + \".\";\n                    }), C(n.length < 2, function() {\n                        return \"Copying failed because more than one (\" + n.length + \") load handlers for source URL \" + t + \".\";\n                    }), a = n[0], C((i = mf.getSaveHandlers(e)).length > 0, function() {\n                        return \"Copying failed because no save handler is found for destination URL \" + e + \".\";\n                    }), C(i.length < 2, function() {\n                        return \"Copying failed because more than one (\" + n.length + \") save handlers for destination URL \" + e + \".\";\n                    }), s = i[0], u = xf(t).scheme, c = xf(t).path, l = u === xf(t).scheme, [\n                        4,\n                        a.load()\n                    ];\n                case 1:\n                    return h = r.sent(), o && l ? [\n                        4,\n                        yf.getManager(u).removeModel(c)\n                    ] : [\n                        3,\n                        3\n                    ];\n                case 2:\n                    r.sent(), r.label = 3;\n                case 3:\n                    return [\n                        4,\n                        s.save(h)\n                    ];\n                case 4:\n                    return f = r.sent(), !o || l ? [\n                        3,\n                        6\n                    ] : [\n                        4,\n                        yf.getManager(u).removeModel(c)\n                    ];\n                case 5:\n                    r.sent(), r.label = 6;\n                case 6:\n                    return [\n                        2,\n                        f.modelArtifactsInfo\n                    ];\n            }\n        });\n    });\n}\nvar wf = \"models_store\", Cf = \"model_info_store\";\nfunction Ef() {\n    if (!i().getBool(\"IS_BROWSER\")) throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");\n    var t = window || self, e = t.indexedDB || t.mozIndexedDB || t.webkitIndexedDB || t.msIndexedDB || t.shimIndexedDB;\n    if (null == e) throw new Error(\"The current browser does not appear to support IndexedDB.\");\n    return e;\n}\nfunction Rf(t) {\n    var e = t.result;\n    e.createObjectStore(wf, {\n        keyPath: \"modelPath\"\n    }), e.createObjectStore(Cf, {\n        keyPath: \"modelPath\"\n    });\n}\nvar If = function() {\n    function t(t) {\n        if (this.indexedDB = Ef(), null == t || !t) throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");\n        this.modelPath = t;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n                return [\n                    2,\n                    this.databaseAction(this.modelPath, t)\n                ];\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return [\n                    2,\n                    this.databaseAction(this.modelPath)\n                ];\n            });\n        });\n    }, t.prototype.databaseAction = function(t, e) {\n        var n = this;\n        return new Promise(function(t, r) {\n            var o = n.indexedDB.open(\"tensorflowjs\", 1);\n            o.onupgradeneeded = function() {\n                return Rf(o);\n            }, o.onsuccess = function() {\n                var a = o.result;\n                if (null == e) {\n                    var i = a.transaction(wf, \"readonly\"), s = i.objectStore(wf).get(n.modelPath);\n                    s.onsuccess = function() {\n                        if (null == s.result) return a.close(), r(new Error(\"Cannot find model with path '\" + n.modelPath + \"' in IndexedDB.\"));\n                        t(s.result.modelArtifacts);\n                    }, s.onerror = function(t) {\n                        return a.close(), r(s.error);\n                    }, i.oncomplete = function() {\n                        return a.close();\n                    };\n                } else {\n                    var u, c = vf(e), l = a.transaction(Cf, \"readwrite\"), h = l.objectStore(Cf), f = h.put({\n                        modelPath: n.modelPath,\n                        modelArtifactsInfo: c\n                    });\n                    f.onsuccess = function() {\n                        var o = (u = a.transaction(wf, \"readwrite\")).objectStore(wf).put({\n                            modelPath: n.modelPath,\n                            modelArtifacts: e,\n                            modelArtifactsInfo: c\n                        });\n                        o.onsuccess = function() {\n                            return t({\n                                modelArtifactsInfo: c\n                            });\n                        }, o.onerror = function(t) {\n                            var e = (h = l.objectStore(Cf)).delete(n.modelPath);\n                            e.onsuccess = function() {\n                                return a.close(), r(o.error);\n                            }, e.onerror = function(t) {\n                                return a.close(), r(o.error);\n                            };\n                        };\n                    }, f.onerror = function(t) {\n                        return a.close(), r(f.error);\n                    }, l.oncomplete = function() {\n                        null == u ? a.close() : u.oncomplete = function() {\n                            return a.close();\n                        };\n                    };\n                }\n            }, o.onerror = function(t) {\n                return r(o.error);\n            };\n        });\n    }, t.URL_SCHEME = \"indexeddb://\", t;\n}(), kf = function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(If.URL_SCHEME) ? (e = t.slice(If.URL_SCHEME.length), new If(e)) : null;\n    var e;\n};\nmf.registerSaveRouter(kf), mf.registerLoadRouter(kf);\nvar Sf = function() {\n    function t() {\n        this.indexedDB = Ef();\n    }\n    return t.prototype.listModels = function() {\n        return n(this, void 0, void 0, function() {\n            var t = this;\n            return r(this, function(e) {\n                return [\n                    2,\n                    new Promise(function(e, n) {\n                        var r = t.indexedDB.open(\"tensorflowjs\", 1);\n                        r.onupgradeneeded = function() {\n                            return Rf(r);\n                        }, r.onsuccess = function() {\n                            var t = r.result, o = t.transaction(Cf, \"readonly\"), a = o.objectStore(Cf).getAll();\n                            a.onsuccess = function() {\n                                for(var t = {}, n = 0, r = a.result; n < r.length; n++){\n                                    var o = r[n];\n                                    t[o.modelPath] = o.modelArtifactsInfo;\n                                }\n                                e(t);\n                            }, a.onerror = function(e) {\n                                return t.close(), n(a.error);\n                            }, o.oncomplete = function() {\n                                return t.close();\n                            };\n                        }, r.onerror = function(t) {\n                            return n(r.error);\n                        };\n                    })\n                ];\n            });\n        });\n    }, t.prototype.removeModel = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e = this;\n            return r(this, function(n) {\n                var r;\n                return t = (r = t).startsWith(If.URL_SCHEME) ? r.slice(If.URL_SCHEME.length) : r, [\n                    2,\n                    new Promise(function(n, r) {\n                        var o = e.indexedDB.open(\"tensorflowjs\", 1);\n                        o.onupgradeneeded = function() {\n                            return Rf(o);\n                        }, o.onsuccess = function() {\n                            var e, a = o.result, i = a.transaction(Cf, \"readwrite\"), s = i.objectStore(Cf), u = s.get(t);\n                            u.onsuccess = function() {\n                                if (null == u.result) return a.close(), r(new Error(\"Cannot find model with path '\" + t + \"' in IndexedDB.\"));\n                                var o = s.delete(t), i = function() {\n                                    var o = (e = a.transaction(wf, \"readwrite\")).objectStore(wf).delete(t);\n                                    o.onsuccess = function() {\n                                        return n(u.result.modelArtifactsInfo);\n                                    }, o.onerror = function(t) {\n                                        return r(u.error);\n                                    };\n                                };\n                                o.onsuccess = i, o.onerror = function(t) {\n                                    return i(), a.close(), r(u.error);\n                                };\n                            }, u.onerror = function(t) {\n                                return a.close(), r(u.error);\n                            }, i.oncomplete = function() {\n                                null == e ? a.close() : e.oncomplete = function() {\n                                    return a.close();\n                                };\n                            };\n                        }, o.onerror = function(t) {\n                            return r(o.error);\n                        };\n                    })\n                ];\n            });\n        });\n    }, t;\n}();\nif (i().getBool(\"IS_BROWSER\")) try {\n    yf.registerManager(If.URL_SCHEME, new Sf);\n} catch (t) {}\nvar Af = \"/\", Df = \"tensorflowjs_models\", Tf = \"info\", Nf = \"model_topology\", Ff = \"weight_specs\", _f = \"weight_data\", Of = \"model_metadata\";\nfunction Mf(t) {\n    return {\n        info: [\n            Df,\n            t,\n            Tf\n        ].join(Af),\n        topology: [\n            Df,\n            t,\n            Nf\n        ].join(Af),\n        weightSpecs: [\n            Df,\n            t,\n            Ff\n        ].join(Af),\n        weightData: [\n            Df,\n            t,\n            _f\n        ].join(Af),\n        modelMetadata: [\n            Df,\n            t,\n            Of\n        ].join(Af)\n    };\n}\nfunction Bf(t) {\n    var e = t.split(Af);\n    if (e.length < 3) throw new Error(\"Invalid key format: \" + t);\n    return e.slice(1, e.length - 1).join(Af);\n}\nvar Pf = function() {\n    function t(t) {\n        if (!i().getBool(\"IS_BROWSER\") || \"undefined\" == \"undefined\" || 0) throw new Error(\"The current environment does not support local storage.\");\n        if (this.LS = window.localStorage, null == t || !t) throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");\n        this.modelPath = t, this.keys = Mf(this.modelPath);\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o;\n            return r(this, function(r) {\n                if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n                e = JSON.stringify(t.modelTopology), n = JSON.stringify(t.weightSpecs), o = vf(t);\n                try {\n                    return this.LS.setItem(this.keys.info, JSON.stringify(o)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, function(t) {\n                        if (hf) return Buffer.from(t).toString(\"base64\");\n                        for(var e = new Uint8Array(t), n = \"\", r = 0, o = e.length; r < o; r++)n += String.fromCharCode(e[r]);\n                        return btoa(n);\n                    }(t.weightData)), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                        format: t.format,\n                        generatedBy: t.generatedBy,\n                        convertedBy: t.convertedBy,\n                        userDefinedMetadata: t.userDefinedMetadata\n                    })), [\n                        2,\n                        {\n                            modelArtifactsInfo: o\n                        }\n                    ];\n                } catch (t) {\n                    throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error(\"Failed to save model '\" + this.modelPath + \"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=\" + o.modelTopologyBytes + \", weightSpecsBytes=\" + o.weightSpecsBytes + \", weightDataBytes=\" + o.weightDataBytes + \".\");\n                }\n                return [\n                    2\n                ];\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s;\n            return r(this, function(r) {\n                if (null == (t = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error(\"In local storage, there is no model with name '\" + this.modelPath + \"'\");\n                if (\"JSON\" !== t.modelTopologyType) throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");\n                if (e = {}, null == (n = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error(\"In local storage, the topology of model '\" + this.modelPath + \"' is missing.\");\n                if (e.modelTopology = n, null == (o = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error(\"In local storage, the weight specs of model '\" + this.modelPath + \"' are missing.\");\n                if (e.weightSpecs = o, null != (a = this.LS.getItem(this.keys.modelMetadata)) && (i = JSON.parse(a), e.format = i.format, e.generatedBy = i.generatedBy, e.convertedBy = i.convertedBy, e.userDefinedMetadata = i.userDefinedMetadata), null == (s = this.LS.getItem(this.keys.weightData))) throw new Error(\"In local storage, the binary weight values of model '\" + this.modelPath + \"' are missing.\");\n                return e.weightData = function(t) {\n                    if (hf) {\n                        var e = Buffer.from(t, \"base64\");\n                        return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);\n                    }\n                    for(var n = atob(t), r = new Uint8Array(n.length), o = 0; o < n.length; ++o)r.set([\n                        n.charCodeAt(o)\n                    ], o);\n                    return r.buffer;\n                }(s), [\n                    2,\n                    e\n                ];\n            });\n        });\n    }, t.URL_SCHEME = \"localstorage://\", t;\n}(), Lf = function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(Pf.URL_SCHEME) ? (e = t.slice(Pf.URL_SCHEME.length), new Pf(e)) : null;\n    var e;\n};\nmf.registerSaveRouter(Lf), mf.registerLoadRouter(Lf);\nvar Wf = function() {\n    function t() {\n        C(i().getBool(\"IS_BROWSER\"), function() {\n            return \"Current environment is not a web browser\";\n        }), C( true || 0, function() {\n            return \"Current browser does not appear to support localStorage\";\n        }), this.LS = window.localStorage;\n    }\n    return t.prototype.listModels = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i;\n            return r(this, function(r) {\n                for(t = {}, e = Df + Af, n = Af + Tf, o = 0; o < this.LS.length; ++o)(a = this.LS.key(o)).startsWith(e) && a.endsWith(n) && (i = Bf(a), t[i] = JSON.parse(this.LS.getItem(a)));\n                return [\n                    2,\n                    t\n                ];\n            });\n        });\n    }, t.prototype.removeModel = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                var o;\n                if (t = (o = t).startsWith(Pf.URL_SCHEME) ? o.slice(Pf.URL_SCHEME.length) : o, e = Mf(t), null == this.LS.getItem(e.info)) throw new Error(\"Cannot find model at path '\" + t + \"'\");\n                return n = JSON.parse(this.LS.getItem(e.info)), this.LS.removeItem(e.info), this.LS.removeItem(e.topology), this.LS.removeItem(e.weightSpecs), this.LS.removeItem(e.weightData), [\n                    2,\n                    n\n                ];\n            });\n        });\n    }, t;\n}();\nif (i().getBool(\"IS_BROWSER\")) try {\n    yf.registerManager(Pf.URL_SCHEME, new Wf);\n} catch (t) {}\nvar Uf = \"model\", Vf = \".json\", zf = \".weights.bin\";\nfunction Gf(t) {\n    return new Promise(function(t) {\n        return setTimeout(t);\n    }).then(t);\n}\nvar Hf = function() {\n    function t(e) {\n        if (!i().getBool(\"IS_BROWSER\")) throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");\n        e.startsWith(t.URL_SCHEME) && (e = e.slice(t.URL_SCHEME.length)), null != e && 0 !== e.length || (e = Uf), this.modelTopologyFileName = e + Vf, this.weightDataFileName = e + zf;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, i, s;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (\"undefined\" == typeof document) throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");\n                        if (e = window.URL.createObjectURL(new Blob([\n                            t.weightData\n                        ], {\n                            type: \"application/octet-stream\"\n                        })), !(t.modelTopology instanceof ArrayBuffer)) return [\n                            3,\n                            1\n                        ];\n                        throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");\n                    case 1:\n                        return n = [\n                            {\n                                paths: [\n                                    \"./\" + this.weightDataFileName\n                                ],\n                                weights: t.weightSpecs\n                            }\n                        ], o = {\n                            modelTopology: t.modelTopology,\n                            format: t.format,\n                            generatedBy: t.generatedBy,\n                            convertedBy: t.convertedBy,\n                            weightsManifest: n\n                        }, a = window.URL.createObjectURL(new Blob([\n                            JSON.stringify(o)\n                        ], {\n                            type: \"application/json\"\n                        })), (i = null == this.jsonAnchor ? document.createElement(\"a\") : this.jsonAnchor).download = this.modelTopologyFileName, i.href = a, [\n                            4,\n                            Gf(function() {\n                                return i.dispatchEvent(new MouseEvent(\"click\"));\n                            })\n                        ];\n                    case 2:\n                        return r.sent(), null == t.weightData ? [\n                            3,\n                            4\n                        ] : ((s = null == this.weightDataAnchor ? document.createElement(\"a\") : this.weightDataAnchor).download = this.weightDataFileName, s.href = e, [\n                            4,\n                            Gf(function() {\n                                return s.dispatchEvent(new MouseEvent(\"click\"));\n                            })\n                        ]);\n                    case 3:\n                        r.sent(), r.label = 4;\n                    case 4:\n                        return [\n                            2,\n                            {\n                                modelArtifactsInfo: vf(t)\n                            }\n                        ];\n                }\n            });\n        });\n    }, t.URL_SCHEME = \"downloads://\", t;\n}(), qf = function() {\n    function t(t) {\n        if (null == t || t.length < 1) throw new Error(\"When calling browserFiles, at least 1 file is required, but received \" + t);\n        this.files = t;\n    }\n    return t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n = this;\n            return r(this, function(r) {\n                return t = this.files[0], e = this.files.slice(1), [\n                    2,\n                    new Promise(function(r, o) {\n                        var a = new FileReader;\n                        a.onload = function(a) {\n                            var i = JSON.parse(a.target.result), s = i.modelTopology;\n                            if (null != s) {\n                                0 === e.length && r({\n                                    modelTopology: s\n                                });\n                                var u = i.weightsManifest;\n                                if (null != u) {\n                                    var c;\n                                    try {\n                                        c = n.checkManifestAndWeightFiles(u, e);\n                                    } catch (t) {\n                                        return void o(t);\n                                    }\n                                    var l = [], h = [], f = [];\n                                    u.forEach(function(t) {\n                                        t.paths.forEach(function(t) {\n                                            h.push(t), f.push(null);\n                                        }), l.push.apply(l, t.weights);\n                                    }), u.forEach(function(t) {\n                                        t.paths.forEach(function(t) {\n                                            var e = new FileReader;\n                                            e.onload = function(e) {\n                                                var n = e.target.result, o = h.indexOf(t);\n                                                f[o] = n, -1 === f.indexOf(null) && r({\n                                                    modelTopology: s,\n                                                    weightSpecs: l,\n                                                    weightData: df(f),\n                                                    format: i.format,\n                                                    generatedBy: i.generatedBy,\n                                                    convertedBy: i.convertedBy,\n                                                    userDefinedMetadata: i.userDefinedMetadata\n                                                });\n                                            }, e.onerror = function(e) {\n                                                return o(\"Failed to weights data from file of path '\" + t + \"'.\");\n                                            }, e.readAsArrayBuffer(c[t]);\n                                        });\n                                    });\n                                } else o(new Error(\"weightManifest field is missing from file \" + t.name));\n                            } else o(new Error(\"modelTopology field is missing from file \" + t.name));\n                        }, a.onerror = function(e) {\n                            return o(\"Failed to read model topology and weights manifest JSON from file '\" + t.name + \"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.\");\n                        }, a.readAsText(t);\n                    })\n                ];\n            });\n        });\n    }, t.prototype.checkManifestAndWeightFiles = function(t, e) {\n        for(var n = [], r = e.map(function(t) {\n            return pf(t.name);\n        }), o = {}, a = 0, i = t; a < i.length; a++){\n            i[a].paths.forEach(function(t) {\n                var a = pf(t);\n                if (-1 !== n.indexOf(a)) throw new Error(\"Duplicate file basename found in weights manifest: '\" + a + \"'\");\n                if (n.push(a), -1 === r.indexOf(a)) throw new Error(\"Weight file with basename '\" + a + \"' is not provided.\");\n                o[t] = e[r.indexOf(a)];\n            });\n        }\n        if (n.length !== e.length) throw new Error(\"Mismatch in the number of files in weights manifest (\" + n.length + \") and the number of weight files provided (\" + e.length + \").\");\n        return o;\n    }, t;\n}();\nfunction Kf(t, e, n, r) {\n    !function(t) {\n        C(null != t && Array.isArray(t) && t.length > 0, function() {\n            return \"promises must be a none empty array\";\n        });\n    }(t), function(t, e) {\n        C(t >= 0 && t <= 1, function() {\n            return \"Progress fraction must be in range [0, 1], but got startFraction \" + t;\n        }), C(e >= 0 && e <= 1, function() {\n            return \"Progress fraction must be in range [0, 1], but got endFraction \" + e;\n        }), C(e >= t, function() {\n            return \"startFraction must be no more than endFraction, but got startFraction \" + t + \" and endFraction \" + e;\n        });\n    }(n = null == n ? 0 : n, r = null == r ? 1 : r);\n    var o = 0;\n    return Promise.all(t.map(function(a) {\n        return a.then(function(a) {\n            var i = n + ++o / t.length * (r - n);\n            return e(i), a;\n        }), a;\n    }));\n}\nfunction jf(t, e) {\n    return n(this, void 0, void 0, function() {\n        var n, o, a, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return null == e && (e = {}), n = null == e.fetchFunc ? i().platform.fetch : e.fetchFunc, o = t.map(function(t) {\n                        return n(t, e.requestInit, {\n                            isBinary: !0\n                        });\n                    }), a = 0, s = .5, null != e.onProgress ? [\n                        3,\n                        2\n                    ] : [\n                        4,\n                        Promise.all(o)\n                    ];\n                case 1:\n                    return u = r.sent(), [\n                        3,\n                        4\n                    ];\n                case 2:\n                    return [\n                        4,\n                        Kf(o, e.onProgress, a, s)\n                    ];\n                case 3:\n                    u = r.sent(), r.label = 4;\n                case 4:\n                    return c = u.map(function(t) {\n                        return t.arrayBuffer();\n                    }), l = .5, h = 1, null != e.onProgress ? [\n                        3,\n                        6\n                    ] : [\n                        4,\n                        Promise.all(c)\n                    ];\n                case 5:\n                    return f = r.sent(), [\n                        3,\n                        8\n                    ];\n                case 6:\n                    return [\n                        4,\n                        Kf(c, e.onProgress, l, h)\n                    ];\n                case 7:\n                    f = r.sent(), r.label = 8;\n                case 8:\n                    return [\n                        2,\n                        f\n                    ];\n            }\n        });\n    });\n}\nfunction Xf(t) {\n    var e = this;\n    return function(o, a, i) {\n        return void 0 === a && (a = \"\"), n(e, void 0, void 0, function() {\n            var e, n, s, u, c, l, h, f, d, p;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (e = o.map(function() {\n                            return !1;\n                        }), n = {}, s = null != i ? i.map(function() {\n                            return !1;\n                        }) : [], u = [], o.forEach(function(t, r) {\n                            var o = 0;\n                            t.weights.forEach(function(t) {\n                                var a = \"quantization\" in t ? t.quantization.dtype : t.dtype, c = sf[a] * k(t.shape), l = function() {\n                                    e[r] = !0, null == n[r] && (n[r] = []), n[r].push({\n                                        manifestEntry: t,\n                                        groupOffset: o,\n                                        sizeBytes: c\n                                    });\n                                };\n                                null != i ? i.forEach(function(e, n) {\n                                    e === t.name && (l(), s[n] = !0);\n                                }) : l(), u.push(t.name), o += c;\n                            });\n                        }), !s.every(function(t) {\n                            return t;\n                        })) throw c = i.filter(function(t, e) {\n                            return !s[e];\n                        }), new Error(\"Could not find weights in manifest with names: \" + c.join(\", \") + \". \\nManifest JSON has weights with names: \" + u.join(\", \") + \".\");\n                        return l = e.reduce(function(t, e, n) {\n                            return e && t.push(n), t;\n                        }, []), h = [], l.forEach(function(t) {\n                            o[t].paths.forEach(function(t) {\n                                var e = a + (a.endsWith(\"/\") ? \"\" : \"/\") + t;\n                                h.push(e);\n                            });\n                        }), [\n                            4,\n                            t(h)\n                        ];\n                    case 1:\n                        return f = r.sent(), d = {}, p = 0, l.forEach(function(t) {\n                            for(var e = o[t].paths.length, r = 0, a = 0; a < e; a++)r += f[p + a].byteLength;\n                            for(var i = new ArrayBuffer(r), s = new Uint8Array(i), u = 0, c = 0; c < e; c++){\n                                var l = new Uint8Array(f[p + c]);\n                                s.set(l, u), u += l.byteLength;\n                            }\n                            n[t].forEach(function(t) {\n                                var e = cf(i.slice(t.groupOffset, t.groupOffset + t.sizeBytes), [\n                                    t.manifestEntry\n                                ]);\n                                for(var n in e)d[n] = e[n];\n                            }), p += e;\n                        }), [\n                            2,\n                            d\n                        ];\n                }\n            });\n        });\n    };\n}\nmf.registerSaveRouter(function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(Hf.URL_SCHEME) ? function(t) {\n        void 0 === t && (t = \"model\");\n        return new Hf(t);\n    }(t.slice(Hf.URL_SCHEME.length)) : null;\n});\nvar Yf = function() {\n    function t(t, e) {\n        if (this.DEFAULT_METHOD = \"POST\", null == e && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, null != e.fetchFunc ? (C(\"function\" == typeof e.fetchFunc, function() {\n            return \"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\";\n        }), this.fetch = e.fetchFunc) : this.fetch = i().platform.fetch, C(null != t && t.length > 0, function() {\n            return \"URL path for http must not be null, undefined or empty.\";\n        }), Array.isArray(t) && C(2 === t.length, function() {\n            return \"URL paths for http must have a length of 2, (actual length is \" + t.length + \").\";\n        }), this.path = t, null != e.requestInit && null != e.requestInit.body) throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");\n        this.requestInit = e.requestInit || {};\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");\n                        return (e = Object.assign({\n                            method: this.DEFAULT_METHOD\n                        }, this.requestInit)).body = new FormData, n = [\n                            {\n                                paths: [\n                                    \"./model.weights.bin\"\n                                ],\n                                weights: t.weightSpecs\n                            }\n                        ], o = {\n                            modelTopology: t.modelTopology,\n                            format: t.format,\n                            generatedBy: t.generatedBy,\n                            convertedBy: t.convertedBy,\n                            userDefinedMetadata: t.userDefinedMetadata,\n                            weightsManifest: n\n                        }, e.body.append(\"model.json\", new Blob([\n                            JSON.stringify(o)\n                        ], {\n                            type: \"application/json\"\n                        }), \"model.json\"), null != t.weightData && e.body.append(\"model.weights.bin\", new Blob([\n                            t.weightData\n                        ], {\n                            type: \"application/octet-stream\"\n                        }), \"model.weights.bin\"), [\n                            4,\n                            this.fetch(this.path, e)\n                        ];\n                    case 1:\n                        if ((a = r.sent()).ok) return [\n                            2,\n                            {\n                                modelArtifactsInfo: vf(t),\n                                responses: [\n                                    a\n                                ]\n                            }\n                        ];\n                        throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" + a.status + \".\");\n                }\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s, u, c, l, h, f;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.fetch(this.path, this.requestInit)\n                        ];\n                    case 1:\n                        if (!(t = r.sent()).ok) throw new Error(\"Request to \" + this.path + \" failed with status code \" + t.status + \". Please verify this URL points to the model JSON of the model to load.\");\n                        r.label = 2;\n                    case 2:\n                        return r.trys.push([\n                            2,\n                            4,\n                            ,\n                            5\n                        ]), [\n                            4,\n                            t.json()\n                        ];\n                    case 3:\n                        return e = r.sent(), [\n                            3,\n                            5\n                        ];\n                    case 4:\n                        throw r.sent(), n = \"Failed to parse model JSON of response from \" + this.path + \".\", this.path.endsWith(\".pb\") ? n += \" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\" : n += \" Please make sure the server is serving valid JSON for this request.\", new Error(n);\n                    case 5:\n                        if (o = e.modelTopology, a = e.weightsManifest, i = e.generatedBy, s = e.convertedBy, u = e.format, c = e.userDefinedMetadata, null == o && null == a) throw new Error(\"The JSON from HTTP path \" + this.path + \" contains neither model topology or manifest for weights.\");\n                        return null == a ? [\n                            3,\n                            7\n                        ] : [\n                            4,\n                            this.loadWeights(a)\n                        ];\n                    case 6:\n                        f = r.sent(), l = f[0], h = f[1], r.label = 7;\n                    case 7:\n                        return [\n                            2,\n                            {\n                                modelTopology: o,\n                                weightSpecs: l,\n                                weightData: h,\n                                userDefinedMetadata: c,\n                                generatedBy: i,\n                                convertedBy: s,\n                                format: u\n                            }\n                        ];\n                }\n            });\n        });\n    }, t.prototype.loadWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, i, s, u, c, l, h, f;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        for(e = Array.isArray(this.path) ? this.path[1] : this.path, n = function(t) {\n                            var e = t.lastIndexOf(\"/\"), n = t.lastIndexOf(\"?\"), r = t.substring(0, e), o = n > e ? t.substring(n) : \"\";\n                            return [\n                                r + \"/\",\n                                o\n                            ];\n                        }(e), o = n[0], a = n[1], i = this.weightPathPrefix || o, s = [], u = 0, c = t; u < c.length; u++)l = c[u], s.push.apply(s, l.weights);\n                        return h = [], t.forEach(function(t) {\n                            t.paths.forEach(function(t) {\n                                h.push(i + t + a);\n                            });\n                        }), [\n                            4,\n                            jf(h, {\n                                requestInit: this.requestInit,\n                                fetchFunc: this.fetch,\n                                onProgress: this.onProgress\n                            })\n                        ];\n                    case 1:\n                        return f = r.sent(), [\n                            2,\n                            [\n                                s,\n                                df(f)\n                            ]\n                        ];\n                }\n            });\n        });\n    }, t.URL_SCHEME_REGEX = /^https?:\\/\\//, t;\n}();\nfunction $f(t) {\n    return null != t.match(Yf.URL_SCHEME_REGEX);\n}\nvar Qf = function(t, e) {\n    if (\"undefined\" == typeof fetch) return null;\n    return (Array.isArray(t) ? t.every(function(t) {\n        return $f(t);\n    }) : $f(t)) ? Jf(t, {\n        onProgress: e\n    }) : null;\n};\nfunction Jf(t, e) {\n    return new Yf(t, e);\n}\nmf.registerSaveRouter(Qf), mf.registerLoadRouter(Qf);\nvar Zf = function() {\n    function t(t) {\n        this.modelArtifacts = t;\n    }\n    return t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return [\n                    2,\n                    this.modelArtifacts\n                ];\n            });\n        });\n    }, t;\n}(), td = function() {\n    function t(t) {\n        this.saveHandler = t;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                return [\n                    2,\n                    this.saveHandler(t)\n                ];\n            });\n        });\n    }, t;\n}();\nvar ed = Object.freeze({\n    browserFiles: function(t) {\n        return new qf(t);\n    },\n    browserHTTPRequest: function(t, e) {\n        return Jf(t, e);\n    },\n    concatenateArrayBuffers: df,\n    decodeWeights: cf,\n    encodeWeights: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            var o, a, i, s, u, c = this;\n            return r(this, function(l) {\n                switch(l.label){\n                    case 0:\n                        for(o = [], a = [], i = Array.isArray(t) ? t.map(function(t) {\n                            return t.name;\n                        }) : Object.keys(t), s = function(s) {\n                            var u = i[s], l = Array.isArray(t) ? t[s].tensor : t[u];\n                            if (\"float32\" !== l.dtype && \"int32\" !== l.dtype && \"bool\" !== l.dtype && \"string\" !== l.dtype) throw new Error(\"Unsupported dtype in weight '\" + u + \"': \" + l.dtype);\n                            var h = {\n                                name: u,\n                                shape: l.shape,\n                                dtype: l.dtype\n                            };\n                            if (\"string\" === l.dtype) {\n                                var f = new Promise(function(t) {\n                                    return n(c, void 0, void 0, function() {\n                                        var e, n, o, a, i, s, u;\n                                        return r(this, function(r) {\n                                            switch(r.label){\n                                                case 0:\n                                                    return [\n                                                        4,\n                                                        l.bytes()\n                                                    ];\n                                                case 1:\n                                                    for(e = r.sent(), n = e.reduce(function(t, e) {\n                                                        return t + e.length;\n                                                    }, 0) + uf * e.length, o = new Uint8Array(n), a = 0, i = 0; i < e.length; i++)s = e[i], u = new Uint8Array(new Uint32Array([\n                                                        s.length\n                                                    ]).buffer), o.set(u, a), a += uf, o.set(s, a), a += s.length;\n                                                    return t(o), [\n                                                        2\n                                                    ];\n                                            }\n                                        });\n                                    });\n                                });\n                                a.push(f);\n                            } else a.push(l.data());\n                            null != e && (h.group = e), o.push(h);\n                        }, u = 0; u < i.length; ++u)s(u);\n                        return [\n                            4,\n                            Promise.all(a)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            {\n                                data: lf(l.sent()),\n                                specs: o\n                            }\n                        ];\n                }\n            });\n        });\n    },\n    fromMemory: function(t, e, n, r) {\n        return 1 === arguments.length ? null != t.modelTopology || null != t.weightSpecs ? new Zf(t) : (console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"), new Zf({\n            modelTopology: t\n        })) : (console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"), new Zf({\n            modelTopology: t,\n            weightSpecs: e,\n            weightData: n,\n            trainingConfig: r\n        }));\n    },\n    getLoadHandlers: function(t, e) {\n        return mf.getLoadHandlers(t, e);\n    },\n    getModelArtifactsInfoForJSON: vf,\n    getSaveHandlers: function(t) {\n        return mf.getSaveHandlers(t);\n    },\n    http: Jf,\n    isHTTPScheme: $f,\n    loadWeights: function(t, e, o, a) {\n        return void 0 === e && (e = \"\"), n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return [\n                    2,\n                    Xf(function(t) {\n                        return jf(t, {\n                            requestInit: a\n                        });\n                    })(t, e, o)\n                ];\n            });\n        });\n    },\n    registerLoadRouter: function(t) {\n        return mf.registerLoadRouter(t);\n    },\n    registerSaveRouter: function(t) {\n        return mf.registerSaveRouter(t);\n    },\n    weightsLoaderFactory: Xf,\n    withSaveHandler: function(t) {\n        return new td(t);\n    },\n    copyModel: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return !1, [\n                    2,\n                    bf(t, e, !1)\n                ];\n            });\n        });\n    },\n    listModels: function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        t = yf.getSchemes(), e = {}, n = 0, o = t, r.label = 1;\n                    case 1:\n                        return n < o.length ? (a = o[n], [\n                            4,\n                            yf.getManager(a).listModels()\n                        ]) : [\n                            3,\n                            4\n                        ];\n                    case 2:\n                        for(s in i = r.sent())e[a + gf + s] = i[s];\n                        r.label = 3;\n                    case 3:\n                        return n++, [\n                            3,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2,\n                            e\n                        ];\n                }\n            });\n        });\n    },\n    moveModel: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return !0, [\n                    2,\n                    bf(t, e, !0)\n                ];\n            });\n        });\n    },\n    removeModel: function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return e = xf(t), [\n                    2,\n                    yf.getManager(e.scheme).removeModel(e.path)\n                ];\n            });\n        });\n    }\n});\nvar nd, rd = An({\n    confusionMatrix_: function(t, e, n) {\n        var r = mn(t, \"labels\", \"confusionMatrix\"), o = mn(e, \"predictions\", \"confusionMatrix\");\n        C(null == n || n > 0 && Number.isInteger(n), function() {\n            return \"If provided, numClasses must be a positive integer, but got \" + n;\n        }), C(1 === r.rank, function() {\n            return \"Expected the rank of labels to be 1, but got \" + r.rank;\n        }), C(1 === o.rank, function() {\n            return \"Expected the rank of predictions to be 1, but got \" + o.rank;\n        }), C(r.shape[0] === o.shape[0], function() {\n            return \"Mismatch in the number of examples: \" + r.shape[0] + \" vs. \" + o.shape[0] + \". Labels and predictions should have the same number of elements.\";\n        }), C(n > 0 && Number.isInteger(n), function() {\n            return \"numClasses is required to be a positive integer, but got \" + n;\n        });\n        var a = Rr(r.asType(\"int32\"), n), i = Rr(o.asType(\"int32\"), n);\n        return a.transpose().matMul(i).asType(\"int32\");\n    }\n}), od = Object.freeze({\n    confusionMatrix: rd\n});\nvar ad = An({\n    fromPixels_: function(t, e) {\n        if (void 0 === e && (e = 3), e > 4) throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");\n        if (null == t) throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");\n        var n = !1, r = !1, o = !1, a = !1, i = !1;\n        if (t.data instanceof Uint8Array) n = !0;\n        else if (\"undefined\" != typeof ImageData && t instanceof ImageData) r = !0;\n        else if (\"undefined\" != typeof HTMLVideoElement && t instanceof HTMLVideoElement) o = !0;\n        else if (\"undefined\" != typeof HTMLImageElement && t instanceof HTMLImageElement) a = !0;\n        else {\n            if (null == t.getContext) throw new Error(\"pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was \" + t.constructor.name);\n            i = !0;\n        }\n        if (o) {\n            if (o && t.readyState < 2) throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\");\n        }\n        if (null != l(\"FromPixels\", Lt.backendName)) return Lt.runKernel(\"FromPixels\", {\n            pixels: t\n        }, {\n            numChannels: e\n        });\n        var s, u, c = o ? [\n            t.videoWidth,\n            t.videoHeight\n        ] : [\n            t.width,\n            t.height\n        ], h = c[0], f = c[1];\n        if (i ? s = t.getContext(\"2d\").getImageData(0, 0, h, f).data : r || n ? s = t.data : (a || o) && (null == nd && (nd = document.createElement(\"canvas\").getContext(\"2d\")), nd.canvas.width = h, nd.canvas.height = f, nd.drawImage(t, 0, 0, h, f), s = nd.getImageData(0, 0, h, f).data), 4 === e) u = new Int32Array(s);\n        else {\n            var d = h * f;\n            u = new Int32Array(d * e);\n            for(var p = 0; p < d; p++)for(var v = 0; v < e; ++v)u[p * e + v] = s[4 * p + v];\n        }\n        return Pn(u, [\n            f,\n            h,\n            e\n        ], \"int32\");\n    }\n}), id = Object.freeze({\n    toPixels: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            var n, o, a, i, s, u, c, l, h, f, d, p, v, m, g, y, x, b, w, C, E, R, I;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (n = mn(t, \"img\", \"toPixels\"), t instanceof wt || (n = n.toInt()), 2 !== n.rank && 3 !== n.rank) throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \" + n.rank + \".\");\n                        if (o = n.shape.slice(0, 2), a = o[0], i = o[1], (s = 2 === n.rank ? 1 : n.shape[2]) > 4 || 2 === s) throw new Error(\"toPixels only supports depth of size 1, 3 or 4 but got \" + s);\n                        return [\n                            4,\n                            n.data()\n                        ];\n                    case 1:\n                        return u = r.sent(), c = n.min(), l = n.max(), [\n                            4,\n                            Promise.all([\n                                c.data(),\n                                l.data()\n                            ])\n                        ];\n                    case 2:\n                        if (h = r.sent(), f = h[0], d = h[1], p = f[0], v = d[0], c.dispose(), l.dispose(), \"float32\" === n.dtype) {\n                            if (p < 0 || v > 1) throw new Error(\"Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [\" + p + \" - \" + v + \"].\");\n                        } else {\n                            if (\"int32\" !== n.dtype) throw new Error(\"Unsupported type for toPixels: \" + n.dtype + \". Please use float32 or int32 tensors.\");\n                            if (p < 0 || v > 255) throw new Error(\"Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [\" + p + \" - \" + v + \"].\");\n                        }\n                        for(m = \"float32\" === n.dtype ? 255 : 1, g = new Uint8ClampedArray(i * a * 4), y = 0; y < a * i; ++y)x = void 0, b = void 0, w = void 0, C = void 0, 1 === s ? (x = u[y] * m, b = u[y] * m, w = u[y] * m, C = 255) : 3 === s ? (x = u[3 * y] * m, b = u[3 * y + 1] * m, w = u[3 * y + 2] * m, C = 255) : 4 === s && (x = u[4 * y] * m, b = u[4 * y + 1] * m, w = u[4 * y + 2] * m, C = u[4 * y + 3] * m), g[(E = 4 * y) + 0] = Math.round(x), g[E + 1] = Math.round(b), g[E + 2] = Math.round(w), g[E + 3] = Math.round(C);\n                        return null != e && (e.width = i, e.height = a, R = e.getContext(\"2d\"), I = new ImageData(g, i, a), R.putImageData(I, 0, 0)), n !== t && n.dispose(), [\n                            2,\n                            g\n                        ];\n                }\n            });\n        });\n    },\n    fromPixels: ad\n}), sd = function() {\n    function t() {}\n    return t.prototype.getClassName = function() {\n        return this.constructor.className;\n    }, t.fromConfig = function(t, e) {\n        return new t(e);\n    }, t;\n}(), ud = function() {\n    function t() {\n        this.classNameMap = {};\n    }\n    return t.getMap = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.register = function(e) {\n        t.getMap().classNameMap[e.className] = [\n            e,\n            e.fromConfig\n        ];\n    }, t;\n}();\nfunction cd(t) {\n    C(null != t.className, function() {\n        return \"Class being registered does not have the static className property defined.\";\n    }), C(\"string\" == typeof t.className, function() {\n        return \"className is required to be a string, but got type \" + typeof t.className;\n    }), C(t.className.length > 0, function() {\n        return \"Class being registered has an empty-string as its className, which is disallowed.\";\n    }), ud.register(t);\n}\nvar ld = Object.freeze({\n    Serializable: sd,\n    SerializationMap: ud,\n    registerClass: cd\n}), hd = .001, fd = .1;\nfunction dd() {\n    return 32 === Lt.backend.floatPrecision() ? hd : fd;\n}\nfunction pd(t, e, n) {\n    var r = !0;\n    if ((V(t) || V(e)) && (r = !1), V(t) && V(e) && (r = !0), r) {\n        var o = t.constructor.name, a = e.constructor.name;\n        if (o !== a) throw new Error(\"Arrays are of different type. Actual: \" + o + \". Expected: \" + a);\n    }\n    if (Array.isArray(t) && Array.isArray(e)) {\n        var i = pn(t), s = pn(e);\n        if (!S(i, s)) throw new Error(\"Arrays have different shapes. Actual: [\" + i + \"]. Expected: [\" + s + \"]\");\n    }\n    var u = V(t) ? t : I(t), c = V(e) ? e : I(e);\n    if (u.length !== c.length) throw new Error(\"Arrays have different lengths actual: \" + u.length + \" vs expected: \" + c.length + \".\\nActual:   \" + u + \".\\nExpected: \" + c + \".\");\n    for(var l = 0; l < c.length; ++l){\n        var h = u[l], f = c[l];\n        if (!n(h, f)) throw new Error(\"Arrays differ: actual[\" + l + \"] = \" + h + \", expected[\" + l + \"] = \" + f + \".\\nActual:   \" + u + \".\\nExpected: \" + c + \".\");\n    }\n}\nfunction vd(t, e, n) {\n    return !isFinite(t) && !isFinite(e) || !(isNaN(t) || isNaN(e) || Math.abs(t - e) > n);\n}\nvar md = Object.freeze({\n    TEST_EPSILON_FLOAT16: fd,\n    expectArraysClose: function(t, e, n) {\n        return null == n && (n = dd()), pd(t, e, function(t, e) {\n            return vd(t, e, n);\n        });\n    },\n    testEpsilon: dd,\n    expectPromiseToFail: function(t, e) {\n        t().then(function() {\n            return e.fail();\n        }, function() {\n            return e();\n        });\n    },\n    expectArraysEqual: function(t, e) {\n        var n = \"string\" == typeof e || \"number\" == typeof e || \"boolean\" == typeof e ? [\n            e\n        ] : e;\n        return H(t) || H(t[0]) || H(e) || H(e[0]) ? pd(t, n, function(t, e) {\n            return t == e;\n        }) : pd(t, e, function(t, e) {\n            return vd(t, e, 0);\n        });\n    },\n    expectNumbersClose: function(t, e, n) {\n        if (null == n && (n = dd()), !vd(t, e, n)) throw new Error(\"Numbers differ: actual === \" + t + \", expected === \" + e);\n    },\n    expectValuesInRange: function(t, e, n) {\n        for(var r = 0; r < t.length; r++)if (t[r] < e || t[r] > n) throw new Error(\"Value out of range:\" + t[r] + \" low: \" + e + \", high: \" + n);\n    },\n    expectArrayBuffersEqual: function(t, e) {\n        expect(new Float32Array(t)).toEqual(new Float32Array(e));\n    }\n}), gd = \"1.7.0\";\nvar yd = Object.freeze({\n    gpgpu_util: Mi,\n    webgl_util: Ge,\n    forceHalfFloat: function() {\n        i().set(\"WEBGL_FORCE_F16_TEXTURES\", !0);\n    },\n    MathBackendWebGL: Zs,\n    setWebGLContext: Kt,\n    GPGPUContext: Bi\n}), xd = function(t) {\n    function o() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return e(o, t), o.prototype.minimize = function(t, e, n) {\n        void 0 === e && (e = !1);\n        var r = this.computeGradients(t, n), o = r.value, a = r.grads;\n        if (null != n) {\n            var i = n.map(function(t) {\n                return {\n                    name: t.name,\n                    tensor: a[t.name]\n                };\n            });\n            this.applyGradients(i);\n        } else this.applyGradients(a);\n        return tn(a), e ? o : (o.dispose(), null);\n    }, Object.defineProperty(o.prototype, \"iterations\", {\n        get: function() {\n            return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), o.prototype.incrementIterations = function() {\n        this.iterations_ = this.iterations + 1;\n    }, o.prototype.computeGradients = function(t, e) {\n        return po(t, e);\n    }, o.prototype.dispose = function() {\n        null != this.iterations_ && tn(this.iterations_);\n    }, o.prototype.saveIterations = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return null == this.iterations_ && (this.iterations_ = 0), [\n                    2,\n                    {\n                        name: \"iter\",\n                        tensor: On(this.iterations_, \"int32\")\n                    }\n                ];\n            });\n        });\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"getWeights() is not implemented for this optimizer yet.\");\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"setWeights() is not implemented for this optimizer class \" + this.getClassName());\n            });\n        });\n    }, o.prototype.extractIterations = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return e = this, [\n                            4,\n                            t[0].tensor.data()\n                        ];\n                    case 1:\n                        return e.iterations_ = n.sent()[0], [\n                            2,\n                            t.slice(1)\n                        ];\n                }\n            });\n        });\n    }, o;\n}(sd);\nObject.defineProperty(xd, Symbol.hasInstance, {\n    value: function(t) {\n        return null != t.minimize && null != t.computeGradients && null != t.applyGradients;\n    }\n});\nvar bd = function(t) {\n    function o(e, n, r) {\n        void 0 === r && (r = null);\n        var o = t.call(this) || this;\n        return o.learningRate = e, o.rho = n, o.epsilon = r, o.accumulatedGrads = [], o.accumulatedUpdates = [], null == r && (o.epsilon = Lt.backend.epsilon()), o;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            null == e.accumulatedGrads[r] && (e.accumulatedGrads[r] = {\n                originalName: n + \"/accum_grad\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedUpdates[r] && (e.accumulatedUpdates[r] = {\n                originalName: n + \"/accum_var\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            });\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedGrads[r].variable, s = e.accumulatedUpdates[r].variable;\n                Ze(function() {\n                    var t = i.mul(e.rho).add(a.square().mul(1 - e.rho)), n = s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a), r = s.mul(e.rho).add(n.square().mul(1 - e.rho));\n                    i.assign(t), s.assign(r);\n                    var u = n.mul(-e.learningRate).add(o);\n                    o.assign(u);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedUpdates && (tn(this.accumulatedGrads.map(function(t) {\n            return t.variable;\n        })), tn(this.accumulatedUpdates.map(function(t) {\n            return t.variable;\n        })));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedGrads.concat(this.accumulatedUpdates), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = n.sent(), e = t.length / 2, !1, this.accumulatedGrads = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedUpdates = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            rho: this.rho,\n            epsilon: this.epsilon\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.rho, e.epsilon);\n    }, o.className = \"Adadelta\", o;\n}(xd);\ncd(bd);\nvar wd = function(t) {\n    function o(e, n) {\n        void 0 === n && (n = .1);\n        var r = t.call(this) || this;\n        return r.learningRate = e, r.initialAccumulatorValue = n, r.accumulatedGrads = [], r;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            if (null == e.accumulatedGrads[r]) {\n                e.accumulatedGrads[r] = {\n                    originalName: n + \"/accumulator\",\n                    variable: Ze(function() {\n                        return Hn(o.shape, e.initialAccumulatorValue).variable(!1);\n                    })\n                };\n            }\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedGrads[r].variable;\n                Ze(function() {\n                    var t = i.add(a.square());\n                    i.assign(t);\n                    var n = a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);\n                    o.assign(n);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedGrads && tn(this.accumulatedGrads.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ].concat(this.accumulatedGrads.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = e.sent(), !1, this.accumulatedGrads = t.map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            initialAccumulatorValue: this.initialAccumulatorValue\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.initialAccumulatorValue);\n    }, o.className = \"Adagrad\", o;\n}(xd);\ncd(wd);\nvar Cd = function(t) {\n    function o(e, n, r, o) {\n        void 0 === o && (o = null);\n        var a = t.call(this) || this;\n        return a.learningRate = e, a.beta1 = n, a.beta2 = r, a.epsilon = o, a.accumulatedFirstMoment = [], a.accumulatedSecondMoment = [], Ze(function() {\n            a.accBeta1 = On(n).variable(), a.accBeta2 = On(r).variable();\n        }), null == o && (a.epsilon = Lt.backend.epsilon()), a;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this, n = Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t);\n        Ze(function() {\n            var r = Cc(1, e.accBeta1), o = Cc(1, e.accBeta2);\n            n.forEach(function(n, a) {\n                var i = Lt.registeredVariables[n];\n                null == e.accumulatedFirstMoment[a] && (e.accumulatedFirstMoment[a] = {\n                    originalName: n + \"/m\",\n                    variable: Ze(function() {\n                        return Xn(i).variable(!1);\n                    })\n                }), null == e.accumulatedSecondMoment[a] && (e.accumulatedSecondMoment[a] = {\n                    originalName: n + \"/v\",\n                    variable: Ze(function() {\n                        return Xn(i).variable(!1);\n                    })\n                });\n                var s = Array.isArray(t) ? t[a].tensor : t[n];\n                if (null != s) {\n                    var u = e.accumulatedFirstMoment[a].variable, c = e.accumulatedSecondMoment[a].variable, l = u.mul(e.beta1).add(s.mul(1 - e.beta1)), h = c.mul(e.beta2).add(s.square().mul(1 - e.beta2)), f = l.div(r), d = h.div(o);\n                    u.assign(l), c.assign(h);\n                    var p = f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);\n                    i.assign(p);\n                }\n            }), e.accBeta1.assign(e.accBeta1.mul(e.beta1)), e.accBeta2.assign(e.accBeta2.mul(e.beta2));\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedSecondMoment && tn(this.accumulatedSecondMoment.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n = this;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = r.sent(), Ze(function() {\n                            n.accBeta1.assign(xc(n.beta1, n.iterations_ + 1)), n.accBeta2.assign(xc(n.beta2, n.iterations_ + 1));\n                        }), e = t.length / 2, !1, this.accumulatedFirstMoment = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedSecondMoment = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            epsilon: this.epsilon\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);\n    }, o.className = \"Adam\", o;\n}(xd);\ncd(Cd);\nvar Ed = function(t) {\n    function o(e, n, r, o, a) {\n        void 0 === o && (o = null), void 0 === a && (a = 0);\n        var i = t.call(this) || this;\n        return i.learningRate = e, i.beta1 = n, i.beta2 = r, i.epsilon = o, i.decay = a, i.accumulatedFirstMoment = [], i.accumulatedWeightedInfNorm = [], Ze(function() {\n            i.iteration = On(0).variable(), i.accBeta1 = On(n).variable();\n        }), null == o && (i.epsilon = Lt.backend.epsilon()), i;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this, n = Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t);\n        Ze(function() {\n            var r = Cc(1, e.accBeta1), o = sc(-e.learningRate, e.iteration.mul(e.decay).add(1));\n            n.forEach(function(n, a) {\n                var i = Lt.registeredVariables[n];\n                null == e.accumulatedFirstMoment[a] && (e.accumulatedFirstMoment[a] = {\n                    originalName: n + \"/m\",\n                    variable: Xn(i).variable(!1)\n                }), null == e.accumulatedWeightedInfNorm[a] && (e.accumulatedWeightedInfNorm[a] = {\n                    originalName: n + \"/v\",\n                    variable: Xn(i).variable(!1)\n                });\n                var s = Array.isArray(t) ? t[a].tensor : t[n];\n                if (null != s) {\n                    var u = e.accumulatedFirstMoment[a].variable, c = e.accumulatedWeightedInfNorm[a].variable, l = u.mul(e.beta1).add(s.mul(1 - e.beta1)), h = c.mul(e.beta2), f = s.abs(), d = h.maximum(f);\n                    u.assign(l), c.assign(d);\n                    var p = o.div(r).mul(l.div(d.add(e.epsilon))).add(i);\n                    i.assign(p);\n                }\n            }), e.iteration.assign(e.iteration.add(1)), e.accBeta1.assign(e.accBeta1.mul(e.beta1));\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedWeightedInfNorm && tn(this.accumulatedWeightedInfNorm.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"getWeights() is not implemented for Adamax yet.\");\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"setWeights() is not implemented for Adamax yet.\");\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            epsilon: this.epsilon,\n            decay: this.decay\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);\n    }, o.className = \"Adamax\", o;\n}(xd);\ncd(Ed);\nvar Rd = function(t) {\n    function o(e) {\n        var n = t.call(this) || this;\n        return n.learningRate = e, n.setLearningRate(e), n;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != o) {\n                var a = Lt.registeredVariables[n];\n                Ze(function() {\n                    var t = e.c.mul(o).add(a);\n                    a.assign(t);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.setLearningRate = function(t) {\n        this.learningRate = t, null != this.c && this.c.dispose(), this.c = en(On(-t));\n    }, o.prototype.dispose = function() {\n        this.c.dispose();\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ]\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        if (0 !== (t = e.sent()).length) throw new Error(\"SGD optimizer does not have settable weights.\");\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate);\n    }, o.className = \"SGD\", o;\n}(xd);\ncd(Rd);\nvar Id = function(t) {\n    function o(e, n, r) {\n        void 0 === r && (r = !1);\n        var o = t.call(this, e) || this;\n        return o.learningRate = e, o.momentum = n, o.useNesterov = r, o.accumulations = [], o.m = On(o.momentum), o;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            if (null == e.accumulations[r]) {\n                e.accumulations[r] = {\n                    originalName: n + \"/momentum\",\n                    variable: Ze(function() {\n                        return Xn(o).variable(!1);\n                    })\n                };\n            }\n            var a = e.accumulations[r].variable, i = Array.isArray(t) ? t[r].tensor : t[n];\n            null != i && Ze(function() {\n                var t, n = e.m.mul(a).add(i);\n                t = e.useNesterov ? e.c.mul(i.add(n.mul(e.m))).add(o) : e.c.mul(n).add(o), a.assign(n), o.assign(t);\n            });\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.m.dispose(), null != this.accumulations && tn(this.accumulations.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.setMomentum = function(t) {\n        this.momentum = t;\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ].concat(this.accumulations.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = e.sent(), !1, this.accumulations = t.map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            momentum: this.momentum,\n            useNesterov: this.useNesterov\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.momentum, e.useNesterov);\n    }, o.className = \"Momentum\", o;\n}(Rd);\ncd(Id);\nvar kd = function(t) {\n    function o(e, n, r, o, a) {\n        void 0 === n && (n = .9), void 0 === r && (r = 0), void 0 === o && (o = null), void 0 === a && (a = !1);\n        var i = t.call(this) || this;\n        if (i.learningRate = e, i.decay = n, i.momentum = r, i.epsilon = o, i.accumulatedMeanSquares = [], i.accumulatedMoments = [], i.accumulatedMeanGrads = [], i.centered = a, null == o && (i.epsilon = Lt.backend.epsilon()), null == e) throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");\n        return i;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            null == e.accumulatedMeanSquares[r] && (e.accumulatedMeanSquares[r] = {\n                originalName: n + \"/rms\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedMoments[r] && (e.accumulatedMoments[r] = {\n                originalName: n + \"/momentum\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedMeanGrads[r] && e.centered && (e.accumulatedMeanGrads[r] = {\n                originalName: n + \"/mg\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            });\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedMeanSquares[r].variable, s = e.accumulatedMoments[r].variable;\n                Ze(function() {\n                    var t = i.mul(e.decay).add(a.square().mul(1 - e.decay));\n                    if (e.centered) {\n                        var n = e.accumulatedMeanGrads[r].variable, u = n.mul(e.decay).add(a.mul(1 - e.decay)), c = s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));\n                        i.assign(t), n.assign(u), s.assign(c);\n                        var l = o.sub(c);\n                        o.assign(l);\n                    } else {\n                        var h = i.mul(e.decay).add(a.square().mul(1 - e.decay));\n                        c = s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));\n                        i.assign(h), s.assign(c);\n                        l = o.sub(c);\n                        o.assign(l);\n                    }\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedMeanSquares && tn(this.accumulatedMeanSquares.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedMeanGrads && this.centered && tn(this.accumulatedMeanGrads.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedMoments && tn(this.accumulatedMoments.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t.push.apply(t, this.accumulatedMeanGrads), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = n.sent(), e = this.centered ? t.length / 3 : t.length / 2, !1, this.accumulatedMeanSquares = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedMoments = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.centered && (this.accumulatedMeanGrads = t.slice(2 * e, 3 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        })), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            decay: this.decay,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            centered: this.centered\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);\n    }, o.className = \"RMSProp\", o;\n}(xd);\ncd(kd);\nvar Sd = function() {\n    function t() {}\n    return t.sgd = function(t) {\n        return new Rd(t);\n    }, t.momentum = function(t, e, n) {\n        return void 0 === n && (n = !1), new Id(t, e, n);\n    }, t.rmsprop = function(t, e, n, r, o) {\n        return void 0 === e && (e = .9), void 0 === n && (n = 0), void 0 === r && (r = null), void 0 === o && (o = !1), new kd(t, e, n, r, o);\n    }, t.adam = function(t, e, n, r) {\n        return void 0 === t && (t = .001), void 0 === e && (e = .9), void 0 === n && (n = .999), void 0 === r && (r = null), new Cd(t, e, n, r);\n    }, t.adadelta = function(t, e, n) {\n        return void 0 === t && (t = .001), void 0 === e && (e = .95), void 0 === n && (n = null), new bd(t, e, n);\n    }, t.adamax = function(t, e, n, r, o) {\n        return void 0 === t && (t = .002), void 0 === e && (e = .9), void 0 === n && (n = .999), void 0 === r && (r = null), void 0 === o && (o = 0), new Ed(t, e, n, r, o);\n    }, t.adagrad = function(t, e) {\n        return void 0 === e && (e = .1), new wd(t, e);\n    }, t;\n}(), Ad = {\n    sgd: Sd.sgd,\n    momentum: Sd.momentum,\n    adadelta: Sd.adadelta,\n    adagrad: Sd.adagrad,\n    rmsprop: Sd.rmsprop,\n    adamax: Sd.adamax,\n    adam: Sd.adam\n}, Dd = \"undefined\" != typeof requestAnimationFrame ? requestAnimationFrame : \"undefined\" != typeof setImmediate ? setImmediate : function(t) {\n    return t();\n};\nfunction Td() {\n    return new Promise(function(t) {\n        return Dd(function() {\n            return t();\n        });\n    });\n}\nwt.prototype.squaredDifference = function(t) {\n    return nu(this, t);\n}, xt = Gh;\n //# sourceMappingURL=tf-core.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js\n");

/***/ })

};
;